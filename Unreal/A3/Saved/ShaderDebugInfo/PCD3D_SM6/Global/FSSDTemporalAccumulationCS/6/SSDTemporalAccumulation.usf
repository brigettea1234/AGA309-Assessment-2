#line 1 "MoveShaderParametersToRootConstantBuffer"
cbuffer _RootShaderParameters
{
int4 bCameraCut[ (( 1 +3)/4)] : packoffset(c0);
float HistoryPreExposureCorrection : packoffset(c1);
float4 ScreenPosToHistoryBufferUV : packoffset(c2);
float4 HistoryBufferSizeAndInvSize : packoffset(c3);
float4 HistoryBufferUVMinMax : packoffset(c4);
float4 HistoryBufferScissorUVMinMax[1] : packoffset(c5);
float4 PrevSceneBufferUVToScreenPosition : packoffset(c9);
float4 DenoiserBufferSizeAndInvSize : packoffset(c10);
float4 DenoiserBufferBilinearUVMinMax : packoffset(c11);
float4 SceneBufferUVToScreenPosition : packoffset(c12);
float WorldDepthToPixelWorldRadius : packoffset(c13);
uint2 ViewportMin : packoffset(c14);
uint2 ViewportMax : packoffset(c14.z);
float4 ThreadIdToBufferUV : packoffset(c15);
float2 BufferUVToOutputPixelPosition : packoffset(c16);
float4x4 ScreenToView : packoffset(c17);
float2 BufferUVBilinearCorrection : packoffset(c21);
uint FrameIndex : packoffset(c31);
float4 LightPositionAndRadius[1] : packoffset(c32);
float4 LightDirectionAndLength[1] : packoffset(c36);
float4 HitDistanceToWorldBluringRadius[ (( 1 +3)/4)] : packoffset(c40);
uint4 LightType[ (( 1 +3)/4)] : packoffset(c41);
}

#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 6

#line 2 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MINOR 6

#line 3 "DumpShaderDefinesAsCommentedCode"
// #define ALLOW_STATIC_LIGHTING 1

#line 4 "DumpShaderDefinesAsCommentedCode"
// #define AMPLIFICATIONSHADER 0

#line 5 "DumpShaderDefinesAsCommentedCode"
// #define CLEAR_COAT_BOTTOM_NORMAL 0

#line 6 "DumpShaderDefinesAsCommentedCode"
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1

#line 7 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DEFINE #define

#line 8 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DXC 1

#line 9 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_SUPPORTS_HLSL2021 1

#line 10 "DumpShaderDefinesAsCommentedCode"
// #define COMPUTESHADER 1

#line 11 "DumpShaderDefinesAsCommentedCode"
// #define DIM_SIGNAL_BATCH_SIZE 1

#line 12 "DumpShaderDefinesAsCommentedCode"
// #define DIM_SIGNAL_PROCESSING 6

#line 13 "DumpShaderDefinesAsCommentedCode"
// #define DO_CHECK 1

#line 14 "DumpShaderDefinesAsCommentedCode"
// #define DO_GUARD_SLOW 0

#line 15 "DumpShaderDefinesAsCommentedCode"
// #define DXT5_NORMALMAPS 0

#line 16 "DumpShaderDefinesAsCommentedCode"
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0

#line 17 "DumpShaderDefinesAsCommentedCode"
// #define FORWARD_SHADING 0

#line 18 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0

#line 19 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_VELOCITY 0

#line 20 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_REFACTOR 1

#line 21 "DumpShaderDefinesAsCommentedCode"
// #define GEOMETRYSHADER 0

#line 22 "DumpShaderDefinesAsCommentedCode"
// #define HAS_INVERTED_Z_BUFFER 1

#line 23 "DumpShaderDefinesAsCommentedCode"
// #define INSTANCED_STEREO 0

#line 24 "DumpShaderDefinesAsCommentedCode"
// #define IRIS_NORMAL 0

#line 25 "DumpShaderDefinesAsCommentedCode"
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0

#line 26 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ROUGHDIFFUSE 0

#line 27 "DumpShaderDefinesAsCommentedCode"
// #define MESHSHADER 0

#line 28 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_MULTI_VIEW 0

#line 29 "DumpShaderDefinesAsCommentedCode"
// #define MULTI_VIEW 0

#line 30 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADER 0

#line 31 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1

#line 32 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BINDLESS 0

#line 33 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BUFFER_LOAD_TYPE_CONVERSION 1

#line 34 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 1

#line 35 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1

#line 36 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 1

#line 37 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 1

#line 38 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0

#line 39 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0

#line 40 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_UB_STRUCT 1

#line 41 "DumpShaderDefinesAsCommentedCode"
// #define POST_PROCESS_ALPHA 1

#line 42 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0

#line 43 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1

#line 44 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_OIT 0

#line 45 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0

#line 46 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1

#line 47 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1

#line 48 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORTS_LUMEN 1

#line 49 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0

#line 50 "DumpShaderDefinesAsCommentedCode"
// #define RAYCALLABLESHADER 0

#line 51 "DumpShaderDefinesAsCommentedCode"
// #define RAYGENSHADER 0

#line 52 "DumpShaderDefinesAsCommentedCode"
// #define RAYHITGROUPSHADER 0

#line 53 "DumpShaderDefinesAsCommentedCode"
// #define RAYMISSSHADER 0

#line 54 "DumpShaderDefinesAsCommentedCode"
// #define SELECTIVE_BASEPASS_OUTPUTS 0

#line 55 "DumpShaderDefinesAsCommentedCode"
// #define SHADING_PATH_DEFERRED 1

#line 56 "DumpShaderDefinesAsCommentedCode"
// #define SM6_PROFILE 1

#line 57 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ADVANCED_DEBUG_ENABLED 0

#line 58 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ENABLED 0

#line 59 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 0

#line 60 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0

#line 61 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0

#line 62 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0

#line 63 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_VSM_FOWARD_QUALITY 0

#line 64 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f

#line 65 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f

#line 66 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f

#line 67 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f

#line 68 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f

#line 69 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f

#line 70 "DumpShaderDefinesAsCommentedCode"
// #define USE_DBUFFER 1

#line 71 "DumpShaderDefinesAsCommentedCode"
// #define VELOCITY_ENCODE_DEPTH 1

#line 72 "DumpShaderDefinesAsCommentedCode"
// #define VERTEXSHADER 0

#line 73 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0

#line 74 "DumpShaderDefinesAsCommentedCode"
// #define WORKING_COLOR_SPACE_IS_SRGB 1

#line 25 "/Engine/Public/Platform/D3D/D3DCommon.ush"
SamplerState D3DStaticPointClampedSampler       : register(s1, space1000);

#line 973 "/Engine/Public/Platform.ush"
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 996 "/Engine/Public/Platform.ush"
bool  or_internal(bool  a, bool  b) { return bool(a || b); }

#line 997 "/Engine/Public/Platform.ush"
bool2 or_internal(bool2 a, bool2 b) { return bool2(a.x || b.x, a.y || b.y); }

#line 998 "/Engine/Public/Platform.ush"
bool3 or_internal(bool3 a, bool3 b) { return bool3(a.x || b.x, a.y || b.y, a.z || b.z); }

#line 999 "/Engine/Public/Platform.ush"
bool4 or_internal(bool4 a, bool4 b) { return bool4(a.x || b.x, a.y || b.y, a.z || b.z, a.w || b.w); }

#line 11 "/Engine/Private/ScreenSpaceDenoise/SSDDefinitions.ush"
#pragma warning(error: 3206)

#line 116 "/Engine/Private/Common.ush"
const static float PI = 3.1415926535897932f;

#line 117 "/Engine/Private/Common.ush"
const static float MaxHalfFloat = 65504.0f;

#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

#line 11 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

#line 17 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

#line 23 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

#line 58 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};

#line 65 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int Dummy; 
};

#line 75 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }

#line 76 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }

#line 77 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }

#line 78 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }

#line 79 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 80 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 93 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

#line 103 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 111 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 119 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 127 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 135 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

#line 140 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

#line 161 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}

#line 177 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

#line 227 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }

#line 228 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 229 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 230 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 232 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

#line 239 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

#line 256 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(float Value) { return Value; }

#line 257 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(float2 Value) { return Value; }

#line 258 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(float3 Value) { return Value; }

#line 259 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(float4 Value) { return Value; }

#line 260 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(float4x4 Value) { return Value; }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 3 "/Engine/Generated/UniformBuffers/View.ush"
cbuffer  UniformBufferConstants_View 
{
	 float4x4  View_TranslatedWorldToClip;
	 float4x4  View_RelativeWorldToClip;
	 float4x4  View_ClipToRelativeWorld;
	 float4x4  View_TranslatedWorldToView;
	 float4x4  View_ViewToTranslatedWorld;
	 float4x4  View_TranslatedWorldToCameraView;
	 float4x4  View_CameraViewToTranslatedWorld;
	 float4x4  View_ViewToClip;
	 float4x4  View_ViewToClipNoAA;
	 float4x4  View_ClipToView;
	 float4x4  View_ClipToTranslatedWorld;
	 float4x4  View_SVPositionToTranslatedWorld;
	 float4x4  View_ScreenToRelativeWorld;
	 float4x4  View_ScreenToTranslatedWorld;
	 float4x4  View_MobileMultiviewShadowTransform;
	 float3  View_ViewTilePosition;
	 float  PrePadding_View_972;
	 float3  View_MatrixTilePosition;
	 float  PrePadding_View_988;
	 float3  View_ViewForward;
	 float  PrePadding_View_1004;
	 float3  View_ViewUp;
	 float  PrePadding_View_1020;
	 float3  View_ViewRight;
	 float  PrePadding_View_1036;
	 float3  View_HMDViewNoRollUp;
	 float  PrePadding_View_1052;
	 float3  View_HMDViewNoRollRight;
	 float  PrePadding_View_1068;
	 float4  View_InvDeviceZToWorldZTransform;
	 float4  View_ScreenPositionScaleBias;
	 float3  View_RelativeWorldCameraOrigin;
	 float  PrePadding_View_1116;
	 float3  View_TranslatedWorldCameraOrigin;
	 float  PrePadding_View_1132;
	 float3  View_RelativeWorldViewOrigin;
	 float  PrePadding_View_1148;
	 float3  View_RelativePreViewTranslation;
	 float  PrePadding_View_1164;
	 float4x4  View_PrevViewToClip;
	 float4x4  View_PrevClipToView;
	 float4x4  View_PrevTranslatedWorldToClip;
	 float4x4  View_PrevTranslatedWorldToView;
	 float4x4  View_PrevViewToTranslatedWorld;
	 float4x4  View_PrevTranslatedWorldToCameraView;
	 float4x4  View_PrevCameraViewToTranslatedWorld;
	 float3  View_PrevTranslatedWorldCameraOrigin;
	 float  PrePadding_View_1628;
	 float3  View_PrevRelativeWorldCameraOrigin;
	 float  PrePadding_View_1644;
	 float3  View_PrevRelativeWorldViewOrigin;
	 float  PrePadding_View_1660;
	 float3  View_RelativePrevPreViewTranslation;
	 float  PrePadding_View_1676;
	 float4x4  View_PrevClipToRelativeWorld;
	 float4x4  View_PrevScreenToTranslatedWorld;
	 float4x4  View_ClipToPrevClip;
	 float4x4  View_ClipToPrevClipWithAA;
	 float4  View_TemporalAAJitter;
	 float4  View_GlobalClippingPlane;
	 float2  View_FieldOfViewWideAngles;
	 float2  View_PrevFieldOfViewWideAngles;
	 float4  View_ViewRectMin;
	 float4  View_ViewSizeAndInvSize;
	 uint4  View_ViewRectMinAndSize;
	 float4  View_LightProbeSizeRatioAndInvSizeRatio;
	 float4  View_BufferSizeAndInvSize;
	 float4  View_BufferBilinearUVMinMax;
	 float4  View_ScreenToViewSpace;
	 float2  View_BufferToSceneTextureScale;
	 float2  View_ResolutionFractionAndInv;
	 int  View_NumSceneColorMSAASamples;
	 float  View_ProjectionDepthThicknessScale;
	 float  View_PreExposure;
	 float  View_OneOverPreExposure;
	 float4  View_DiffuseOverrideParameter;
	 float4  View_SpecularOverrideParameter;
	 float4  View_NormalOverrideParameter;
	 float2  View_RoughnessOverrideParameter;
	 float  View_PrevFrameGameTime;
	 float  View_PrevFrameRealTime;
	 float  View_OutOfBoundsMask;
	 float  PrePadding_View_2196;
	 float  PrePadding_View_2200;
	 float  PrePadding_View_2204;
	 float3  View_WorldCameraMovementSinceLastFrame;
	 float  View_CullingSign;
	 float  View_NearPlane;
	 float  View_GameTime;
	 float  View_RealTime;
	 float  View_DeltaTime;
	 float  View_MaterialTextureMipBias;
	 float  View_MaterialTextureDerivativeMultiply;
	 uint  View_Random;
	 uint  View_FrameNumber;
	 uint  View_FrameCounter;
	 uint  View_StateFrameIndexMod8;
	 uint  View_StateFrameIndex;
	 uint  View_DebugViewModeMask;
	 uint  View_WorldIsPaused;
	 float  View_CameraCut;
	 float  View_UnlitViewmodeMask;
	 float  PrePadding_View_2284;
	 float4  View_DirectionalLightColor;
	 float3  View_DirectionalLightDirection;
	 float  PrePadding_View_2316;
	 float4  View_TranslucencyLightingVolumeMin[2];
	 float4  View_TranslucencyLightingVolumeInvSize[2];
	 float4  View_TemporalAAParams;
	 float4  View_CircleDOFParams;
	 float  View_DepthOfFieldSensorWidth;
	 float  View_DepthOfFieldFocalDistance;
	 float  View_DepthOfFieldScale;
	 float  View_DepthOfFieldFocalLength;
	 float  View_DepthOfFieldFocalRegion;
	 float  View_DepthOfFieldNearTransitionRegion;
	 float  View_DepthOfFieldFarTransitionRegion;
	 float  View_MotionBlurNormalizedToPixel;
	 float  View_GeneralPurposeTweak;
	 float  View_GeneralPurposeTweak2;
	 float  View_DemosaicVposOffset;
	 float  View_DecalDepthBias;
	 float3  View_IndirectLightingColorScale;
	 float  PrePadding_View_2476;
	 float3  View_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_View_2492;
	 float3  View_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_View_2508;
	 float4  View_AtmosphereLightDirection[2];
	 float4  View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  View_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  View_AtmosphereLightDiscLuminance[2];
	 float4  View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  View_SkyViewLutSizeAndInvSize;
	 float3  View_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_View_2700;
	 float4  View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  View_SkyViewLutReferential;
	 float4  View_SkyAtmosphereSkyLuminanceFactor;
	 float  View_SkyAtmospherePresentInScene;
	 float  View_SkyAtmosphereHeightFogContribution;
	 float  View_SkyAtmosphereBottomRadiusKm;
	 float  View_SkyAtmosphereTopRadiusKm;
	 float4  View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_View_2856;
	 float  PrePadding_View_2860;
	 float3  View_NormalCurvatureToRoughnessScaleBias;
	 float  View_RenderingReflectionCaptureMask;
	 float  View_RealTimeReflectionCapture;
	 float  View_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_View_2888;
	 float  PrePadding_View_2892;
	 float4  View_AmbientCubemapTint;
	 float  View_AmbientCubemapIntensity;
	 float  View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  View_SkyLightAffectReflectionFlag;
	 float  View_SkyLightAffectGlobalIlluminationFlag;
	 float4  View_SkyLightColor;
	 float4  View_MobileSkyIrradianceEnvironmentMap[8];
	 float  View_MobilePreviewMode;
	 float  View_HMDEyePaddingOffset;
	 float  View_ReflectionCubemapMaxMip;
	 float  View_ShowDecalsMask;
	 uint  View_DistanceFieldAOSpecularOcclusionMode;
	 float  View_IndirectCapsuleSelfShadowingIntensity;
	 float  PrePadding_View_3096;
	 float  PrePadding_View_3100;
	 float3  View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  View_StereoPassIndex;
	 float4  View_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  View_GlobalDistanceFieldMipFactor;
	 float  View_GlobalDistanceFieldMipTransition;
	 int  View_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_View_3516;
	 float3  View_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_View_3532;
	 float3  View_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  View_GlobalVolumeDimension;
	 float  View_GlobalVolumeTexelSize;
	 float  View_MaxGlobalDFAOConeDistance;
	 uint  View_NumGlobalSDFClipmaps;
	 float  View_CoveredExpandSurfaceScale;
	 float  View_NotCoveredExpandSurfaceScale;
	 float  View_NotCoveredMinStepScale;
	 float  View_DitheredTransparencyStepThreshold;
	 float  View_DitheredTransparencyTraceThreshold;
	 int2  View_CursorPosition;
	 float  View_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_View_3596;
	 float3  View_VolumetricFogInvGridSize;
	 float  PrePadding_View_3612;
	 float3  View_VolumetricFogGridZParams;
	 float  PrePadding_View_3628;
	 float2  View_VolumetricFogSVPosToVolumeUV;
	 float2  View_VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  View_VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  View_VolumetricFogPrevUVMax;
	 float2  View_VolumetricFogScreenToResourceUV;
	 float2  View_VolumetricFogUVMax;
	 float  View_VolumetricFogMaxDistance;
	 float  PrePadding_View_3684;
	 float  PrePadding_View_3688;
	 float  PrePadding_View_3692;
	 float3  View_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_View_3708;
	 float3  View_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_View_3724;
	 float3  View_VolumetricLightmapIndirectionTextureSize;
	 float  View_VolumetricLightmapBrickSize;
	 float3  View_VolumetricLightmapBrickTexelSize;
	 float  View_IndirectLightingCacheShowFlag;
	 float  View_EyeToPixelSpreadAngle;
	 float  PrePadding_View_3764;
	 float  PrePadding_View_3768;
	 float  PrePadding_View_3772;
	 float4  View_XRPassthroughCameraUVs[2];
	 float  View_GlobalVirtualTextureMipBias;
	 uint  View_VirtualTextureFeedbackShift;
	 uint  View_VirtualTextureFeedbackMask;
	 uint  View_VirtualTextureFeedbackStride;
	 uint  View_VirtualTextureFeedbackJitterOffset;
	 uint  View_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_View_3832;
	 uint  PrePadding_View_3836;
	 float4  View_RuntimeVirtualTextureMipLevel;
	 float2  View_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_View_3864;
	 float  PrePadding_View_3868;
	 float4  View_RuntimeVirtualTextureDebugParams;
	 float  View_OverrideLandscapeLOD;
	 int  View_FarShadowStaticMeshLODBias;
	 float  View_MinRoughness;
	 float  PrePadding_View_3900;
	 float4  View_HairRenderInfo;
	 uint  View_EnableSkyLight;
	 uint  View_HairRenderInfoBits;
	 uint  View_HairComponents;
	 float  View_bSubsurfacePostprocessEnabled;
	 float4  View_SSProfilesTextureSizeAndInvSize;
	 float4  View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  View_SpecularProfileTextureSizeAndInvSize;
	 float3  View_PhysicsFieldClipmapCenter;
	 float  View_PhysicsFieldClipmapDistance;
	 int  View_PhysicsFieldClipmapResolution;
	 int  View_PhysicsFieldClipmapExponent;
	 int  View_PhysicsFieldClipmapCount;
	 int  View_PhysicsFieldTargetCount;
	 int4  View_PhysicsFieldTargets[32];
	 uint  View_GPUSceneViewId;
	 float  View_ViewResolutionFraction;
	 float  View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float  PrePadding_View_4540;
	 float4  View_TanAndInvTanHalfFOV;
	 float4  View_PrevTanAndInvTanHalfFOV;
	 float4  View_GlintLUTParameters0;
	 float4  View_GlintLUTParameters1;
	 uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint  PrePadding_View_4612;
	 uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint  PrePadding_View_4620;
	 uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	 uint  PrePadding_View_4628;
	 uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	 uint  PrePadding_View_4636;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint  PrePadding_View_4644;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint  PrePadding_View_4652;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint  PrePadding_View_4660;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint  PrePadding_View_4668;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint  PrePadding_View_4676;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint  PrePadding_View_4684;
	 uint BindlessResource_View_SkyBentNormalBrickTexture ;
	 uint  PrePadding_View_4692;
	 uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	 uint  PrePadding_View_4700;
	 uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint  PrePadding_View_4708;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint  PrePadding_View_4716;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint  PrePadding_View_4724;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint  PrePadding_View_4732;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint  PrePadding_View_4740;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint  PrePadding_View_4748;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint  PrePadding_View_4756;
	 uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint  PrePadding_View_4764;
	 uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint  PrePadding_View_4772;
	 uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint  PrePadding_View_4780;
	 uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint  PrePadding_View_4788;
	 uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	 uint  PrePadding_View_4796;
	 uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	 uint  PrePadding_View_4804;
	 uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint  PrePadding_View_4812;
	 uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint  PrePadding_View_4820;
	 uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler ;
	 uint  PrePadding_View_4828;
	 uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	 uint  PrePadding_View_4836;
	 uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint  PrePadding_View_4844;
	 uint BindlessResource_View_AtmosphereIrradianceTexture ;
	 uint  PrePadding_View_4852;
	 uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint  PrePadding_View_4860;
	 uint BindlessResource_View_AtmosphereInscatterTexture ;
	 uint  PrePadding_View_4868;
	 uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint  PrePadding_View_4876;
	 uint BindlessResource_View_PerlinNoiseGradientTexture ;
	 uint  PrePadding_View_4884;
	 uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint  PrePadding_View_4892;
	 uint BindlessResource_View_PerlinNoise3DTexture ;
	 uint  PrePadding_View_4900;
	 uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint  PrePadding_View_4908;
	 uint BindlessResource_View_SobolSamplingTexture ;
	 uint  PrePadding_View_4916;
	 uint BindlessSampler_View_SharedPointWrappedSampler ;
	 uint  PrePadding_View_4924;
	 uint BindlessSampler_View_SharedPointClampedSampler ;
	 uint  PrePadding_View_4932;
	 uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint  PrePadding_View_4940;
	 uint BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint  PrePadding_View_4948;
	 uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint  PrePadding_View_4956;
	 uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint  PrePadding_View_4964;
	 uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint  PrePadding_View_4972;
	 uint BindlessResource_View_PreIntegratedBRDF ;
	 uint  PrePadding_View_4980;
	 uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint  PrePadding_View_4988;
	 uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	 uint  PrePadding_View_4996;
	 uint BindlessResource_View_TransmittanceLutTexture ;
	 uint  PrePadding_View_5004;
	 uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint  PrePadding_View_5012;
	 uint BindlessResource_View_SkyViewLutTexture ;
	 uint  PrePadding_View_5020;
	 uint BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint  PrePadding_View_5028;
	 uint BindlessResource_View_DistantSkyLightLutTexture ;
	 uint  PrePadding_View_5036;
	 uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	 uint  PrePadding_View_5044;
	 uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	 uint  PrePadding_View_5052;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint  PrePadding_View_5060;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint  PrePadding_View_5068;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint  PrePadding_View_5076;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint  PrePadding_View_5084;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint  PrePadding_View_5092;
	 uint BindlessResource_View_HairScatteringLUTTexture ;
	 uint  PrePadding_View_5100;
	 uint BindlessSampler_View_HairScatteringLUTSampler ;
	 uint  PrePadding_View_5108;
	 uint BindlessResource_View_GGXLTCMatTexture ;
	 uint  PrePadding_View_5116;
	 uint BindlessSampler_View_GGXLTCMatSampler ;
	 uint  PrePadding_View_5124;
	 uint BindlessResource_View_GGXLTCAmpTexture ;
	 uint  PrePadding_View_5132;
	 uint BindlessSampler_View_GGXLTCAmpSampler ;
	 uint  PrePadding_View_5140;
	 uint BindlessResource_View_SheenLTCTexture ;
	 uint  PrePadding_View_5148;
	 uint BindlessSampler_View_SheenLTCSampler ;
	 uint  PrePadding_View_5156;
	 uint  View_bShadingEnergyConservation;
	 uint  View_bShadingEnergyPreservation;
	 uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	 uint  PrePadding_View_5172;
	 uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	 uint  PrePadding_View_5180;
	 uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	 uint  PrePadding_View_5188;
	 uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	 uint  PrePadding_View_5196;
	 uint BindlessSampler_View_ShadingEnergySampler ;
	 uint  PrePadding_View_5204;
	 uint BindlessResource_View_GlintTexture ;
	 uint  PrePadding_View_5212;
	 uint BindlessSampler_View_GlintSampler ;
	 uint  PrePadding_View_5220;
	 uint BindlessResource_View_SimpleVolumeTexture ;
	 uint  PrePadding_View_5228;
	 uint BindlessSampler_View_SimpleVolumeTextureSampler ;
	 uint  PrePadding_View_5236;
	 uint BindlessResource_View_SimpleVolumeEnvTexture ;
	 uint  PrePadding_View_5244;
	 uint BindlessSampler_View_SimpleVolumeEnvTextureSampler ;
	 uint  PrePadding_View_5252;
	 uint BindlessResource_View_SSProfilesTexture ;
	 uint  PrePadding_View_5260;
	 uint BindlessSampler_View_SSProfilesSampler ;
	 uint  PrePadding_View_5268;
	 uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint  PrePadding_View_5276;
	 uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	 uint  PrePadding_View_5284;
	 uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint  PrePadding_View_5292;
	 uint BindlessResource_View_SpecularProfileTexture ;
	 uint  PrePadding_View_5300;
	 uint BindlessSampler_View_SpecularProfileSampler ;
	 uint  PrePadding_View_5308;
	 uint BindlessResource_View_WaterIndirection ;
	 uint  PrePadding_View_5316;
	 uint BindlessResource_View_WaterData ;
	 uint  PrePadding_View_5324;
	 float4  View_RectLightAtlasSizeAndInvSize;
	 float  View_RectLightAtlasMaxMipLevel;
	 float  PrePadding_View_5348;
	 uint BindlessResource_View_RectLightAtlasTexture ;
	 uint  PrePadding_View_5356;
	 uint BindlessSampler_View_RectLightAtlasSampler ;
	 uint  PrePadding_View_5364;
	 uint  PrePadding_View_5368;
	 uint  PrePadding_View_5372;
	 float4  View_IESAtlasSizeAndInvSize;
	 uint BindlessResource_View_IESAtlasTexture ;
	 uint  PrePadding_View_5396;
	 uint BindlessSampler_View_IESAtlasSampler ;
	 uint  PrePadding_View_5404;
	 uint BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint  PrePadding_View_5412;
	 uint BindlessResource_View_LandscapeIndirection ;
	 uint  PrePadding_View_5420;
	 uint BindlessResource_View_LandscapePerComponentData ;
	 uint  PrePadding_View_5428;
	 uint BindlessResource_View_VTFeedbackBuffer ;
	 uint  PrePadding_View_5436;
	 uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	 uint  PrePadding_View_5444;
	 uint  PrePadding_View_5448;
	 uint  PrePadding_View_5452;
	 float3  View_TLASRelativePreViewTranslation;
	 float  PrePadding_View_5468;
	 float3  View_TLASViewTilePosition;
}

#line 480 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_MaterialTextureBilinearWrapedSampler;

#line 481 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_MaterialTextureBilinearClampedSampler;

#line 482 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<uint4>  View_VolumetricLightmapIndirectionTexture;

#line 483 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickAmbientVector;

#line 484 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients0;

#line 485 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients1;

#line 486 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients2;

#line 487 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients3;

#line 488 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients4;

#line 489 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients5;

#line 490 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_SkyBentNormalBrickTexture;

#line 491 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_DirectionalLightShadowingBrickTexture;

#line 492 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapBrickAmbientVectorSampler;

#line 493 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler0;

#line 494 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler1;

#line 495 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler2;

#line 496 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler3;

#line 497 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler4;

#line 498 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler5;

#line 499 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SkyBentNormalTextureSampler;

#line 500 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_DirectionalLightShadowingTextureSampler;

#line 501 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_GlobalDistanceFieldPageAtlasTexture;

#line 502 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_GlobalDistanceFieldCoverageAtlasTexture;

#line 503 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<uint>  View_GlobalDistanceFieldPageTableTexture;

#line 504 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_GlobalDistanceFieldMipTexture;

#line 505 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GlobalDistanceFieldPageAtlasTextureSampler;

#line 506 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GlobalDistanceFieldCoverageAtlasTextureSampler;

#line 507 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GlobalDistanceFieldMipTextureSampler;

#line 508 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_AtmosphereTransmittanceTexture;

#line 509 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_AtmosphereTransmittanceTextureSampler;

#line 510 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_AtmosphereIrradianceTexture;

#line 511 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_AtmosphereIrradianceTextureSampler;

#line 512 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_AtmosphereInscatterTexture;

#line 513 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_AtmosphereInscatterTextureSampler;

#line 514 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_PerlinNoiseGradientTexture;

#line 515 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PerlinNoiseGradientTextureSampler;

#line 516 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_PerlinNoise3DTexture;

#line 517 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PerlinNoise3DTextureSampler;

#line 518 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<uint>  View_SobolSamplingTexture;

#line 519 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedPointWrappedSampler;

#line 520 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedPointClampedSampler;

#line 521 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedBilinearWrappedSampler;

#line 522 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedBilinearClampedSampler;

#line 523 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedBilinearAnisoClampedSampler;

#line 524 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearWrappedSampler;

#line 525 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearClampedSampler;

#line 526 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_PreIntegratedBRDF;

#line 527 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PreIntegratedBRDFSampler;

#line 528 "/Engine/Generated/UniformBuffers/View.ush"
StructuredBuffer<float4>  View_SkyIrradianceEnvironmentMap;

#line 529 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_TransmittanceLutTexture;

#line 530 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_TransmittanceLutTextureSampler;

#line 531 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SkyViewLutTexture;

#line 532 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SkyViewLutTextureSampler;

#line 533 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_DistantSkyLightLutTexture;

#line 534 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_DistantSkyLightLutTextureSampler;

#line 535 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_CameraAerialPerspectiveVolume;

#line 536 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_CameraAerialPerspectiveVolumeSampler;

#line 537 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_CameraAerialPerspectiveVolumeMieOnly;

#line 538 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_CameraAerialPerspectiveVolumeMieOnlySampler;

#line 539 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_CameraAerialPerspectiveVolumeRayOnly;

#line 540 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_CameraAerialPerspectiveVolumeRayOnlySampler;

#line 541 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_HairScatteringLUTTexture;

#line 542 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_HairScatteringLUTSampler;

#line 543 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCMatTexture;

#line 544 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCMatSampler;

#line 545 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCAmpTexture;

#line 546 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCAmpSampler;

#line 547 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SheenLTCTexture;

#line 548 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SheenLTCSampler;

#line 549 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float2>  View_ShadingEnergyGGXSpecTexture;

#line 550 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float2>  View_ShadingEnergyGGXGlassTexture;

#line 551 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float2>  View_ShadingEnergyClothSpecTexture;

#line 552 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float>  View_ShadingEnergyDiffuseTexture;

#line 553 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_ShadingEnergySampler;

#line 554 "/Engine/Generated/UniformBuffers/View.ush"
Texture2DArray<float4>  View_GlintTexture;

#line 555 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GlintSampler;

#line 556 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float>  View_SimpleVolumeTexture;

#line 557 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SimpleVolumeTextureSampler;

#line 558 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float>  View_SimpleVolumeEnvTexture;

#line 559 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SimpleVolumeEnvTextureSampler;

#line 560 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SSProfilesTexture;

#line 561 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SSProfilesSampler;

#line 562 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SSProfilesTransmissionSampler;

#line 563 "/Engine/Generated/UniformBuffers/View.ush"
Texture2DArray  View_SSProfilesPreIntegratedTexture;

#line 564 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SSProfilesPreIntegratedSampler;

#line 565 "/Engine/Generated/UniformBuffers/View.ush"
Texture2DArray  View_SpecularProfileTexture;

#line 566 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SpecularProfileSampler;

#line 567 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<float4>  View_WaterIndirection;

#line 568 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<float4>  View_WaterData;

#line 569 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float4>  View_RectLightAtlasTexture;

#line 570 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_RectLightAtlasSampler;

#line 571 "/Engine/Generated/UniformBuffers/View.ush"
Texture2DArray<float>  View_IESAtlasTexture;

#line 572 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_IESAtlasSampler;

#line 573 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_LandscapeWeightmapSampler;

#line 574 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<uint>  View_LandscapeIndirection;

#line 575 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<float>  View_LandscapePerComponentData;

#line 576 "/Engine/Generated/UniformBuffers/View.ush"
RWStructuredBuffer<uint>  View_VTFeedbackBuffer;

#line 577 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<float>  View_PhysicsFieldClipmapBuffer;

#line 578 "/Engine/Generated/UniformBuffers/View.ush"
static const struct
{
	 float4x4  TranslatedWorldToClip;
	 float4x4  RelativeWorldToClip;
	 float4x4  ClipToRelativeWorld;
	 float4x4  TranslatedWorldToView;
	 float4x4  ViewToTranslatedWorld;
	 float4x4  TranslatedWorldToCameraView;
	 float4x4  CameraViewToTranslatedWorld;
	 float4x4  ViewToClip;
	 float4x4  ViewToClipNoAA;
	 float4x4  ClipToView;
	 float4x4  ClipToTranslatedWorld;
	 float4x4  SVPositionToTranslatedWorld;
	 float4x4  ScreenToRelativeWorld;
	 float4x4  ScreenToTranslatedWorld;
	 float4x4  MobileMultiviewShadowTransform;
	 float3  ViewTilePosition;
	 float3  MatrixTilePosition;
	 float3  ViewForward;
	 float3  ViewUp;
	 float3  ViewRight;
	 float3  HMDViewNoRollUp;
	 float3  HMDViewNoRollRight;
	 float4  InvDeviceZToWorldZTransform;
	 float4  ScreenPositionScaleBias;
	 float3  RelativeWorldCameraOrigin;
	 float3  TranslatedWorldCameraOrigin;
	 float3  RelativeWorldViewOrigin;
	 float3  RelativePreViewTranslation;
	 float4x4  PrevViewToClip;
	 float4x4  PrevClipToView;
	 float4x4  PrevTranslatedWorldToClip;
	 float4x4  PrevTranslatedWorldToView;
	 float4x4  PrevViewToTranslatedWorld;
	 float4x4  PrevTranslatedWorldToCameraView;
	 float4x4  PrevCameraViewToTranslatedWorld;
	 float3  PrevTranslatedWorldCameraOrigin;
	 float3  PrevRelativeWorldCameraOrigin;
	 float3  PrevRelativeWorldViewOrigin;
	 float3  RelativePrevPreViewTranslation;
	 float4x4  PrevClipToRelativeWorld;
	 float4x4  PrevScreenToTranslatedWorld;
	 float4x4  ClipToPrevClip;
	 float4x4  ClipToPrevClipWithAA;
	 float4  TemporalAAJitter;
	 float4  GlobalClippingPlane;
	 float2  FieldOfViewWideAngles;
	 float2  PrevFieldOfViewWideAngles;
	 float4  ViewRectMin;
	 float4  ViewSizeAndInvSize;
	 uint4  ViewRectMinAndSize;
	 float4  LightProbeSizeRatioAndInvSizeRatio;
	 float4  BufferSizeAndInvSize;
	 float4  BufferBilinearUVMinMax;
	 float4  ScreenToViewSpace;
	 float2  BufferToSceneTextureScale;
	 float2  ResolutionFractionAndInv;
	 int  NumSceneColorMSAASamples;
	 float  ProjectionDepthThicknessScale;
	 float  PreExposure;
	 float  OneOverPreExposure;
	 float4  DiffuseOverrideParameter;
	 float4  SpecularOverrideParameter;
	 float4  NormalOverrideParameter;
	 float2  RoughnessOverrideParameter;
	 float  PrevFrameGameTime;
	 float  PrevFrameRealTime;
	 float  OutOfBoundsMask;
	 float3  WorldCameraMovementSinceLastFrame;
	 float  CullingSign;
	 float  NearPlane;
	 float  GameTime;
	 float  RealTime;
	 float  DeltaTime;
	 float  MaterialTextureMipBias;
	 float  MaterialTextureDerivativeMultiply;
	 uint  Random;
	 uint  FrameNumber;
	 uint  FrameCounter;
	 uint  StateFrameIndexMod8;
	 uint  StateFrameIndex;
	 uint  DebugViewModeMask;
	 uint  WorldIsPaused;
	 float  CameraCut;
	 float  UnlitViewmodeMask;
	 float4  DirectionalLightColor;
	 float3  DirectionalLightDirection;
	 float4  TranslucencyLightingVolumeMin[2];
	 float4  TranslucencyLightingVolumeInvSize[2];
	 float4  TemporalAAParams;
	 float4  CircleDOFParams;
	 float  DepthOfFieldSensorWidth;
	 float  DepthOfFieldFocalDistance;
	 float  DepthOfFieldScale;
	 float  DepthOfFieldFocalLength;
	 float  DepthOfFieldFocalRegion;
	 float  DepthOfFieldNearTransitionRegion;
	 float  DepthOfFieldFarTransitionRegion;
	 float  MotionBlurNormalizedToPixel;
	 float  GeneralPurposeTweak;
	 float  GeneralPurposeTweak2;
	 float  DemosaicVposOffset;
	 float  DecalDepthBias;
	 float3  IndirectLightingColorScale;
	 float3  PrecomputedIndirectLightingColorScale;
	 float3  PrecomputedIndirectSpecularColorScale;
	 float4  AtmosphereLightDirection[2];
	 float4  AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  AtmosphereLightIlluminanceOuterSpace[2];
	 float4  AtmosphereLightDiscLuminance[2];
	 float4  AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  SkyViewLutSizeAndInvSize;
	 float3  SkyCameraTranslatedWorldOrigin;
	 float4  SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  SkyViewLutReferential;
	 float4  SkyAtmosphereSkyLuminanceFactor;
	 float  SkyAtmospherePresentInScene;
	 float  SkyAtmosphereHeightFogContribution;
	 float  SkyAtmosphereBottomRadiusKm;
	 float  SkyAtmosphereTopRadiusKm;
	 float4  SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float3  NormalCurvatureToRoughnessScaleBias;
	 float  RenderingReflectionCaptureMask;
	 float  RealTimeReflectionCapture;
	 float  RealTimeReflectionCapturePreExposure;
	 float4  AmbientCubemapTint;
	 float  AmbientCubemapIntensity;
	 float  SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  SkyLightAffectReflectionFlag;
	 float  SkyLightAffectGlobalIlluminationFlag;
	 float4  SkyLightColor;
	 float4  MobileSkyIrradianceEnvironmentMap[8];
	 float  MobilePreviewMode;
	 float  HMDEyePaddingOffset;
	 float  ReflectionCubemapMaxMip;
	 float  ShowDecalsMask;
	 uint  DistanceFieldAOSpecularOcclusionMode;
	 float  IndirectCapsuleSelfShadowingIntensity;
	 float3  ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  StereoPassIndex;
	 float4  GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  GlobalDistanceFieldMipFactor;
	 float  GlobalDistanceFieldMipTransition;
	 int  GlobalDistanceFieldClipmapSizeInPages;
	 float3  GlobalDistanceFieldInvPageAtlasSize;
	 float3  GlobalDistanceFieldInvCoverageAtlasSize;
	 float  GlobalVolumeDimension;
	 float  GlobalVolumeTexelSize;
	 float  MaxGlobalDFAOConeDistance;
	 uint  NumGlobalSDFClipmaps;
	 float  CoveredExpandSurfaceScale;
	 float  NotCoveredExpandSurfaceScale;
	 float  NotCoveredMinStepScale;
	 float  DitheredTransparencyStepThreshold;
	 float  DitheredTransparencyTraceThreshold;
	 int2  CursorPosition;
	 float  bCheckerboardSubsurfaceProfileRendering;
	 float3  VolumetricFogInvGridSize;
	 float3  VolumetricFogGridZParams;
	 float2  VolumetricFogSVPosToVolumeUV;
	 float2  VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  VolumetricFogPrevUVMax;
	 float2  VolumetricFogScreenToResourceUV;
	 float2  VolumetricFogUVMax;
	 float  VolumetricFogMaxDistance;
	 float3  VolumetricLightmapWorldToUVScale;
	 float3  VolumetricLightmapWorldToUVAdd;
	 float3  VolumetricLightmapIndirectionTextureSize;
	 float  VolumetricLightmapBrickSize;
	 float3  VolumetricLightmapBrickTexelSize;
	 float  IndirectLightingCacheShowFlag;
	 float  EyeToPixelSpreadAngle;
	 float4  XRPassthroughCameraUVs[2];
	 float  GlobalVirtualTextureMipBias;
	 uint  VirtualTextureFeedbackShift;
	 uint  VirtualTextureFeedbackMask;
	 uint  VirtualTextureFeedbackStride;
	 uint  VirtualTextureFeedbackJitterOffset;
	 uint  VirtualTextureFeedbackSampleOffset;
	 float4  RuntimeVirtualTextureMipLevel;
	 float2  RuntimeVirtualTexturePackHeight;
	 float4  RuntimeVirtualTextureDebugParams;
	 float  OverrideLandscapeLOD;
	 int  FarShadowStaticMeshLODBias;
	 float  MinRoughness;
	 float4  HairRenderInfo;
	 uint  EnableSkyLight;
	 uint  HairRenderInfoBits;
	 uint  HairComponents;
	 float  bSubsurfacePostprocessEnabled;
	 float4  SSProfilesTextureSizeAndInvSize;
	 float4  SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  SpecularProfileTextureSizeAndInvSize;
	 float3  PhysicsFieldClipmapCenter;
	 float  PhysicsFieldClipmapDistance;
	 int  PhysicsFieldClipmapResolution;
	 int  PhysicsFieldClipmapExponent;
	 int  PhysicsFieldClipmapCount;
	 int  PhysicsFieldTargetCount;
	 int4  PhysicsFieldTargets[32];
	 uint  GPUSceneViewId;
	 float  ViewResolutionFraction;
	 float  SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float4  TanAndInvTanHalfFOV;
	 float4  PrevTanAndInvTanHalfFOV;
	 float4  GlintLUTParameters0;
	 float4  GlintLUTParameters1;
	 uint  bShadingEnergyConservation;
	 uint  bShadingEnergyPreservation;
	 float4  RectLightAtlasSizeAndInvSize;
	 float  RectLightAtlasMaxMipLevel;
	 float4  IESAtlasSizeAndInvSize;
	 float3  TLASRelativePreViewTranslation;
	 float3  TLASViewTilePosition;
	SamplerState MaterialTextureBilinearWrapedSampler;
	SamplerState MaterialTextureBilinearClampedSampler;
	Texture3D<uint4> VolumetricLightmapIndirectionTexture;
	Texture3D VolumetricLightmapBrickAmbientVector;
	Texture3D VolumetricLightmapBrickSHCoefficients0;
	Texture3D VolumetricLightmapBrickSHCoefficients1;
	Texture3D VolumetricLightmapBrickSHCoefficients2;
	Texture3D VolumetricLightmapBrickSHCoefficients3;
	Texture3D VolumetricLightmapBrickSHCoefficients4;
	Texture3D VolumetricLightmapBrickSHCoefficients5;
	Texture3D SkyBentNormalBrickTexture;
	Texture3D DirectionalLightShadowingBrickTexture;
	SamplerState VolumetricLightmapBrickAmbientVectorSampler;
	SamplerState VolumetricLightmapTextureSampler0;
	SamplerState VolumetricLightmapTextureSampler1;
	SamplerState VolumetricLightmapTextureSampler2;
	SamplerState VolumetricLightmapTextureSampler3;
	SamplerState VolumetricLightmapTextureSampler4;
	SamplerState VolumetricLightmapTextureSampler5;
	SamplerState SkyBentNormalTextureSampler;
	SamplerState DirectionalLightShadowingTextureSampler;
	Texture3D GlobalDistanceFieldPageAtlasTexture;
	Texture3D GlobalDistanceFieldCoverageAtlasTexture;
	Texture3D<uint> GlobalDistanceFieldPageTableTexture;
	Texture3D GlobalDistanceFieldMipTexture;
	SamplerState GlobalDistanceFieldPageAtlasTextureSampler;
	SamplerState GlobalDistanceFieldCoverageAtlasTextureSampler;
	SamplerState GlobalDistanceFieldMipTextureSampler;
	Texture2D AtmosphereTransmittanceTexture;
	SamplerState AtmosphereTransmittanceTextureSampler;
	Texture2D AtmosphereIrradianceTexture;
	SamplerState AtmosphereIrradianceTextureSampler;
	Texture3D AtmosphereInscatterTexture;
	SamplerState AtmosphereInscatterTextureSampler;
	Texture2D PerlinNoiseGradientTexture;
	SamplerState PerlinNoiseGradientTextureSampler;
	Texture3D PerlinNoise3DTexture;
	SamplerState PerlinNoise3DTextureSampler;
	Texture2D<uint> SobolSamplingTexture;
	SamplerState SharedPointWrappedSampler;
	SamplerState SharedPointClampedSampler;
	SamplerState SharedBilinearWrappedSampler;
	SamplerState SharedBilinearClampedSampler;
	SamplerState SharedBilinearAnisoClampedSampler;
	SamplerState SharedTrilinearWrappedSampler;
	SamplerState SharedTrilinearClampedSampler;
	Texture2D PreIntegratedBRDF;
	SamplerState PreIntegratedBRDFSampler;
	StructuredBuffer<float4> SkyIrradianceEnvironmentMap;
	Texture2D TransmittanceLutTexture;
	SamplerState TransmittanceLutTextureSampler;
	Texture2D SkyViewLutTexture;
	SamplerState SkyViewLutTextureSampler;
	Texture2D DistantSkyLightLutTexture;
	SamplerState DistantSkyLightLutTextureSampler;
	Texture3D CameraAerialPerspectiveVolume;
	SamplerState CameraAerialPerspectiveVolumeSampler;
	Texture3D CameraAerialPerspectiveVolumeMieOnly;
	SamplerState CameraAerialPerspectiveVolumeMieOnlySampler;
	Texture3D CameraAerialPerspectiveVolumeRayOnly;
	SamplerState CameraAerialPerspectiveVolumeRayOnlySampler;
	Texture3D HairScatteringLUTTexture;
	SamplerState HairScatteringLUTSampler;
	Texture2D GGXLTCMatTexture;
	SamplerState GGXLTCMatSampler;
	Texture2D GGXLTCAmpTexture;
	SamplerState GGXLTCAmpSampler;
	Texture2D SheenLTCTexture;
	SamplerState SheenLTCSampler;
	Texture2D<float2> ShadingEnergyGGXSpecTexture;
	Texture3D<float2> ShadingEnergyGGXGlassTexture;
	Texture2D<float2> ShadingEnergyClothSpecTexture;
	Texture2D<float> ShadingEnergyDiffuseTexture;
	SamplerState ShadingEnergySampler;
	Texture2DArray<float4> GlintTexture;
	SamplerState GlintSampler;
	Texture3D<float> SimpleVolumeTexture;
	SamplerState SimpleVolumeTextureSampler;
	Texture3D<float> SimpleVolumeEnvTexture;
	SamplerState SimpleVolumeEnvTextureSampler;
	Texture2D SSProfilesTexture;
	SamplerState SSProfilesSampler;
	SamplerState SSProfilesTransmissionSampler;
	Texture2DArray SSProfilesPreIntegratedTexture;
	SamplerState SSProfilesPreIntegratedSampler;
	Texture2DArray SpecularProfileTexture;
	SamplerState SpecularProfileSampler;
	Buffer<float4> WaterIndirection;
	Buffer<float4> WaterData;
	Texture2D<float4> RectLightAtlasTexture;
	SamplerState RectLightAtlasSampler;
	Texture2DArray<float> IESAtlasTexture;
	SamplerState IESAtlasSampler;
	SamplerState LandscapeWeightmapSampler;
	Buffer<uint> LandscapeIndirection;
	Buffer<float> LandscapePerComponentData;
	RWStructuredBuffer<uint> VTFeedbackBuffer;
	Buffer<float> PhysicsFieldClipmapBuffer;
} View = {View_TranslatedWorldToClip,View_RelativeWorldToClip,View_ClipToRelativeWorld,View_TranslatedWorldToView,View_ViewToTranslatedWorld,View_TranslatedWorldToCameraView,View_CameraViewToTranslatedWorld,View_ViewToClip,View_ViewToClipNoAA,View_ClipToView,View_ClipToTranslatedWorld,View_SVPositionToTranslatedWorld,View_ScreenToRelativeWorld,View_ScreenToTranslatedWorld,View_MobileMultiviewShadowTransform,View_ViewTilePosition,View_MatrixTilePosition,View_ViewForward,View_ViewUp,View_ViewRight,View_HMDViewNoRollUp,View_HMDViewNoRollRight,View_InvDeviceZToWorldZTransform,View_ScreenPositionScaleBias,View_RelativeWorldCameraOrigin,View_TranslatedWorldCameraOrigin,View_RelativeWorldViewOrigin,View_RelativePreViewTranslation,View_PrevViewToClip,View_PrevClipToView,View_PrevTranslatedWorldToClip,View_PrevTranslatedWorldToView,View_PrevViewToTranslatedWorld,View_PrevTranslatedWorldToCameraView,View_PrevCameraViewToTranslatedWorld,View_PrevTranslatedWorldCameraOrigin,View_PrevRelativeWorldCameraOrigin,View_PrevRelativeWorldViewOrigin,View_RelativePrevPreViewTranslation,View_PrevClipToRelativeWorld,View_PrevScreenToTranslatedWorld,View_ClipToPrevClip,View_ClipToPrevClipWithAA,View_TemporalAAJitter,View_GlobalClippingPlane,View_FieldOfViewWideAngles,View_PrevFieldOfViewWideAngles,View_ViewRectMin,View_ViewSizeAndInvSize,View_ViewRectMinAndSize,View_LightProbeSizeRatioAndInvSizeRatio,View_BufferSizeAndInvSize,View_BufferBilinearUVMinMax,View_ScreenToViewSpace,View_BufferToSceneTextureScale,View_ResolutionFractionAndInv,View_NumSceneColorMSAASamples,View_ProjectionDepthThicknessScale,View_PreExposure,View_OneOverPreExposure,View_DiffuseOverrideParameter,View_SpecularOverrideParameter,View_NormalOverrideParameter,View_RoughnessOverrideParameter,View_PrevFrameGameTime,View_PrevFrameRealTime,View_OutOfBoundsMask,View_WorldCameraMovementSinceLastFrame,View_CullingSign,View_NearPlane,View_GameTime,View_RealTime,View_DeltaTime,View_MaterialTextureMipBias,View_MaterialTextureDerivativeMultiply,View_Random,View_FrameNumber,View_FrameCounter,View_StateFrameIndexMod8,View_StateFrameIndex,View_DebugViewModeMask,View_WorldIsPaused,View_CameraCut,View_UnlitViewmodeMask,View_DirectionalLightColor,View_DirectionalLightDirection,View_TranslucencyLightingVolumeMin,View_TranslucencyLightingVolumeInvSize,View_TemporalAAParams,View_CircleDOFParams,View_DepthOfFieldSensorWidth,View_DepthOfFieldFocalDistance,View_DepthOfFieldScale,View_DepthOfFieldFocalLength,View_DepthOfFieldFocalRegion,View_DepthOfFieldNearTransitionRegion,View_DepthOfFieldFarTransitionRegion,View_MotionBlurNormalizedToPixel,View_GeneralPurposeTweak,View_GeneralPurposeTweak2,View_DemosaicVposOffset,View_DecalDepthBias,View_IndirectLightingColorScale,View_PrecomputedIndirectLightingColorScale,View_PrecomputedIndirectSpecularColorScale,View_AtmosphereLightDirection,View_AtmosphereLightIlluminanceOnGroundPostTransmittance,View_AtmosphereLightIlluminanceOuterSpace,View_AtmosphereLightDiscLuminance,View_AtmosphereLightDiscCosHalfApexAngle_PPTrans,View_SkyViewLutSizeAndInvSize,View_SkyCameraTranslatedWorldOrigin,View_SkyPlanetTranslatedWorldCenterAndViewHeight,View_SkyViewLutReferential,View_SkyAtmosphereSkyLuminanceFactor,View_SkyAtmospherePresentInScene,View_SkyAtmosphereHeightFogContribution,View_SkyAtmosphereBottomRadiusKm,View_SkyAtmosphereTopRadiusKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,View_SkyAtmosphereAerialPerspectiveStartDepthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,View_SkyAtmosphereApplyCameraAerialPerspectiveVolume,View_NormalCurvatureToRoughnessScaleBias,View_RenderingReflectionCaptureMask,View_RealTimeReflectionCapture,View_RealTimeReflectionCapturePreExposure,View_AmbientCubemapTint,View_AmbientCubemapIntensity,View_SkyLightApplyPrecomputedBentNormalShadowingFlag,View_SkyLightAffectReflectionFlag,View_SkyLightAffectGlobalIlluminationFlag,View_SkyLightColor,View_MobileSkyIrradianceEnvironmentMap,View_MobilePreviewMode,View_HMDEyePaddingOffset,View_ReflectionCubemapMaxMip,View_ShowDecalsMask,View_DistanceFieldAOSpecularOcclusionMode,View_IndirectCapsuleSelfShadowingIntensity,View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,View_StereoPassIndex,View_GlobalVolumeTranslatedCenterAndExtent,View_GlobalVolumeTranslatedWorldToUVAddAndMul,View_GlobalDistanceFieldMipTranslatedWorldToUVScale,View_GlobalDistanceFieldMipTranslatedWorldToUVBias,View_GlobalDistanceFieldMipFactor,View_GlobalDistanceFieldMipTransition,View_GlobalDistanceFieldClipmapSizeInPages,View_GlobalDistanceFieldInvPageAtlasSize,View_GlobalDistanceFieldInvCoverageAtlasSize,View_GlobalVolumeDimension,View_GlobalVolumeTexelSize,View_MaxGlobalDFAOConeDistance,View_NumGlobalSDFClipmaps,View_CoveredExpandSurfaceScale,View_NotCoveredExpandSurfaceScale,View_NotCoveredMinStepScale,View_DitheredTransparencyStepThreshold,View_DitheredTransparencyTraceThreshold,View_CursorPosition,View_bCheckerboardSubsurfaceProfileRendering,View_VolumetricFogInvGridSize,View_VolumetricFogGridZParams,View_VolumetricFogSVPosToVolumeUV,View_VolumetricFogViewGridUVToPrevViewRectUV,View_VolumetricFogPrevViewGridRectUVToResourceUV,View_VolumetricFogPrevUVMax,View_VolumetricFogScreenToResourceUV,View_VolumetricFogUVMax,View_VolumetricFogMaxDistance,View_VolumetricLightmapWorldToUVScale,View_VolumetricLightmapWorldToUVAdd,View_VolumetricLightmapIndirectionTextureSize,View_VolumetricLightmapBrickSize,View_VolumetricLightmapBrickTexelSize,View_IndirectLightingCacheShowFlag,View_EyeToPixelSpreadAngle,View_XRPassthroughCameraUVs,View_GlobalVirtualTextureMipBias,View_VirtualTextureFeedbackShift,View_VirtualTextureFeedbackMask,View_VirtualTextureFeedbackStride,View_VirtualTextureFeedbackJitterOffset,View_VirtualTextureFeedbackSampleOffset,View_RuntimeVirtualTextureMipLevel,View_RuntimeVirtualTexturePackHeight,View_RuntimeVirtualTextureDebugParams,View_OverrideLandscapeLOD,View_FarShadowStaticMeshLODBias,View_MinRoughness,View_HairRenderInfo,View_EnableSkyLight,View_HairRenderInfoBits,View_HairComponents,View_bSubsurfacePostprocessEnabled,View_SSProfilesTextureSizeAndInvSize,View_SSProfilesPreIntegratedTextureSizeAndInvSize,View_SpecularProfileTextureSizeAndInvSize,View_PhysicsFieldClipmapCenter,View_PhysicsFieldClipmapDistance,View_PhysicsFieldClipmapResolution,View_PhysicsFieldClipmapExponent,View_PhysicsFieldClipmapCount,View_PhysicsFieldTargetCount,View_PhysicsFieldTargets,View_GPUSceneViewId,View_ViewResolutionFraction,View_SubSurfaceColorAsTransmittanceAtDistanceInMeters,View_TanAndInvTanHalfFOV,View_PrevTanAndInvTanHalfFOV,View_GlintLUTParameters0,View_GlintLUTParameters1,View_bShadingEnergyConservation,View_bShadingEnergyPreservation,View_RectLightAtlasSizeAndInvSize,View_RectLightAtlasMaxMipLevel,View_IESAtlasSizeAndInvSize,View_TLASRelativePreViewTranslation,View_TLASViewTilePosition,View_MaterialTextureBilinearWrapedSampler,View_MaterialTextureBilinearClampedSampler,View_VolumetricLightmapIndirectionTexture,View_VolumetricLightmapBrickAmbientVector,View_VolumetricLightmapBrickSHCoefficients0,View_VolumetricLightmapBrickSHCoefficients1,View_VolumetricLightmapBrickSHCoefficients2,View_VolumetricLightmapBrickSHCoefficients3,View_VolumetricLightmapBrickSHCoefficients4,View_VolumetricLightmapBrickSHCoefficients5,View_SkyBentNormalBrickTexture,View_DirectionalLightShadowingBrickTexture,View_VolumetricLightmapBrickAmbientVectorSampler,View_VolumetricLightmapTextureSampler0,View_VolumetricLightmapTextureSampler1,View_VolumetricLightmapTextureSampler2,View_VolumetricLightmapTextureSampler3,View_VolumetricLightmapTextureSampler4,View_VolumetricLightmapTextureSampler5,View_SkyBentNormalTextureSampler,View_DirectionalLightShadowingTextureSampler,View_GlobalDistanceFieldPageAtlasTexture,View_GlobalDistanceFieldCoverageAtlasTexture,View_GlobalDistanceFieldPageTableTexture,View_GlobalDistanceFieldMipTexture,View_GlobalDistanceFieldPageAtlasTextureSampler,View_GlobalDistanceFieldCoverageAtlasTextureSampler,View_GlobalDistanceFieldMipTextureSampler,View_AtmosphereTransmittanceTexture,View_AtmosphereTransmittanceTextureSampler,View_AtmosphereIrradianceTexture,View_AtmosphereIrradianceTextureSampler,View_AtmosphereInscatterTexture,View_AtmosphereInscatterTextureSampler,View_PerlinNoiseGradientTexture,View_PerlinNoiseGradientTextureSampler,View_PerlinNoise3DTexture,View_PerlinNoise3DTextureSampler,View_SobolSamplingTexture,View_SharedPointWrappedSampler,View_SharedPointClampedSampler,View_SharedBilinearWrappedSampler,View_SharedBilinearClampedSampler,View_SharedBilinearAnisoClampedSampler,View_SharedTrilinearWrappedSampler,View_SharedTrilinearClampedSampler,View_PreIntegratedBRDF,View_PreIntegratedBRDFSampler,View_SkyIrradianceEnvironmentMap,View_TransmittanceLutTexture,View_TransmittanceLutTextureSampler,View_SkyViewLutTexture,View_SkyViewLutTextureSampler,View_DistantSkyLightLutTexture,View_DistantSkyLightLutTextureSampler,View_CameraAerialPerspectiveVolume,View_CameraAerialPerspectiveVolumeSampler,View_CameraAerialPerspectiveVolumeMieOnly,View_CameraAerialPerspectiveVolumeMieOnlySampler,View_CameraAerialPerspectiveVolumeRayOnly,View_CameraAerialPerspectiveVolumeRayOnlySampler,View_HairScatteringLUTTexture,View_HairScatteringLUTSampler,View_GGXLTCMatTexture,View_GGXLTCMatSampler,View_GGXLTCAmpTexture,View_GGXLTCAmpSampler,View_SheenLTCTexture,View_SheenLTCSampler,View_ShadingEnergyGGXSpecTexture,View_ShadingEnergyGGXGlassTexture,View_ShadingEnergyClothSpecTexture,View_ShadingEnergyDiffuseTexture,View_ShadingEnergySampler,View_GlintTexture,View_GlintSampler,View_SimpleVolumeTexture,View_SimpleVolumeTextureSampler,View_SimpleVolumeEnvTexture,View_SimpleVolumeEnvTextureSampler,View_SSProfilesTexture,View_SSProfilesSampler,View_SSProfilesTransmissionSampler,View_SSProfilesPreIntegratedTexture,View_SSProfilesPreIntegratedSampler,View_SpecularProfileTexture,View_SpecularProfileSampler,View_WaterIndirection,View_WaterData,View_RectLightAtlasTexture,View_RectLightAtlasSampler,View_IESAtlasTexture,View_IESAtlasSampler,View_LandscapeWeightmapSampler,View_LandscapeIndirection,View_LandscapePerComponentData,View_VTFeedbackBuffer,View_PhysicsFieldClipmapBuffer,};

#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};

#line 230 "/Engine/Generated/GeneratedInstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView);

#line 231 "/Engine/Generated/GeneratedInstancedStereo.ush"
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.RelativeWorldToClip = View.RelativeWorldToClip;
	Result.ClipToRelativeWorld = View.ClipToRelativeWorld;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View.MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View.ViewTilePosition;
	Result.MatrixTilePosition = View.MatrixTilePosition;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View.RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View.RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View.RelativePreViewTranslation;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View.PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View.PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View.PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View.RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View.ProjectionDepthThicknessScale;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.DeltaTime = View.DeltaTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.FrameCounter = View.FrameCounter;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.StateFrameIndex = View.StateFrameIndex;
	Result.DebugViewModeMask = View.DebugViewModeMask;
	Result.WorldIsPaused = View.WorldIsPaused;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.DecalDepthBias = View.DecalDepthBias;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View.SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View.GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View.GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View.GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View.GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View.VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View.VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View.VolumetricFogPrevUVMax;
	Result.VolumetricFogScreenToResourceUV = View.VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View.VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View.RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View.OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View.FarShadowStaticMeshLODBias;
	Result.MinRoughness = View.MinRoughness;
	Result.HairRenderInfo = View.HairRenderInfo;
	Result.EnableSkyLight = View.EnableSkyLight;
	Result.HairRenderInfoBits = View.HairRenderInfoBits;
	Result.HairComponents = View.HairComponents;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View.SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View.PhysicsFieldTargets;
	Result.GPUSceneViewId = View.GPUSceneViewId;
	Result.ViewResolutionFraction = View.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View.TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View.PrevTanAndInvTanHalfFOV;
	Result.GlintLUTParameters0 = View.GlintLUTParameters0;
	Result.GlintLUTParameters1 = View.GlintLUTParameters1;
	FinalizeViewState(Result);
	return Result;
}

#line 17 "/Engine/Private/InstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}

#line 34 "/Engine/Private/InstancedStereo.ush"
static ViewState ResolvedView = (ViewState)0.0f;

#line 600 "/Engine/Private/Common.ush"
float length2(float2 v)
{
	return dot(v, v);
}

#line 604 "/Engine/Private/Common.ush"
float length2(float3 v)
{
	return dot(v, v);
}

#line 608 "/Engine/Private/Common.ush"
float length2(float4 v)
{
	return dot(v, v);
}

#line 26 "/Engine/Private/Random.ush"
float InterleavedGradientNoise( float2 uv, float FrameId )
{
	
	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}

#line 924 "/Engine/Private/Common.ush"
float Pow2( float x )
{
	return x*x;
}

#line 929 "/Engine/Private/Common.ush"
float2 Pow2( float2 x )
{
	return x*x;
}

#line 934 "/Engine/Private/Common.ush"
float3 Pow2( float3 x )
{
	return x*x;
}

#line 939 "/Engine/Private/Common.ush"
float4 Pow2( float4 x )
{
	return x*x;
}

#line 1179 "/Engine/Private/Common.ush"
float ConvertFromDeviceZ(float DeviceZ)
{
	
	return DeviceZ * View.InvDeviceZToWorldZTransform[0] + View.InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);
}

#line 1187 "/Engine/Private/Common.ush"
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return asuint(ViewToClip._44);
}

#line 1193 "/Engine/Private/Common.ush"
bool IsOrthoProjection()
{
	return IsOrthoProjection(View.ViewToClip);
}

#line 1201 "/Engine/Private/Common.ush"
float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (IsOrthoProjection())
	{
		
		return SceneDepth * View.ViewToClip[2][2] + View.ViewToClip[3][2];
	}
	else
	{
		
		return 1.0f / ((SceneDepth + View.InvDeviceZToWorldZTransform[3]) * View.InvDeviceZToWorldZTransform[2]);
	}
}

#line 1747 "/Engine/Private/Common.ush"
float3 DecodeVelocityFromTexture(float4 InEncodedV)
{



	float4 EncodedV = InEncodedV;

	const float InvDiv = 1.0f / (0.499f * 0.5f);

	float3 V;
	V.xy = EncodedV.xy * InvDiv - 32767.0f / 65535.0f * InvDiv;

	
		V.z = asfloat((uint(round(EncodedV.z * 65535.0f)) << 16) | uint(round(EncodedV.w * 65535.0f)));
	



	
		V.xy = (V.xy * abs(V.xy)) * 0.5;
	

	return V;
}

#line 113 "/Engine/Private/ShadingCommon.ush"
float DielectricSpecularToF0(float Specular)
{
	return float(0.08f * Specular);
}

#line 146 "/Engine/Private/ShadingCommon.ush"
float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

#line 29 "/Engine/Private/DeferredShadingCommon.ush"
Texture2D SceneDepthTexture;

#line 31 "/Engine/Private/DeferredShadingCommon.ush"
Texture2D GBufferATexture;

#line 32 "/Engine/Private/DeferredShadingCommon.ush"
Texture2D GBufferBTexture;

#line 33 "/Engine/Private/DeferredShadingCommon.ush"
Texture2D GBufferCTexture;

#line 34 "/Engine/Private/DeferredShadingCommon.ush"
Texture2D GBufferDTexture;

#line 35 "/Engine/Private/DeferredShadingCommon.ush"
Texture2D GBufferETexture;

#line 36 "/Engine/Private/DeferredShadingCommon.ush"
Texture2D GBufferVelocityTexture;

#line 37 "/Engine/Private/DeferredShadingCommon.ush"
Texture2D GBufferFTexture;

#line 128 "/Engine/Private/DeferredShadingCommon.ush"
float3 DecodeNormal( float3 N )
{
	return N * 2 - 1;
	
}

#line 163 "/Engine/Private/DeferredShadingCommon.ush"
void DecodeNormal( inout float3 N, in uint Face )
{
	uint Axis = Face >> 1;
	
	float MaxAbs = 1.0 / sqrt(2.0);

	N.xy = N.xy * (2 * MaxAbs) - (1 * MaxAbs);
	N.z = sqrt( 1 - dot( N.xy, N.xy ) );

	N = Axis == 0 ? N.zxy : N;
	N = Axis == 1 ? N.xzy : N;
	N *= (Face & 1) ? -1 : 1;
}

#line 183 "/Engine/Private/DeferredShadingCommon.ush"
float3 DecodeBaseColor(float3 BaseColor)
{
	
	return BaseColor;
}

#line 214 "/Engine/Private/DeferredShadingCommon.ush"
float DecodeIndirectIrradiance(float IndirectIrradiance)
{
	
	float LogL = IndirectIrradiance;
	const float LogBlackPoint = 0.00390625;	
	return View.OneOverPreExposure * (exp2( LogL * 16 - 8 ) - LogBlackPoint);	
}

#line 286 "/Engine/Private/DeferredShadingCommon.ush"
uint DecodeShadingModelId(float InPackedChannel)
{
	return ((uint)round(InPackedChannel * (float)0xFF)) & 0xF;
}

#line 291 "/Engine/Private/DeferredShadingCommon.ush"
uint DecodeSelectiveOutputMask(float InPackedChannel)
{
	return ((uint)round(InPackedChannel * (float)0xFF)) & ~0xF;
}

#line 306 "/Engine/Private/DeferredShadingCommon.ush"
bool UseSubsurfaceProfile(int ShadingModel)
{
	return ShadingModel == 5 || ShadingModel == 9;
}

#line 311 "/Engine/Private/DeferredShadingCommon.ush"
bool HasCustomGBufferData(int ShadingModelID)
{
	return ShadingModelID == 2
		|| ShadingModelID == 3
		|| ShadingModelID == 4
		|| ShadingModelID == 5
		|| ShadingModelID == 6
		|| ShadingModelID == 7
		|| ShadingModelID == 8
		|| ShadingModelID == 9;
}

#line 323 "/Engine/Private/DeferredShadingCommon.ush"
bool HasAnisotropy(int SelectiveOutputMask)
{
	return (SelectiveOutputMask & (1 << 4)) != 0;
}

#line 329 "/Engine/Private/DeferredShadingCommon.ush"
struct FGBufferData
{
	
	float3 WorldNormal;
	
	float3 WorldTangent;
	
	float3 DiffuseColor;
	
	float3 SpecularColor;
	
	float3 BaseColor;
	
	float Metallic;
	
	float Specular;
	
	float4 CustomData;
	
	float GenericAO;
	
	float IndirectIrradiance;
	
	
	float4 PrecomputedShadowFactors;
	
	float Roughness;
	
	float Anisotropy;
	
	float GBufferAO;
	
	uint DiffuseIndirectSampleOcclusion;
	
	uint ShadingModelID;
	
	uint SelectiveOutputMask;
	
	float PerObjectGBufferData;
	
	float CustomDepth;
	
	uint CustomStencil;
	
	
	float Depth;
	
	float4 Velocity;

	
	float3 StoredBaseColor;
	
	float StoredSpecular;
	
	float StoredMetallic;

	
	float Curvature;
};

#line 407 "/Engine/Private/DeferredShadingCommon.ush"
bool CheckerFromPixelPos(uint2 PixelPos)
{
	
	
	uint TemporalAASampleIndex = uint(View.TemporalAAParams.x);


	return (PixelPos.x + PixelPos.y + TemporalAASampleIndex) % 2;



}

#line 423 "/Engine/Private/DeferredShadingCommon.ush"
bool CheckerFromSceneColorUV(float2 UVSceneColor)
{
	
	uint2 PixelPos = uint2(UVSceneColor * View.BufferSizeAndInvSize.xy);

	return CheckerFromPixelPos(PixelPos);
}

#line 20 "/Engine/Private/GBufferHelpers.ush"
float3 DecodeNormalHelper(float3 SrcNormal)
{
	return SrcNormal * 2.0f - 1.0f;
}

#line 349 "/Engine/Private/GBufferHelpers.ush"
void AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(inout float3 BaseColor, inout float3 SpecularColor, inout float Specular, bool bChecker)
{





	const bool bCheckerboardRequired = View.bSubsurfacePostprocessEnabled > 0 && View.bCheckerboardSubsurfaceProfileRendering > 0;
	BaseColor = View.bSubsurfacePostprocessEnabled ? float3(1, 1, 1) : BaseColor;

	if (bCheckerboardRequired)
	{
		

		
		BaseColor = bChecker;
		
		SpecularColor *= !bChecker;
		Specular *= !bChecker;
	}
}

#line 375 "/Engine/Private/GBufferHelpers.ush"
void GBufferPostDecode(inout FGBufferData Ret, bool bChecker, bool bGetNormalizedNormal)
{
	Ret.CustomData = HasCustomGBufferData(Ret.ShadingModelID) ? Ret.CustomData : float(0.0f);

	Ret.PrecomputedShadowFactors = !(Ret.SelectiveOutputMask & 0x2) ? Ret.PrecomputedShadowFactors : ((Ret.SelectiveOutputMask & 0x4) ? float(0.0f) : float(1.0f));
	Ret.Velocity = !(Ret.SelectiveOutputMask & 0x8) ? Ret.Velocity : float(0.0f);
	bool bHasAnisotropy = (Ret.SelectiveOutputMask & 0x1);

	Ret.StoredBaseColor = Ret.BaseColor;
	Ret.StoredMetallic = Ret.Metallic;
	Ret.StoredSpecular = Ret.Specular;






	Ret.GBufferAO = 1;
	Ret.DiffuseIndirectSampleOcclusion = 0x0;
	Ret.IndirectIrradiance = float(DecodeIndirectIrradiance(Ret.GenericAO.x));






	if(bGetNormalizedNormal)
	{
		Ret.WorldNormal = normalize(Ret.WorldNormal);
	}

	[flatten]
	if( Ret.ShadingModelID == 9 )
	{
		Ret.Metallic = 0.0;
	


	}
	
	
	{
		Ret.SpecularColor = ComputeF0(Ret.Specular, Ret.BaseColor, Ret.Metallic);
	
		if (UseSubsurfaceProfile(Ret.ShadingModelID))
		{
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(Ret.BaseColor, Ret.SpecularColor, Ret.Specular, bChecker);
		}
	
		Ret.DiffuseColor = Ret.BaseColor - Ret.BaseColor * Ret.Metallic;
	
		
		{
			
			Ret.DiffuseColor = Ret.DiffuseColor * View.DiffuseOverrideParameter.www + View.DiffuseOverrideParameter.xyz;
			Ret.SpecularColor = Ret.SpecularColor * View.SpecularOverrideParameter.w + View.SpecularOverrideParameter.xyz;
		}
		
	}
	
	if (bHasAnisotropy)
	{
		Ret.WorldTangent = float3(DecodeNormal(Ret.WorldTangent));
		Ret.Anisotropy = float(Ret.Anisotropy * 2.0f - 1.0f);
	
		if(bGetNormalizedNormal)
		{
			Ret.WorldTangent = normalize(Ret.WorldTangent);
		}
	}
	else
	{
		Ret.WorldTangent = 0;
		Ret.Anisotropy = 0;
	}

	
	
	Ret.SelectiveOutputMask = Ret.SelectiveOutputMask << 4;
}

#line 6 "/ShaderAutogen/PCD3D_SM6/AutogenShaderHeaders.ush"
float SampleDeviceZFromSceneTexturesTempCopy(float2 UV)
{
	return SceneDepthTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).r;
}

#line 61 "/ShaderAutogen/PCD3D_SM6/AutogenShaderHeaders.ush"
FGBufferData  DecodeGBufferDataDirect(float4 InMRT1,
	float4 InMRT2,
	float4 InMRT3,
	float4 InMRT4,
	float4 InMRT5,
		 
	float CustomNativeDepth,
	float4 AnisotropicData,
	uint CustomStencil,
	float SceneDepth,
	bool bGetNormalizedNormal,
	bool bChecker)
{
	FGBufferData Ret = (FGBufferData)0;
	float3 WorldNormal_Compressed = 0.0f;
	WorldNormal_Compressed.x = InMRT1.x;
	WorldNormal_Compressed.y = InMRT1.y;
	WorldNormal_Compressed.z = InMRT1.z;
	Ret.PerObjectGBufferData.x = InMRT1.w;
	Ret.Metallic.x = InMRT2.x;
	Ret.Specular.x = InMRT2.y;
	Ret.Roughness.x = InMRT2.z;
	Ret.ShadingModelID.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 0) & 0x0f) << 0);
	Ret.SelectiveOutputMask.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 4) & 0x0f) << 0);
	Ret.BaseColor.x = InMRT3.x;
	Ret.BaseColor.y = InMRT3.y;
	Ret.BaseColor.z = InMRT3.z;
	Ret.GenericAO.x = InMRT3.w;
	Ret.PrecomputedShadowFactors.x = InMRT5.x;
	Ret.PrecomputedShadowFactors.y = InMRT5.y;
	Ret.PrecomputedShadowFactors.z = InMRT5.z;
	Ret.PrecomputedShadowFactors.w = InMRT5.w;
	Ret.CustomData.x = InMRT4.x;
	Ret.CustomData.y = InMRT4.y;
	Ret.CustomData.z = InMRT4.z;
	Ret.CustomData.w = InMRT4.w;
	
	Ret.WorldNormal = DecodeNormalHelper(WorldNormal_Compressed);
	Ret.WorldTangent = AnisotropicData.xyz;
	Ret.Anisotropy = AnisotropicData.w;

	GBufferPostDecode(Ret,bChecker,bGetNormalizedNormal);

	Ret.CustomDepth = ConvertFromDeviceZ(CustomNativeDepth);
	Ret.CustomStencil = CustomStencil;
	Ret.Depth = SceneDepth;
	

	return Ret;
}

#line 179 "/ShaderAutogen/PCD3D_SM6/AutogenShaderHeaders.ush"
FGBufferData DecodeGBufferDataSceneTextures(float2 UV, bool bGetNormalizedNormal = true)
{
	uint CustomStencil = 0;
	float CustomNativeDepth = 0;
	float DeviceZ = SampleDeviceZFromSceneTexturesTempCopy(UV);
	float SceneDepth = ConvertFromDeviceZ(DeviceZ);
	float4 AnisotropicData = GBufferFTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;

	float4 InMRT1 = GBufferATexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;
	float4 InMRT2 = GBufferBTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;
	float4 InMRT3 = GBufferCTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;
	float4 InMRT4 = GBufferDTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;
	float4 InMRT5 = GBufferETexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;

	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		InMRT5,
		 
		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromSceneColorUV(UV));

	return Ret;
}

#line 895 "/Engine/Private/DeferredShadingCommon.ush"
bool AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(inout float3 BaseColor, inout float Specular, bool bChecker)
{





	const bool bCheckerboardRequired = View.bSubsurfacePostprocessEnabled > 0 && View.bCheckerboardSubsurfaceProfileRendering > 0;
	BaseColor = View.bSubsurfacePostprocessEnabled ? float3(1, 1, 1) : BaseColor;

	if (bCheckerboardRequired)
	{
		
		
		BaseColor = bChecker;
		Specular *= !bChecker;
	}
	return bCheckerboardRequired;
}

#line 914 "/Engine/Private/DeferredShadingCommon.ush"
void AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(inout float3 BaseColor, inout float3 SpecularColor, inout float Specular, bool bChecker)
{
	const bool bCheckerboardRequired = AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(BaseColor, Specular, bChecker);
	if (bCheckerboardRequired)
	{
		
		SpecularColor *= !bChecker;
	}
}

#line 926 "/Engine/Private/DeferredShadingCommon.ush"
FGBufferData DecodeGBufferData(
	float4 InGBufferA,
	float4 InGBufferB,
	float4 InGBufferC,
	float4 InGBufferD,
	float4 InGBufferE,
	float4 InGBufferF,
	float4 InGBufferVelocity,
	float CustomNativeDepth,
	uint CustomStencil,
	float SceneDepth,
	bool bGetNormalizedNormal,
	bool bChecker)
{
	FGBufferData GBuffer;

	GBuffer.WorldNormal = DecodeNormal( InGBufferA.xyz );
	if(bGetNormalizedNormal)
	{
		GBuffer.WorldNormal = normalize(GBuffer.WorldNormal);
	}

	GBuffer.PerObjectGBufferData = InGBufferA.a;  
	GBuffer.Metallic	= InGBufferB.r;
	GBuffer.Specular	= InGBufferB.g;
	GBuffer.Roughness	= InGBufferB.b;
	
	
	
	GBuffer.ShadingModelID = DecodeShadingModelId(InGBufferB.a);
	GBuffer.SelectiveOutputMask = DecodeSelectiveOutputMask(InGBufferB.a);

	GBuffer.BaseColor = DecodeBaseColor(InGBufferC.rgb);






	GBuffer.GBufferAO = 1;
	GBuffer.DiffuseIndirectSampleOcclusion = 0x0;
	GBuffer.IndirectIrradiance = DecodeIndirectIrradiance(InGBufferC.a);






	GBuffer.CustomData = HasCustomGBufferData(GBuffer.ShadingModelID) ? InGBufferD : 0;

	GBuffer.PrecomputedShadowFactors = !(GBuffer.SelectiveOutputMask & (1 << 5)) ? InGBufferE :  ((GBuffer.SelectiveOutputMask & (1 << 6)) ? 0 :  1);
	GBuffer.CustomDepth = ConvertFromDeviceZ(CustomNativeDepth);
	GBuffer.CustomStencil = CustomStencil;
	GBuffer.Depth = SceneDepth;

	GBuffer.StoredBaseColor = GBuffer.BaseColor;
	GBuffer.StoredMetallic = GBuffer.Metallic;
	GBuffer.StoredSpecular = GBuffer.Specular;

	[flatten]
	if( GBuffer.ShadingModelID == 9 )
	{
		GBuffer.Metallic = 0.0;



	}

	
	{
		GBuffer.SpecularColor = ComputeF0(GBuffer.Specular, GBuffer.BaseColor, GBuffer.Metallic);

		if (UseSubsurfaceProfile(GBuffer.ShadingModelID))
		{
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(GBuffer.BaseColor, GBuffer.SpecularColor, GBuffer.Specular, bChecker);
		}

		GBuffer.DiffuseColor = GBuffer.BaseColor - GBuffer.BaseColor * GBuffer.Metallic;

		
		{
			
			GBuffer.DiffuseColor = GBuffer.DiffuseColor * View.DiffuseOverrideParameter.www + View.DiffuseOverrideParameter.xyz;
			GBuffer.SpecularColor = GBuffer.SpecularColor * View.SpecularOverrideParameter.w + View.SpecularOverrideParameter.xyz;
		}
		
	}

	{
		bool bHasAnisoProp = HasAnisotropy(GBuffer.SelectiveOutputMask);

		GBuffer.WorldTangent = bHasAnisoProp ? DecodeNormal(InGBufferF.rgb) : 0;
		GBuffer.Anisotropy   = bHasAnisoProp ? InGBufferF.a * 2.0f - 1.0f   : 0;

		if (bGetNormalizedNormal && bHasAnisoProp)
		{
			GBuffer.WorldTangent = normalize(GBuffer.WorldTangent);
		}
	}

	GBuffer.Velocity = !(GBuffer.SelectiveOutputMask & (1 << 7)) ? InGBufferVelocity : 0;

	return GBuffer;
}

#line 1098 "/Engine/Private/DeferredShadingCommon.ush"
FGBufferData GetGBufferDataFromSceneTextures(float2 UV, bool bGetNormalizedNormal = true)
{

	return DecodeGBufferDataSceneTextures(UV,bGetNormalizedNormal);
#line 1119 "/Engine/Private/DeferredShadingCommon.ush"

}

#line 177 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_YCoCg(float3 RGB)
{
	float Y = dot(RGB, float3(1, 2, 1));
	float Co = dot(RGB, float3(2, 0, -2));
	float Cg = dot(RGB, float3(-1, 2, -1));

	float3 YCoCg = float3(Y, Co, Cg);
	return YCoCg;
}

#line 187 "/Engine/Private/ColorSpace.ush"
float3 YCoCg_2_LinearRGB(float3 YCoCg)
{
	float Y = YCoCg.x * 0.25;
	float Co = YCoCg.y * 0.25;
	float Cg = YCoCg.z * 0.25;

	float R = Y + Co - Cg;
	float G = Y + Cg;
	float B = Y - Co - Cg;

	float3 RGB = float3(R, G, B);
	return RGB;
}

#line 201 "/Engine/Private/ColorSpace.ush"
float3 YCoCg_2_LCoCg(float3 YCoCg)
{
	return float3(
		YCoCg.x,
		YCoCg.yz * (YCoCg.x > 0 ? rcp(YCoCg.x) : 0));
}

#line 208 "/Engine/Private/ColorSpace.ush"
float3 LCoCg_2_YCoCg(float3 LCoCg)
{
	return float3(LCoCg.x, LCoCg.x * LCoCg.yz);
}

#line 213 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_LCoCg(float3 RGB)
{
	return YCoCg_2_LCoCg(LinearRGB_2_YCoCg(RGB));
}

#line 218 "/Engine/Private/ColorSpace.ush"
float3 LCoCg_2_LinearRGB(float3 LCoCg)
{
	return YCoCg_2_LinearRGB(LCoCg_2_YCoCg(LCoCg));
}

#line 7 "/Engine/Private/SphericalGaussian.ush"
struct FSphericalGaussian
{
	float3	Axis;		
	float	Sharpness;	
	float	Amplitude;	
};

#line 46 "/Engine/Public/WaveBroadcastIntrinsics.ush"
struct FWaveBroadcastSettings
{
	
	uint Operation;
	
	
	uint SourceLaneIndex;
	
	
	uint GroupThreadIndex;

	
	uint SwizzleAnd;
	uint SwizzleOr;
	uint SwizzleXor;
	
	
	int Rotate;
	uint RotateFixMask;
};

#line 74 "/Engine/Public/WaveBroadcastIntrinsics.ush"
uint GetWaveBroadcastSourceLaneIndex(const FWaveBroadcastSettings Settings, uint DestLaneIndex)
{
	if (0)
	{
		 return DestLaneIndex;
	}
	else if (Settings.Operation == 1)
	{
		return Settings.SourceLaneIndex;
	}
	else if (Settings.Operation == 2)
	{
		return Settings.SourceLaneIndex;
	}
	else if (Settings.Operation == 3)
	{
		return (((DestLaneIndex & Settings.SwizzleAnd) | Settings.SwizzleOr) ^ Settings.SwizzleXor) % 32;
	}
	else if (Settings.Operation == 4)
	{
		return (Settings.RotateFixMask & DestLaneIndex) | ((~Settings.RotateFixMask) & uint(DestLaneIndex + Settings.Rotate));
	}
	return DestLaneIndex;
}

#line 101 "/Engine/Public/WaveBroadcastIntrinsics.ush"
uint WaveBroadcast(const FWaveBroadcastSettings Settings, uint x)
{
	if (0)
	{
		 return x;
	}
	
	
	else if (Settings.Operation == 1)
	{
		
		{
			return WaveReadLaneAt(x, Settings.SourceLaneIndex);
		}
		


	}
	

	












	
	else if (Settings.Operation == 3)
	{
		




		{
			return WaveReadLaneAt(x, GetWaveBroadcastSourceLaneIndex(Settings, WaveGetLaneIndex()));
		}
		


	}
	

	
	else if (Settings.Operation == 4)
	{
		




		{
			return WaveReadLaneAt(x, GetWaveBroadcastSourceLaneIndex(Settings, WaveGetLaneIndex()));
		}
		


	}
	

	return x;
}

#line 172 "/Engine/Public/WaveBroadcastIntrinsics.ush"
uint2 WaveBroadcast(const FWaveBroadcastSettings Settings, uint2 v)
{
	return uint2(
		WaveBroadcast(Settings, v.x),
		WaveBroadcast(Settings, v.y));
}

#line 180 "/Engine/Public/WaveBroadcastIntrinsics.ush"
uint3 WaveBroadcast(const FWaveBroadcastSettings Settings, uint3 v)
{
	return uint3(
		WaveBroadcast(Settings, v.x),
		WaveBroadcast(Settings, v.y),
		WaveBroadcast(Settings, v.z));
}

#line 189 "/Engine/Public/WaveBroadcastIntrinsics.ush"
uint4 WaveBroadcast(const FWaveBroadcastSettings Settings, uint4 v)
{
	return uint4(
		WaveBroadcast(Settings, v.x),
		WaveBroadcast(Settings, v.y),
		WaveBroadcast(Settings, v.z),
		WaveBroadcast(Settings, v.w));
}

#line 200 "/Engine/Public/WaveBroadcastIntrinsics.ush"
int WaveBroadcast(const FWaveBroadcastSettings Settings, int x)
{
	return asint(WaveBroadcast(Settings, asuint(x)));
}

#line 206 "/Engine/Public/WaveBroadcastIntrinsics.ush"
int2 WaveBroadcast(const FWaveBroadcastSettings Settings, int2 v)
{
	return int2(
		WaveBroadcast(Settings, v.x),
		WaveBroadcast(Settings, v.y));
}

#line 214 "/Engine/Public/WaveBroadcastIntrinsics.ush"
int3 WaveBroadcast(const FWaveBroadcastSettings Settings, int3 v)
{
	return int3(
		WaveBroadcast(Settings, v.x),
		WaveBroadcast(Settings, v.y),
		WaveBroadcast(Settings, v.z));
}

#line 223 "/Engine/Public/WaveBroadcastIntrinsics.ush"
int4 WaveBroadcast(const FWaveBroadcastSettings Settings, int4 v)
{
	return int4(
		WaveBroadcast(Settings, v.x),
		WaveBroadcast(Settings, v.y),
		WaveBroadcast(Settings, v.z),
		WaveBroadcast(Settings, v.w));
}

#line 234 "/Engine/Public/WaveBroadcastIntrinsics.ush"
float WaveBroadcast(const FWaveBroadcastSettings Settings, float x)
{
	return asfloat(WaveBroadcast(Settings, asuint(x)));
}

#line 240 "/Engine/Public/WaveBroadcastIntrinsics.ush"
float2 WaveBroadcast(const FWaveBroadcastSettings Settings, float2 v)
{
	return float2(
		WaveBroadcast(Settings, v.x),
		WaveBroadcast(Settings, v.y));
}

#line 248 "/Engine/Public/WaveBroadcastIntrinsics.ush"
float3 WaveBroadcast(const FWaveBroadcastSettings Settings, float3 v)
{
	return float3(
		WaveBroadcast(Settings, v.x),
		WaveBroadcast(Settings, v.y),
		WaveBroadcast(Settings, v.z));
}

#line 257 "/Engine/Public/WaveBroadcastIntrinsics.ush"
float4 WaveBroadcast(const FWaveBroadcastSettings Settings, float4 v)
{
	return float4(
		WaveBroadcast(Settings, v.x),
		WaveBroadcast(Settings, v.y),
		WaveBroadcast(Settings, v.z),
		WaveBroadcast(Settings, v.w));
}

#line 369 "/Engine/Public/WaveBroadcastIntrinsics.ush"
FWaveBroadcastSettings InitNopBroadcast()
{
	FWaveBroadcastSettings Settings;
	Settings.Operation  = 0;
	Settings.SourceLaneIndex  = 0;
	Settings.GroupThreadIndex = 0;
	Settings.SwizzleAnd = 0x00;
	Settings.SwizzleOr  = 0x00;
	Settings.SwizzleXor = 0x00;
	Settings.Rotate        = +0;
	Settings.RotateFixMask = 0x00;
	return Settings;
}

#line 445 "/Engine/Public/WaveBroadcastIntrinsics.ush"
FWaveBroadcastSettings InitWaveXorButterfly(const uint XorButterFly)
{
	FWaveBroadcastSettings Settings = InitNopBroadcast();
	Settings.Operation  = 3;
	Settings.SwizzleAnd = 0x1F;
	Settings.SwizzleOr  = 0x00;
	Settings.SwizzleXor = XorButterFly;
	return Settings;
}

#line 470 "/Engine/Public/WaveBroadcastIntrinsics.ush"
FWaveBroadcastSettings InitWaveSwapWithinLaneGroup(const uint LaneGroupSize)
{
	return InitWaveXorButterfly( LaneGroupSize >> 1);
}

#line 18 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
void DecompressDevizeZAndN(uint Compressed, out float DevizeZ, out float3 N)
{
	DevizeZ = f16tof32(Compressed & 0x3FFF);

	uint FaceN = (Compressed >> 15) & 0x7;

	N.x = float((Compressed >> 18) & 0x7F) * rcp(127);
	N.y = float((Compressed >> 25) & 0x7F) * rcp(127);
	N.z = 0.0;

	DecodeNormal( N, FaceN);
}

#line 51 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
struct FSSDCompressedSceneInfos
{
	
	uint VGPR[6];
};

#line 58 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
FSSDCompressedSceneInfos CreateCompressedSceneInfos()
{
	FSSDCompressedSceneInfos CompressedInfos;
	 [unroll( 6 )]
	for (uint i = 0; i < 6; i++)
	{
		CompressedInfos.VGPR[i] = 0;
	}
	return CompressedInfos;
}

#line 73 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
struct FSSDSampleSceneInfos
{
	
	float2 ScreenPosition;

	
	float DeviceZ;

	
	float WorldDepth;

	
	float Roughness;
	
	
	float3 WorldNormal;
	
	
	float3 ViewNormal;

	
	float3 TranslatedWorldPosition;

	
	uint ShadingModelID;
};

#line 100 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
FSSDSampleSceneInfos CreateSampleSceneInfos()
{
	FSSDSampleSceneInfos Infos;
	Infos.WorldDepth              = 0;
	Infos.ScreenPosition          = 0;
	Infos.Roughness               = 0;
	Infos.WorldNormal             = 0;
	Infos.ViewNormal              = 0;
	Infos.TranslatedWorldPosition = 0;
	Infos.ShadingModelID          = 1;
	return Infos;
}

#line 118 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
FSSDSampleSceneInfos UncompressSampleSceneInfo(
	const uint CompressedLayout, const bool bIsPrevFrame,
	float2 ScreenPosition,
	FSSDCompressedSceneInfos CompressedInfos)
{
	FSSDSampleSceneInfos Infos = CreateSampleSceneInfos();

	Infos.ScreenPosition = ScreenPosition;

	if (CompressedLayout == 0)
	{
		Infos.WorldDepth = asfloat(CompressedInfos.VGPR[0]);
		Infos.WorldNormal.x = asfloat(CompressedInfos.VGPR[1]);
		Infos.WorldNormal.y = asfloat(CompressedInfos.VGPR[2]);
		Infos.WorldNormal.z = asfloat(CompressedInfos.VGPR[3]);
		Infos.Roughness = asfloat(CompressedInfos.VGPR[4]);
		Infos.ShadingModelID = CompressedInfos.VGPR[5];
		
		Infos.DeviceZ = ConvertToDeviceZ(Infos.WorldDepth);
		Infos.ViewNormal = mul(float4(Infos.WorldNormal, 0), View.TranslatedWorldToView).xyz;
	}
	else if (CompressedLayout == 1)
	{
		DecompressDevizeZAndN(CompressedInfos.VGPR[0],  Infos.DeviceZ,  Infos.WorldNormal);
		
		Infos.WorldDepth = ConvertFromDeviceZ(Infos.DeviceZ);
		Infos.ViewNormal = mul(float4(Infos.WorldNormal, 0), View.TranslatedWorldToView).xyz;
	}
	else if (CompressedLayout == 2)
	{
		float3 DecodedViewNormal;
		DecompressDevizeZAndN(CompressedInfos.VGPR[0],  Infos.DeviceZ,  DecodedViewNormal);
		
		Infos.WorldDepth = ConvertFromDeviceZ(Infos.DeviceZ);

		if (bIsPrevFrame)
		{
			Infos.WorldNormal = mul(float4(DecodedViewNormal, 0), View.PrevViewToTranslatedWorld).xyz;
			
			
			Infos.ViewNormal = mul(float4(Infos.WorldNormal, 0), View.TranslatedWorldToView).xyz;	
		}
		else
		{
			Infos.ViewNormal = DecodedViewNormal;
			Infos.WorldNormal = mul(float4(Infos.ViewNormal, 0), View.ViewToTranslatedWorld).xyz;
		}
	}
	else if (CompressedLayout == 3)
	{
		Infos.DeviceZ = asfloat(CompressedInfos.VGPR[0]);
		Infos.WorldDepth = ConvertFromDeviceZ(Infos.DeviceZ);
		Infos.ShadingModelID = CompressedInfos.VGPR[1];
	}
	else if (CompressedLayout == 4)
	{
		Infos.TranslatedWorldPosition.x = asfloat(CompressedInfos.VGPR[0]);
		Infos.TranslatedWorldPosition.y = asfloat(CompressedInfos.VGPR[1]);
		Infos.TranslatedWorldPosition.z = asfloat(CompressedInfos.VGPR[2]);
		Infos.ShadingModelID = CompressedInfos.VGPR[3];

		if (bIsPrevFrame)
		{
			Infos.WorldDepth = mul(float4(Infos.TranslatedWorldPosition, 1.0), View.TranslatedWorldToView).z;
		}
		else
		{
			Infos.WorldDepth = mul(float4(Infos.TranslatedWorldPosition, 1.0), View.PrevTranslatedWorldToView).z;
		}
		Infos.DeviceZ = ConvertToDeviceZ(Infos.WorldDepth);

		return Infos;
	}
	else
	{
		
	}

	
	{
		float4 ClipPosition = float4(ScreenPosition * (View.ViewToClip[3][3] < 1.0f ? Infos.WorldDepth : 1.0f), Infos.WorldDepth, 1);

		if (bIsPrevFrame)
		{
			float3 PreViewTranslationOffset = LWCToFloat(LWCSubtract(GetPrimaryView().PreViewTranslation, GetPrimaryView().PrevPreViewTranslation));
			Infos.TranslatedWorldPosition = mul(ClipPosition, View.PrevScreenToTranslatedWorld).xyz + PreViewTranslationOffset;
		}
		else
		{
			Infos.TranslatedWorldPosition = mul(ClipPosition, View.ScreenToTranslatedWorld).xyz;
		}
	}
	return Infos;
}

#line 257 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
float3 GetWorldNormal(FSSDSampleSceneInfos SceneMetadata)
{
	return SceneMetadata.WorldNormal;
}

#line 262 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
float GetWorldDepth(FSSDSampleSceneInfos SceneMetadata)
{
	return SceneMetadata.WorldDepth;
}

#line 267 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
float3 GetTranslatedWorldPosition(FSSDSampleSceneInfos SceneMetadata)
{
	return SceneMetadata.TranslatedWorldPosition;
}

#line 273 "/Engine/Private/ScreenSpaceDenoise/SSDMetadata.ush"
FSSDSampleSceneInfos WaveBroadcastSceneMetadata(const FWaveBroadcastSettings Settings, FSSDSampleSceneInfos SceneMetadata)
{
	FSSDSampleSceneInfos NewSceneMetadata;
	NewSceneMetadata.WorldDepth              = WaveBroadcast(Settings, SceneMetadata.WorldDepth);
	NewSceneMetadata.ScreenPosition          = WaveBroadcast(Settings, SceneMetadata.ScreenPosition);
	NewSceneMetadata.Roughness               = WaveBroadcast(Settings, SceneMetadata.Roughness);
	NewSceneMetadata.WorldNormal             = WaveBroadcast(Settings, SceneMetadata.WorldNormal);
	NewSceneMetadata.ViewNormal              = WaveBroadcast(Settings, SceneMetadata.ViewNormal);
	NewSceneMetadata.TranslatedWorldPosition = WaveBroadcast(Settings, SceneMetadata.TranslatedWorldPosition);
	return NewSceneMetadata;
}

#line 96 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
Texture2D PrevDepthBuffer;

#line 97 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
Texture2D PrevGBufferA;

#line 98 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
Texture2D PrevGBufferB;

#line 126 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
float SafeRcp(float x)
{
	if (x > 0)
		return rcp(x);
	return 0;
}

#line 184 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
float ComputeAnisotropyInvFactor(FSSDSampleSceneInfos SceneMetadata)
{
	if (!0)
	{
		return 1;
	}

	float Anysotropy = abs(dot(GetWorldNormal(SceneMetadata), View.ViewForward));

	return max(Anysotropy, rcp(8));
}

#line 197 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
float ComputeWorldBluringRadiusCausedByPixelSize(FSSDSampleSceneInfos SceneMetadata)
{
	
	return WorldDepthToPixelWorldRadius * GetWorldDepth(SceneMetadata);
}

#line 204 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
float WorldBluringRadiusToBilateralWorldDistance(float WorldBluringRadius)
{
	float Multiplier = 1;

	
	Multiplier *= 2;

	
	Multiplier *= sqrt(2);

	
	Multiplier *= 3.0;

	return WorldBluringRadius * Multiplier;
}

#line 220 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
uint2 BufferUVToBufferPixelCoord(float2 SceneBufferUV)
{
	return uint2(SceneBufferUV * BufferUVToOutputPixelPosition);
}

#line 225 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
float2 DenoiserBufferUVToScreenPosition(float2 SceneBufferUV)
{
	return SceneBufferUV * SceneBufferUVToScreenPosition.xy + SceneBufferUVToScreenPosition.zw;
}

#line 230 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
FSSDCompressedSceneInfos MaterialToCompressedSceneMetadata(float Depth, float3 WorldNormal, float Roughness, uint ShadingID)
{
	FSSDCompressedSceneInfos CompressedMetadata = CreateCompressedSceneInfos();

	CompressedMetadata.VGPR[0] = asuint(Depth);
	CompressedMetadata.VGPR[1] = asuint(WorldNormal.x);
	CompressedMetadata.VGPR[2] = asuint(WorldNormal.y);
	CompressedMetadata.VGPR[3] = asuint(WorldNormal.z);
	CompressedMetadata.VGPR[4] = asuint(Roughness);
	CompressedMetadata.VGPR[5] = ShadingID;

	return CompressedMetadata;
}

#line 244 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"
FSSDCompressedSceneInfos SampleCompressedSceneMetadata(
	const bool bPrevFrame,
	float2 BufferUV, uint2 PixelCoord)

{
  
#line 263 "/Engine/Private/ScreenSpaceDenoise/SSDCommon.ush"

	FGBufferData GBufferData;
	if (bPrevFrame)
	{
		float DeviceZ = PrevDepthBuffer.SampleLevel( D3DStaticPointClampedSampler, BufferUV, 0).r;

		uint CustomStencil = 0;
		float CustomNativeDepth = 0;

		float SceneDepth = ConvertFromDeviceZ(DeviceZ);

		float4 GBufferA = PrevGBufferA.SampleLevel( D3DStaticPointClampedSampler, BufferUV, 0);
		float4 GBufferB = PrevGBufferB.SampleLevel( D3DStaticPointClampedSampler, BufferUV, 0);
		float4 GBufferC = 0.0;
		float4 GBufferD = 0.0;
		float4 GBufferE = 0.0;
		float4 GBufferF = 0.5f;
		float4 GBufferVelocity = 0.0;

		bool bGetNormalizedNormal = false;

		GBufferData = DecodeGBufferData(
			GBufferA, GBufferB, GBufferC, GBufferD, GBufferE, GBufferF, GBufferVelocity,
			CustomNativeDepth, CustomStencil, SceneDepth, bGetNormalizedNormal, CheckerFromSceneColorUV(BufferUV));
	}
	else
	{
		GBufferData = GetGBufferDataFromSceneTextures(BufferUV);	
	}
	return MaterialToCompressedSceneMetadata(GBufferData.Depth, GBufferData.WorldNormal, GBufferData.Roughness, GBufferData.ShadingModelID);
  
}

#line 34 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
struct FSSDSignalSample
{
	
	float SampleCount;
	
	
	
		float4 SceneColor;
	

	
	



	
	



	
	float MissCount;

	float TransmissionDistance;
};

#line 61 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
struct FSSDSignalFrequency
{
	
	float ClosestHitDistance;

	
	float WorldBluringRadius;

	
	float ConfusionFactor;
};

#line 74 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
struct FSSDSignalArray
{
	FSSDSignalSample Array[1];
};

#line 80 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
struct FSSDSignalFrequencyArray
{
	FSSDSignalFrequency Array[1];
};

#line 86 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample CreateSignalSampleFromScalarValue(float Scalar)
{
	FSSDSignalSample OutSample;
	
		OutSample.SceneColor = Scalar;
	
	






	
#line 113 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"

	OutSample.SampleCount = Scalar;
	OutSample.MissCount = Scalar;
	OutSample.TransmissionDistance = Scalar;
	return OutSample;
}

#line 120 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalFrequency CreateInvalidSignalFrequency()
{
	FSSDSignalFrequency Frequency;
	Frequency.ClosestHitDistance = -2.0;
	Frequency.WorldBluringRadius = -1;
	Frequency.ConfusionFactor = -1;
	return Frequency;
}

#line 134 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalArray CreateSignalArrayFromScalarValue(float Scalar)
{
	FSSDSignalArray OutSamples;
	 [unroll( 1 )]
	for (uint BatchedSignalId = 0; BatchedSignalId < 1; BatchedSignalId++)
	{
		OutSamples.Array[BatchedSignalId] = CreateSignalSampleFromScalarValue(Scalar);
	}
	return OutSamples;
}

#line 145 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalFrequencyArray CreateInvalidSignalFrequencyArray()
{
	FSSDSignalFrequencyArray OutFrequencies;
	 [unroll( 1 )]
	for (uint BatchedSignalId = 0; BatchedSignalId < 1; BatchedSignalId++)
	{
		OutFrequencies.Array[BatchedSignalId] = CreateInvalidSignalFrequency();
	}
	return OutFrequencies;
}

#line 159 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample MulSignal(FSSDSignalSample Sample, float Scalar)
{
	FSSDSignalSample OutSample;
	
		OutSample.SceneColor         = Sample.SceneColor * Scalar;
	
	






	


	OutSample.SampleCount            = Sample.SampleCount * Scalar;
	OutSample.MissCount              = Sample.MissCount * Scalar;
	OutSample.TransmissionDistance   = Sample.TransmissionDistance * Scalar;
	return OutSample;
}

#line 181 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample AddSignal(FSSDSignalSample SampleA, FSSDSignalSample SampleB)
{
	
		SampleA.SceneColor         += SampleB.SceneColor;
	
	






	


	SampleA.SampleCount            += SampleB.SampleCount;
	SampleA.MissCount              += SampleB.MissCount;
	SampleA.TransmissionDistance   += SampleB.TransmissionDistance;
	return SampleA;
}

#line 202 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample MinusSignal(FSSDSignalSample Sample)
{
	
		Sample.SceneColor         = -Sample.SceneColor;
	
	






	


	Sample.SampleCount            = -Sample.SampleCount;
	Sample.MissCount              = -Sample.MissCount;
	Sample.TransmissionDistance   = -Sample.TransmissionDistance;
	return Sample;
}

#line 223 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample SubtractSignal(FSSDSignalSample SampleA, FSSDSignalSample SampleB)
{
	return AddSignal(SampleA, MinusSignal(SampleB));
}

#line 228 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample AbsSignal(FSSDSignalSample Sample)
{
	
		Sample.SceneColor         = abs(Sample.SceneColor);
	
	






	
#line 254 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"

	Sample.SampleCount            = abs(Sample.SampleCount);
	Sample.MissCount              = abs(Sample.MissCount);
	Sample.TransmissionDistance = abs(Sample.TransmissionDistance);
	return Sample;
}

#line 261 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample SqrtSignal(FSSDSignalSample Sample)
{
	
		Sample.SceneColor         = sqrt(Sample.SceneColor);
	
	






	
#line 287 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"

	Sample.SampleCount            = sqrt(Sample.SampleCount);
	Sample.MissCount              = sqrt(Sample.MissCount);
	Sample.TransmissionDistance   = sqrt(Sample.TransmissionDistance);
	return Sample;
}

#line 294 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample PowerSignal(FSSDSignalSample Sample, float Exponent)
{
	
		Sample.SceneColor.r       = pow(Sample.SceneColor.r, Exponent);
		Sample.SceneColor.g       = pow(Sample.SceneColor.g, Exponent);
		Sample.SceneColor.b       = pow(Sample.SceneColor.b, Exponent);
		Sample.SceneColor.a       = pow(Sample.SceneColor.a, Exponent);
	
	






	
#line 323 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"

	Sample.SampleCount            = pow(Sample.SampleCount, Exponent);
	Sample.MissCount              = pow(Sample.MissCount, Exponent);
	Sample.TransmissionDistance   = pow(Sample.TransmissionDistance, Exponent);
	return Sample;
}

#line 330 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample MinSignal(FSSDSignalSample SampleA, FSSDSignalSample SampleB)
{
	FSSDSignalSample OutSample;
	
		OutSample.SceneColor = min(SampleA.SceneColor, SampleB.SceneColor);
	
	






	
#line 357 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"

	OutSample.SampleCount = min(SampleA.SampleCount, SampleB.SampleCount);
	OutSample.MissCount = min(SampleA.MissCount, SampleB.MissCount);
	OutSample.TransmissionDistance = min(SampleA.TransmissionDistance, SampleB.TransmissionDistance);
	return OutSample;
}

#line 364 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample MaxSignal(FSSDSignalSample SampleA, FSSDSignalSample SampleB)
{
	FSSDSignalSample OutSample;
	
		OutSample.SceneColor = max(SampleA.SceneColor, SampleB.SceneColor);
	
	






	
#line 391 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"

	OutSample.SampleCount = max(SampleA.SampleCount, SampleB.SampleCount);
	OutSample.MissCount = max(SampleA.MissCount, SampleB.MissCount);
	OutSample.TransmissionDistance = max(SampleA.TransmissionDistance, SampleB.TransmissionDistance);
	return OutSample;
}

#line 398 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample ClampSignal(FSSDSignalSample Sample, FSSDSignalSample SampleMin, FSSDSignalSample SampleMax)
{
	FSSDSignalSample OutSample;
	
		OutSample.SceneColor = clamp(Sample.SceneColor, SampleMin.SceneColor, SampleMax.SceneColor);
	
	






	
#line 425 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"

	OutSample.SampleCount = clamp(Sample.SampleCount, SampleMin.SampleCount, SampleMax.SampleCount);
	OutSample.MissCount = clamp(Sample.MissCount, SampleMin.MissCount, SampleMax.MissCount);
	OutSample.TransmissionDistance = clamp(Sample.TransmissionDistance, SampleMin.TransmissionDistance, SampleMax.TransmissionDistance);
	return OutSample;
}

#line 438 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample NormalizeToOneSample(FSSDSignalSample Sample)
{
	FSSDSignalSample OutSample = MulSignal(Sample, Sample.SampleCount > 0 ? rcp(Sample.SampleCount) : 0);
	OutSample.SampleCount = Sample.SampleCount > 0 ? 1 : 0;
	return OutSample;
}

#line 445 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalSample WaveBroadcastSignal(const FWaveBroadcastSettings BroadcastSettings, FSSDSignalSample Sample)
{
	FSSDSignalSample OutSample;
	
		OutSample.SceneColor = WaveBroadcast(BroadcastSettings, Sample.SceneColor);
	
	






	
#line 472 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"

	OutSample.SampleCount        = WaveBroadcast(BroadcastSettings, Sample.SampleCount);
	OutSample.MissCount          = WaveBroadcast(BroadcastSettings, Sample.MissCount);
	OutSample.TransmissionDistance = WaveBroadcast(BroadcastSettings, Sample.TransmissionDistance);
	return OutSample;
}

#line 479 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalFrequency MinSignalFrequency(FSSDSignalFrequency FrequencyA, FSSDSignalFrequency FrequencyB)
{
	FSSDSignalFrequency OutFrequency;
	OutFrequency.ClosestHitDistance = min(FrequencyA.ClosestHitDistance, FrequencyB.ClosestHitDistance);
	OutFrequency.WorldBluringRadius = min(FrequencyA.WorldBluringRadius, FrequencyB.WorldBluringRadius);
	OutFrequency.ConfusionFactor = min(FrequencyA.ConfusionFactor, FrequencyB.ConfusionFactor);
	return OutFrequency;
}

#line 488 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCore.ush"
FSSDSignalFrequency WaveBroadcastSignalFrequency(const FWaveBroadcastSettings BroadcastSettings, FSSDSignalFrequency Frequency)
{
	FSSDSignalFrequency OutFrequency;
	OutFrequency.ClosestHitDistance = WaveBroadcast(BroadcastSettings, Frequency.ClosestHitDistance);
	OutFrequency.WorldBluringRadius = WaveBroadcast(BroadcastSettings, Frequency.WorldBluringRadius);
	OutFrequency.ConfusionFactor = WaveBroadcast(BroadcastSettings, Frequency.ConfusionFactor);
	return OutFrequency;
}

#line 8 "/Engine/Private/EyeAdaptationCommon.ush"
StructuredBuffer<float4> EyeAdaptationBuffer;

#line 10 "/Engine/Private/EyeAdaptationCommon.ush"
float4 EyeAdaptationLookupBuffer(StructuredBuffer<float4> InEyeAdaptation)
{
	return InEyeAdaptation[0];
}

#line 29 "/Engine/Private/EyeAdaptationCommon.ush"
float EyeAdaptationLookup()
{
#line  44 "/Engine/Private/EyeAdaptationCommon.ush"

	return EyeAdaptationLookupBuffer(EyeAdaptationBuffer).x;






}

#line 112 "/Engine/Private/LightData.ush"
struct FLightShaderParameters
{
	float3 TranslatedWorldPosition;
	float  InvRadius;
	float3 Color;
	float  FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float2 SpotAngles;
	float  SpecularScale;
	float  SourceRadius;
	float  SoftSourceRadius;
	float  SourceLength;
	float  RectLightBarnCosAngle;
	float  RectLightBarnLength;
	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float  RectLightAtlasMaxLevel;
	float  IESAtlasIndex;
};

#line 59 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
struct FSSDSignalDomainKnowledge
{
	
	FLightShaderParameters Light;

	
	float HitDistanceToWorldBluringRadius;

	
	uint LightType;
};

#line 79 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
FSSDSignalDomainKnowledge GetSignalDomainKnowledge(uint BatchedSignalId)
{
	
	FSSDSignalDomainKnowledge SignalDomain;
	SignalDomain.Light.InvRadius = 0;
	SignalDomain.Light.Color = 0;
	SignalDomain.Light.FalloffExponent = 0;
	SignalDomain.Light.Tangent = 0;
	SignalDomain.Light.SpotAngles = 0;
	SignalDomain.Light.SpecularScale = 0;
	SignalDomain.Light.SoftSourceRadius = 0;	
	SignalDomain.Light.TranslatedWorldPosition = LightPositionAndRadius[BatchedSignalId].xyz;
	SignalDomain.Light.Direction = LightDirectionAndLength[BatchedSignalId].xyz;
	SignalDomain.Light.SourceRadius = LightPositionAndRadius[BatchedSignalId].w;
	SignalDomain.Light.SourceLength = LightDirectionAndLength[BatchedSignalId].w;
	SignalDomain.HitDistanceToWorldBluringRadius =   HitDistanceToWorldBluringRadius [(uint) BatchedSignalId >>2u][(uint) BatchedSignalId &3u];
	
	
	{
		SignalDomain.LightType =   LightType [(uint) BatchedSignalId >>2u][(uint) BatchedSignalId &3u];
	}
	




	return SignalDomain;
}

#line 112 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
float Luma4(float3 Color)
{
	return (Color.g * 2.0) + (Color.r + Color.b);
}

#line 117 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
float KarisHdrWeightY(float Color, float Exposure) 
{
	return rcp(Color * Exposure + 4.0);
}

#line 122 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
float KarisHdrWeightInvY(float Color, float Exposure) 
{
	return 4.0 * rcp(1.0 - Color * Exposure);
}

#line 133 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
float GetSignalColorTransformationExposure()
{
	
	const float Tweak = 1;

	float FrameExposureScale = EyeAdaptationLookup();
	
	FrameExposureScale *= View.OneOverPreExposure;

	return  WaveReadLaneFirst( FrameExposureScale * Tweak );
}

#line 187 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
FSSDSignalSample TransformSignal(FSSDSignalSample Sample, const uint SrcBasis, const uint DestBasis)

{
	
	if (SrcBasis == DestBasis)
	{
		return Sample;
	}

	
	float FrameExposureScale = GetSignalColorTransformationExposure();
		
	
	const bool bIsNormalizedSample = false;
	const bool bDebugForceNormalizeColor = true;
	const bool bIsNormalizedColor = bIsNormalizedSample || bDebugForceNormalizeColor;


	const bool bUnchangeAlphaPremultiply = (SrcBasis & 0x4) == (DestBasis & 0x4);
	const bool bUnchangeColorSpace = bUnchangeAlphaPremultiply && (SrcBasis & 0x3) == (DestBasis & 0x3);

	if (bDebugForceNormalizeColor)
	{
		Sample.SceneColor *= SafeRcp(Sample.SampleCount);
	}

	
	if (SrcBasis & 0x8)
	{
		float KarisX = Luma4(Sample.SceneColor.rgb);
		if ((SrcBasis & 0x3))
		{
			KarisX = Sample.SceneColor.x;
		}

		if (!bIsNormalizedColor)
		{
			KarisX *= SafeRcp(Sample.SampleCount);
		}

		Sample.SceneColor *= KarisHdrWeightInvY(KarisX, FrameExposureScale);
	}
	
	if (bUnchangeColorSpace)
	{
		
	}
	else if ((SrcBasis & 0x3) == 0x1)
	{
		Sample.SceneColor.rgb = YCoCg_2_LinearRGB(Sample.SceneColor.rgb);
	}
	else if ((SrcBasis & 0x3) == 0x2)
	{
		Sample.SceneColor.rgb = LCoCg_2_LinearRGB(Sample.SceneColor.rgb);
	}

	float Alpha = Sample.SceneColor.a * SafeRcp(Sample.SampleCount);
	if (bIsNormalizedColor)
	{
		Alpha = Sample.SceneColor.a;
	}

	
	if (bUnchangeAlphaPremultiply)
	{
		
	}
	else if (SrcBasis & 0x4)
	{
		Sample.SceneColor.rgb *= Alpha;
	}
	else 
	{
		Sample.SceneColor.rgb *= SafeRcp(Alpha);
	}

	float x = Luma4(Sample.SceneColor.rgb);
	if ((DestBasis & 0x3) == 0x1)
	{
		if (!bUnchangeColorSpace)
			Sample.SceneColor.xyz = LinearRGB_2_YCoCg(Sample.SceneColor.rgb);

		x = Sample.SceneColor.x;
	}
	else if ((DestBasis & 0x3) == 0x2)
	{
		if (!bUnchangeColorSpace)
			Sample.SceneColor.xyz = LinearRGB_2_LCoCg(Sample.SceneColor.rgb);

		x = Sample.SceneColor.x;
	}

	if (DestBasis & 0x8)
	{
		if (bIsNormalizedColor)
		{
			Sample.SceneColor *= KarisHdrWeightY(x, FrameExposureScale);
		}
		else
		{
			Sample.SceneColor *= KarisHdrWeightY(x * SafeRcp(Sample.SampleCount), FrameExposureScale);
		}
	}
	
	if (bDebugForceNormalizeColor)
	{
		Sample.SceneColor *= Sample.SampleCount;
	}

	return Sample;
}

#line 318 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
FSphericalGaussian ComputeRoughnessLobe(float Roughness, float3 N, float3 V)
{
	
	float a = Pow2( max( 0.001, Roughness ) );
	float a2 = a*a;
	
	float NoV = saturate( abs( dot(N, V) ) + 1e-5 );
	
	
	float3 R = 2 * NoV * N - V;

	FSphericalGaussian SpecularSG;
	SpecularSG.Axis = R;
	SpecularSG.Sharpness = 0.5 / ( a2 * max( NoV, 0.1 ) );
	
	SpecularSG.Amplitude = rcp( PI * a2 );

	return SpecularSG;
}

#line 339 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
FSphericalGaussian ComputeRoughnessLobe(FSSDSampleSceneInfos RefSceneMetadata)
{
	



		float3 N = RefSceneMetadata.WorldNormal;
		float3 V = normalize(View.TranslatedWorldCameraOrigin - GetTranslatedWorldPosition(RefSceneMetadata));
	

	float Roughness = RefSceneMetadata.Roughness;

	return ComputeRoughnessLobe(Roughness, N, V);
}

#line 398 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
float3 ComputeMajorLightRayDirection(FSSDSampleSceneInfos SceneMetadata, FSSDSignalDomainKnowledge DomainKnowledge)
#line 412 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"

{
	
	return float3(0.0, 0.0, 1.0);
}

#line 419 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
float ComputeLightSourceRadius(FSSDSignalDomainKnowledge DomainKnowledge)





{
	return 0.0f;
}

#line 431 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
float ComputeBilateralWeight(
	const uint BilateralSettings,
	float MaxWorldBluringDistance,
	FSSDSignalDomainKnowledge DomainKnowledge,
	FSSDSampleSceneInfos RefSceneMetadata,
	FSSDSampleSceneInfos NeighborSceneMetadata,
	float3 NeighborToRefVector)
{
	if (0)
	{
		return 1;
	}
	
	



		float3 RefNormal = RefSceneMetadata.WorldNormal;
		float3 NeighborNormal = NeighborSceneMetadata.WorldNormal;
	
	
	
	float InvMaxWorldBluringDistance = rcp(MaxWorldBluringDistance);

	float PositionBilateralWeight = 1;
	if ((BilateralSettings & 0xF) == 1)
	{
		const float WorldRadius = MaxWorldBluringDistance;

		float RefAnisotropyInvFactor = ComputeAnisotropyInvFactor(RefSceneMetadata);

		float3 CameraToRef = View.ViewForward;

		float Z = dot(CameraToRef, NeighborToRefVector);
		float XY = length2(NeighborToRefVector - CameraToRef * Z * (1 - RefAnisotropyInvFactor));

		float DistSquare = XY;

		float Multiplier = rcp(WorldRadius * WorldRadius);

		PositionBilateralWeight = saturate(1 - DistSquare * Multiplier);
	}
	else if ((BilateralSettings & 0xF) == 2)
	{
		
		
		

		float DistFromRefPlane = abs(dot(RefNormal, NeighborToRefVector));

		PositionBilateralWeight = saturate(1 - DistFromRefPlane * InvMaxWorldBluringDistance);
	}
	else if ((BilateralSettings & 0xF) == 3)
	{
		if (dot(NeighborToRefVector, NeighborToRefVector) > MaxWorldBluringDistance * MaxWorldBluringDistance)
		{
			PositionBilateralWeight = 0;
		}
	}
	else if ((BilateralSettings & 0xF) == 4)
	{
		
		PositionBilateralWeight = saturate(1 - dot(NeighborToRefVector, NeighborToRefVector) * rcp(MaxWorldBluringDistance * MaxWorldBluringDistance));
	}
	else if ((BilateralSettings & 0xF) == 5)
	{
		float LightTangentBilateral;
		{
			
			float3 NeighborToLight = ComputeMajorLightRayDirection(NeighborSceneMetadata, DomainKnowledge);
			float3 ProjectedNeighborToRefVector = NeighborToRefVector - NeighborToLight * dot(NeighborToLight, NeighborToRefVector);

			
			LightTangentBilateral = saturate(1 - dot(ProjectedNeighborToRefVector, ProjectedNeighborToRefVector) * (InvMaxWorldBluringDistance * InvMaxWorldBluringDistance));
		}
		
		float PlaneMisAlignementBilateral;
		{
			
			
			
			
			
			const bool bApplyDepthPenaltyWeightForSSS = RefSceneMetadata.ShadingModelID == 5 && ComputeLightSourceRadius(DomainKnowledge) > 0.0f;
			const float	NormalEncodingError = bApplyDepthPenaltyWeightForSSS ? DomainKnowledge.Light.SourceRadius : -0.25;

			
			float DistFromRefPlane = dot(RefNormal, -NeighborToRefVector);

			float NeighborToRefPlaneDistance = length(-NeighborToRefVector - DistFromRefPlane * RefNormal);
			float NeighborToRefError = NeighborToRefPlaneDistance * NormalEncodingError;

			PlaneMisAlignementBilateral = saturate(1 - 6 * (abs(DistFromRefPlane) + NeighborToRefError) * InvMaxWorldBluringDistance);
		}

		PositionBilateralWeight = LightTangentBilateral * PlaneMisAlignementBilateral;
	}
	else if ((BilateralSettings & 0xF) == 6)
	{
		float PlaneMisAlignementBilateral;
		{
			const float NormalEncodingError = View.GeneralPurposeTweak;
			
			float DistFromRefPlane = dot(RefNormal, -NeighborToRefVector);

			float NeighborToRefPlaneDistance = length(-NeighborToRefVector - DistFromRefPlane * RefNormal);
			float NeighborToRefError = NeighborToRefPlaneDistance * NormalEncodingError;

			PlaneMisAlignementBilateral = saturate(1 - (abs(DistFromRefPlane) - NeighborToRefError) * InvMaxWorldBluringDistance);
		}

		PositionBilateralWeight = PlaneMisAlignementBilateral;
	}

	float NormalBilateralWeight = 1;
	if (BilateralSettings & 0x0010)
	{
		float NoN = max(dot(RefNormal, NeighborNormal), 0);

		
			NormalBilateralWeight = pow(NoN, 4);
		









	}
	
	
	float LobeSimilarity = 1;
	float AxesSimilarity = 1;
	if (BilateralSettings & (0x0020 | 0x0040))
	{
		const float Beta = 32;

		FSphericalGaussian Ref = ComputeRoughnessLobe(RefSceneMetadata);
		FSphericalGaussian Neighbor = ComputeRoughnessLobe(NeighborSceneMetadata);
	
		float InvSharpnessSum = rcp(Ref.Sharpness + Neighbor.Sharpness);

		if (BilateralSettings & 0x0020)
			LobeSimilarity = pow(2 * sqrt(Ref.Sharpness * Neighbor.Sharpness) * InvSharpnessSum, Beta);
		
		if (BilateralSettings & 0x0040)
			AxesSimilarity = exp(-(Beta * (Ref.Sharpness * Neighbor.Sharpness) * InvSharpnessSum) * saturate(1 - dot(Ref.Axis, Neighbor.Axis)));
	}

	if (BilateralSettings & 0x0080)
	{
		[flatten]
		if (RefSceneMetadata.ShadingModelID != NeighborSceneMetadata.ShadingModelID)
			return 0.0;
	}

	return PositionBilateralWeight * NormalBilateralWeight * LobeSimilarity * AxesSimilarity;
}

#line 593 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"
float GetSignalWorldBluringRadius(FSSDSignalFrequency SampleFrequency, FSSDSampleSceneInfos SceneMetadata, FSSDSignalDomainKnowledge DomainKnowledge)
#line 651 "/Engine/Private/ScreenSpaceDenoise/SSDSignalFramework.ush"

{
	
	return 0;
}

#line 129 "/Engine/Private/ScreenSpaceDenoise/SSDSignalArray.ush"
FSSDSignalArray NormalizeToOneSampleArray(FSSDSignalArray Samples)
{
	FSSDSignalArray OutSamples;
	 [unroll( 1 )]
	for (uint BatchedSignalId = 0; BatchedSignalId < 1; BatchedSignalId++)
	{
		OutSamples.Array[BatchedSignalId] = NormalizeToOneSample(Samples.Array[BatchedSignalId]);
	}
	return OutSamples;
}

#line 140 "/Engine/Private/ScreenSpaceDenoise/SSDSignalArray.ush"
FSSDSignalArray WaveBroadcastSignalArray(const FWaveBroadcastSettings BroadcastSettings, FSSDSignalArray Samples)
{
	FSSDSignalArray OutSamples;
	 [unroll( 1 )]
	for (uint BatchedSignalId = 0; BatchedSignalId < 1; BatchedSignalId++)
	{
		OutSamples.Array[BatchedSignalId] = WaveBroadcastSignal(BroadcastSettings, Samples.Array[BatchedSignalId]);
	}
	return OutSamples;
}

#line 151 "/Engine/Private/ScreenSpaceDenoise/SSDSignalArray.ush"
FSSDSignalFrequencyArray WaveBroadcastSignalFrequenciesArray(const FWaveBroadcastSettings BroadcastSettings, FSSDSignalFrequencyArray Frequencies)
{
	FSSDSignalFrequencyArray OutFrequencies;
	 [unroll( 1 )]
	for (uint BatchedSignalId = 0; BatchedSignalId < 1; BatchedSignalId++)
	{
		OutFrequencies.Array[BatchedSignalId] = WaveBroadcastSignalFrequency(BroadcastSettings, Frequencies.Array[BatchedSignalId]);
	}
	return OutFrequencies;
}

#line 18 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCompression.ush"
struct FSSDCompressedSignalSample
{
	
	uint VGPR[1];
};

#line 26 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCompression.ush"
void CompressSignalSample(in FSSDSignalSample Sample, uint CompressionLayout, out FSSDCompressedSignalSample OutCompressedSample)
{
	 [unroll( 1 )]
	for (uint i = 0; i < 1; i++)
	{
		OutCompressedSample.VGPR[i] = 0;
	}

	if (CompressionLayout == 0 || 0)
	{
		
	}
	
#line  53 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCompression.ush"

}

#line 57 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCompression.ush"
void UncompressSignalSample(in FSSDCompressedSignalSample CompressedSample, uint CompressionLayout, inout FSSDSignalSample OutSample)
{
	if (CompressionLayout == 0 || 0)
	{
		
	}
	
#line  79 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCompression.ush"

}

#line 82 "/Engine/Private/ScreenSpaceDenoise/SSDSignalCompression.ush"
FSSDCompressedSignalSample CreateCompressedSignalSampleFromScalarValue(float Scalar, uint CompressionLayout)
{
	FSSDSignalSample Sample = CreateSignalSampleFromScalarValue(Scalar);

	FSSDCompressedSignalSample CompressedSample;
	CompressSignalSample(Sample, CompressionLayout,  CompressedSample);
	return CompressedSample;
}

#line 39 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
struct FSSDSignalAccumulator
{
	
	
		FSSDSignalSample Moment1;
	

	
		FSSDSignalSample Moment2;
	

	
	
		FSSDCompressedSignalSample CompressedMoment1;
	

	
		FSSDCompressedSignalSample CompressedMoment2;
	

	
	




	
	
		FSSDSignalFrequency MinFrequency;
	

	
	










};

#line 85 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
struct FSSDSampleClusterInfo
{
	
	float OutterBoundaryRadius;
};

#line 92 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
FSSDSignalAccumulator CreateSignalAccumulator()
{
	FSSDSignalAccumulator Accumulator;
	
	
		Accumulator.Moment1 = CreateSignalSampleFromScalarValue(0.0);
	

	
		Accumulator.Moment2 = CreateSignalSampleFromScalarValue(0.0);
	

	
		Accumulator.CompressedMoment1 = CreateCompressedSignalSampleFromScalarValue(0.0, 0);
	

	
		Accumulator.CompressedMoment2 = CreateCompressedSignalSampleFromScalarValue(0.0, 0);
	
	
	



		
	
		Accumulator.MinFrequency.ClosestHitDistance = 1.#INF;
		Accumulator.MinFrequency.WorldBluringRadius = (100000);
		Accumulator.MinFrequency.ConfusionFactor = 1;
	

	
	
#line 136 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"


	return Accumulator;
}

#line 144 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
struct FSSDSampleAccumulationInfos
{
	
	FSSDSignalSample Sample;

	
	FSSDSignalFrequency Frequency;

	
	float FinalWeight;

	
	float InvFrequency;
};

#line 161 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
float AmendWorldBluringRadiusCausedByPixelSize(float WorldBluringDistance)
{
	float Multiplier = 1;

	
	Multiplier *= 2;

	
	Multiplier *= sqrt(2);

	return WorldBluringDistance * Multiplier;
}

#line 179 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
void AccumulateSampleInOneBin(inout FSSDSignalAccumulator Accumulator, FSSDSampleAccumulationInfos SampleInfos)
{
	float SampleWeight = SampleInfos.FinalWeight;
	
	
		Accumulator.Moment1 = AddSignal(Accumulator.Moment1, MulSignal(SampleInfos.Sample, SampleWeight));
	
	
	
		Accumulator.Moment2 = AddSignal(Accumulator.Moment2, MulSignal(PowerSignal(SampleInfos.Sample, 2), SampleWeight));
	
}

#line 196 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
void AccumulateSampleInDomainBoundaries(inout FSSDSignalAccumulator Accumulator, FSSDSampleAccumulationInfos SampleInfos)
{
	[flatten]
	if (SampleInfos.FinalWeight > 0)
	{
		





		
		
		
		
		if (SampleInfos.InvFrequency != -1)
		{
			Accumulator.MinFrequency = MinSignalFrequency(Accumulator.MinFrequency, SampleInfos.Frequency);
		}
		
	}
}

#line 330 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
void CompressSignalAccumulator(inout FSSDSignalAccumulator Accumulator)
{
	
		CompressSignalSample(Accumulator.Moment1, 0,  Accumulator.CompressedMoment1);
	
	
	
		CompressSignalSample(Accumulator.Moment2, 0,  Accumulator.CompressedMoment2);
	
}

#line 341 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
void UncompressSignalAccumulator(inout FSSDSignalAccumulator Accumulator)
{
	
		UncompressSignalSample(Accumulator.CompressedMoment1, 0,  Accumulator.Moment1);
	
	
	
		UncompressSignalSample(Accumulator.CompressedMoment2, 0,  Accumulator.Moment2);
	
}

#line 356 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
void StartAccumulatingCluster(
	FSSDSampleSceneInfos RefSceneMetadata,
	inout FSSDSignalAccumulator Accumulator,
	FSSDSampleClusterInfo ClusterInfo)
{
	


}

#line 367 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
void AccumulateSample(
	inout FSSDSignalAccumulator Accumulator,
	FSSDSampleAccumulationInfos SampleInfos)
{
	UncompressSignalAccumulator( Accumulator);

	AccumulateSampleInOneBin( Accumulator, SampleInfos);
	AccumulateSampleInDomainBoundaries( Accumulator, SampleInfos);

	



	CompressSignalAccumulator( Accumulator);
}

#line 384 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulator.ush"
void DijestAccumulatedClusterSamples(
	inout FSSDSignalAccumulator Accumulator,
	uint RingId, uint SampleCount)
{
	


}

#line 11 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulatorArray.ush"
struct FSSDSignalAccumulatorArray
{
	FSSDSignalAccumulator Array[1];
};

#line 17 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulatorArray.ush"
struct FSSDCompressedSignalAccumulatorArray
{
	uint VGPR[20];
};

#line 23 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulatorArray.ush"
FSSDSignalAccumulatorArray CreateSignalAccumulatorArray()
{
	FSSDSignalAccumulatorArray Accumulators;
	
	 [unroll( 1 )]
	for (uint i = 0; i < 1; i++)
	{
		Accumulators.Array[i] = CreateSignalAccumulator();
	}
	return Accumulators;
}

#line 36 "/Engine/Private/ScreenSpaceDenoise/SSDSignalAccumulatorArray.ush"
FSSDCompressedSignalAccumulatorArray CreateUninitialisedCompressedAccumulatorArray()
{
	FSSDCompressedSignalAccumulatorArray CompressedAccumulators;
	 [unroll( 20 )]
	for (uint i = 0; i < 20; i++)
	{
		CompressedAccumulators.VGPR[i] = 0;
	}
	return CompressedAccumulators;
}

#line 60 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"
float3 ClampColorForEncoding(float3 Color)
{
	
		Color = min(Color, MaxHalfFloat);
	
	return Color;
}

#line 68 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"
float4 ClampColorForEncoding(float4 Color)
{
	return float4(ClampColorForEncoding(Color.rgb), Color.a);
}

#line 75 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"
struct FSSDCompressedMultiplexedSample
{
	float4 VGPRArray[4];
};

#line 82 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"
void DecodeMultiplexedSignalsFromFloat4(
	const uint SignalBufferLayout,
	const uint MultiplexedSampleId,
	const bool bNormalizeSample,
	float4 RawSample[4],
	out FSSDSignalArray OutSamples,
	out FSSDSignalFrequencyArray OutSampleFrequencies)
{
	OutSamples = CreateSignalArrayFromScalarValue(0.0);
	OutSampleFrequencies = CreateInvalidSignalFrequencyArray();

	if (0)
	{
	
	}
	
	else if (SignalBufferLayout == 0xDEAD)
	{
		
		OutSamples = CreateSignalArrayFromScalarValue(-1.#INF);
	}
	else if (SignalBufferLayout == 15)
	{
		 [unroll( 1 )]
		for (uint BatchSignalId = 0; BatchSignalId < 1; BatchSignalId++)
		{
			uint MultiplexId = BatchSignalId;
			
			OutSamples.Array[MultiplexId].SampleCount = (RawSample[MultiplexId].g == -2.0 ? 0.0 : 1.0);
			OutSamples.Array[MultiplexId].MissCount = OutSamples.Array[MultiplexId].SampleCount * RawSample[MultiplexId].r;
			OutSamples.Array[MultiplexId].TransmissionDistance = OutSamples.Array[MultiplexId].SampleCount * RawSample[MultiplexId].a;

			OutSampleFrequencies.Array[MultiplexId].ClosestHitDistance = RawSample[MultiplexId].g;

			[flatten]
			if (OutSamples.Array[MultiplexId].SampleCount == 0)
			{
				OutSampleFrequencies.Array[MultiplexId].ClosestHitDistance = -2.0;
			}
			else if (OutSamples.Array[MultiplexId].MissCount > 0.999)
			{
				OutSampleFrequencies.Array[MultiplexId].ClosestHitDistance = -1.0;
			}
		}
	}
	else if (SignalBufferLayout == 11)
	{
		 [unroll( 1 )]
		for (uint MultiplexId = 0; MultiplexId < 1; MultiplexId++)
		{
			float4 Channels = RawSample[MultiplexId].xyzw;
			
			float SampleCount = bNormalizeSample ? (Channels.g > 0 ? 1 : 0) : (Channels.g);

			OutSamples.Array[MultiplexId].MissCount = Channels.r * SampleCount;
			OutSamples.Array[MultiplexId].SampleCount = SampleCount;
			OutSamples.Array[MultiplexId].TransmissionDistance = Channels.a * SampleCount;

			OutSampleFrequencies.Array[MultiplexId].WorldBluringRadius = Channels.b;
		}
	}
	
	
#line 205 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"

	
	else if (SignalBufferLayout == 0x1002)
	{
		
		{
			const uint MultiplexId = 0;

			float Weight = RawSample[0].a;

			if (bNormalizeSample)
			{
				Weight = Weight > 0 ? 1 : 0;
			}

			OutSamples.Array[MultiplexId].SampleCount = Weight;
			OutSamples.Array[MultiplexId].SceneColor.rgb = RawSample[0].rgb * Weight;
		}
		
	
#line 239 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"

	}
	
	
	else if (SignalBufferLayout == 3)
	{
		OutSamples.Array[0].SampleCount = RawSample[1].r == -1.0 ? 0 : 1;
		OutSamples.Array[0].MissCount = RawSample[1].r == -1.0 ? 0 : (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = RawSample[0];

		
		OutSampleFrequencies.Array[0].ConfusionFactor = RawSample[1].r;
	}
	else if (SignalBufferLayout == 4)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].SampleCount * RawSample[0];

		OutSampleFrequencies.Array[0].ConfusionFactor = RawSample[1].g;
	}
	
	
	else if (SignalBufferLayout == 0xA000)
	{
		OutSamples.Array[0].SampleCount = RawSample[1].r < 0 ? 0 : 1;
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * RawSample[0].r;

		OutSampleFrequencies.Array[0].WorldBluringRadius = RawSample[1].r;
	}
	else if (SignalBufferLayout == 0xA001)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[0].g > 0 ? 1 : 0;
			OutSamples.Array[0].MissCount = RawSample[0].g > 0 ? RawSample[0].r : 0;
			
		



		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[0].g;
			OutSamples.Array[0].MissCount = RawSample[0].g * RawSample[0].r;
			
		



		}
	}
	else if (SignalBufferLayout == 0xA002)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[0].g > 0 ? 1 : 0;
			OutSamples.Array[0].MissCount = RawSample[0].g > 0 ? RawSample[0].r : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[0].g;
			OutSamples.Array[0].MissCount = RawSample[0].g * RawSample[0].r;
		}
		
		OutSampleFrequencies.Array[0].WorldBluringRadius = RawSample[0].b;
	}
	
	
	else if (SignalBufferLayout == 0xD100)
	{
		OutSamples.Array[0].SampleCount = RawSample[1].g;
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].SampleCount * RawSample[0];

		OutSampleFrequencies.Array[0].ClosestHitDistance = ((RawSample[1].r == -1.0) ? 1.0e20 : RawSample[1].r);
	}
	else if (SignalBufferLayout == 0xD101)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].SampleCount * RawSample[0];
	}
	else if (SignalBufferLayout == 0xD102)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r > 0 ? 1 : 0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[1].r;
		}
		
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * (1 - RawSample[0].a);
		OutSamples.Array[0].SceneColor = OutSamples.Array[0].SampleCount * RawSample[0];
		
		
		





	}
	else if (SignalBufferLayout == 0xD300)
	{
		OutSamples.Array[0].SampleCount = RawSample[0].a;
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * RawSample[1].r;
		OutSamples.Array[0].SceneColor.rgb = OutSamples.Array[0].SampleCount * RawSample[0].rgb;
	}
	else if (SignalBufferLayout == 0xD301)
	{
		if (bNormalizeSample)
		{
			OutSamples.Array[0].SampleCount = RawSample[1].g > 0.0 ? 1.0 : 0.0;
		}
		else
		{
			OutSamples.Array[0].SampleCount = RawSample[1].g * 64.0;
		}
		OutSamples.Array[0].MissCount = OutSamples.Array[0].SampleCount * RawSample[1].r;
		OutSamples.Array[0].SceneColor.rgb = OutSamples.Array[0].SampleCount * RawSample[0].rgb;
	}
	
	
#line 402 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"

	
#line 430 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"

}

#line 475 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"
void DecodeMultiplexedSignals(
	const uint SignalBufferLayout,
	const uint MultiplexedSampleId,
	const bool bNormalizeSample,
	FSSDCompressedMultiplexedSample CompressedSample,
	out FSSDSignalArray OutSamples,
	out FSSDSignalFrequencyArray OutSampleFrequencies)

{
	DecodeMultiplexedSignalsFromFloat4(
		SignalBufferLayout,
		MultiplexedSampleId,
		bNormalizeSample,
		CompressedSample.VGPRArray,
		 OutSamples,
		 OutSampleFrequencies);
}

#line 506 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"
void EncodeMultiplexedSignals(
	const uint SignalBufferLayout, const uint MultiplexCount,
	FSSDSignalSample Sample[1],
	FSSDSignalFrequency SampleFrequency[1],
	out float4 OutRawSample[4],
	out uint OutBufferCount)

{
	
	 [unroll( 4 )]
	for (uint i = 0; i < 4; i++)
		OutRawSample[i] = 0;

	
	OutBufferCount = 1;

	if (0)
	{
		
	}
	
	else if (SignalBufferLayout == 11)
	{
		[unroll]
		for (uint MultiplexId = 0; MultiplexId < MultiplexCount; MultiplexId++)
		{
			float NormalizationFactor = SafeRcp(Sample[MultiplexId].SampleCount);

			float NormalizedTransmissionDistance = Sample[MultiplexId].TransmissionDistance * NormalizationFactor;

			OutRawSample[MultiplexId] = float4(
				Sample[MultiplexId].MissCount * NormalizationFactor,
				Sample[MultiplexId].SampleCount,
				SampleFrequency[MultiplexId].WorldBluringRadius,
				NormalizedTransmissionDistance);
		}
		OutBufferCount = MultiplexCount;
	}
	
	
#line 572 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"

	
	else if (SignalBufferLayout == 0x1002)
	{
		
		{
			const uint MultiplexId = 0;

			float NormalizationFactor = SafeRcp(Sample[MultiplexId].SampleCount);

			OutRawSample[0].rgb = ClampColorForEncoding(Sample[MultiplexId].SceneColor.rgb * NormalizationFactor);
			OutRawSample[0].a = Sample[MultiplexId].SampleCount;
		}

		
	










		OutBufferCount = 2;
	}
	
	
	else if (SignalBufferLayout == 4)
	{
		float NormalizationFactor = SafeRcp(Sample[0].SampleCount);

		
		OutRawSample[0] = ClampColorForEncoding(Sample[0].SceneColor * NormalizationFactor);
		OutRawSample[1].r = Sample[0].SampleCount;
		OutRawSample[1].g = SampleFrequency[0].ConfusionFactor;
		OutBufferCount = 2;
	}
	
	
	else if (SignalBufferLayout == 0xA001)
	{
		
		OutRawSample[0].r = Sample[0].SampleCount > 0 ? Sample[0].MissCount / Sample[0].SampleCount : 1.0;
		OutRawSample[0].g = Sample[0].SampleCount;
		
	






	}
	else if (SignalBufferLayout == 0xA002)
	{
		
		OutRawSample[0].r = Sample[0].SampleCount > 0 ? Sample[0].MissCount / Sample[0].SampleCount : 1.0;
		OutRawSample[0].g = Sample[0].SampleCount;
		OutRawSample[0].b = SampleFrequency[0].WorldBluringRadius;
	}
	
	
	else if (SignalBufferLayout == 0xD101)
	{
		float NormalizationFactor = SafeRcp(Sample[0].SampleCount);

		OutRawSample[0] = ClampColorForEncoding(Sample[0].SceneColor * NormalizationFactor);
		OutRawSample[1].r = Sample[0].SampleCount;
		OutBufferCount = 2;
	}
	else if (SignalBufferLayout == 0xD102)
	{
		float NormalizationFactor = SafeRcp(Sample[0].SampleCount);

		OutRawSample[0] = ClampColorForEncoding(Sample[0].SceneColor * NormalizationFactor);
		OutRawSample[1].r = Sample[0].SampleCount;
		OutBufferCount = 2;

		
		






	}
	else if (SignalBufferLayout == 0xD301)
	{
		float NormalizationFactor = SafeRcp(Sample[0].SampleCount);

		OutRawSample[0].rgb = ClampColorForEncoding(Sample[0].SceneColor * NormalizationFactor).rgb;
		OutRawSample[1].g = saturate(Sample[0].SampleCount * rcp(64.0));
		OutRawSample[1].r = Sample[0].MissCount * NormalizationFactor;
		OutBufferCount = 2;
	}
	
	










	










}

#line 762 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"
FSSDCompressedMultiplexedSample SampleCompressedMultiplexedSignals(
	Texture2D SignalBuffer0, Texture2D SignalBuffer1, Texture2D SignalBuffer2, Texture2D SignalBuffer3,
	SamplerState Sampler, float2 UV, uint2 PixelCoord)
{
	FSSDCompressedMultiplexedSample CompressedSample;

	
	
	 
	{
		
		{
			CompressedSample.VGPRArray[0] = SignalBuffer0.SampleLevel(Sampler, UV, 0.0);
			CompressedSample.VGPRArray[1] = SignalBuffer1.SampleLevel(Sampler, UV, 0.0);
			CompressedSample.VGPRArray[2] = SignalBuffer2.SampleLevel(Sampler, UV, 0.0);
			CompressedSample.VGPRArray[3] = SignalBuffer3.SampleLevel(Sampler, UV, 0.0);
		}
		











	}

	return CompressedSample;
}

#line 798 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"
void SampleMultiplexedSignals( 
	Texture2D SignalBuffer0, Texture2D SignalBuffer1, Texture2D SignalBuffer2, Texture2D SignalBuffer3,
	SamplerState Sampler,
	const uint SignalBufferLayout, const uint MultiplexedSampleId,
	const bool bNormalizeSample,
	float2 UV,
	out FSSDSignalArray OutMultiplexedSamples,
	out FSSDSignalFrequencyArray OutMultiplexedFrequencies)
{
	uint2 PixelCoord = BufferUVToBufferPixelCoord(UV);

	FSSDCompressedMultiplexedSample CompressedSample = SampleCompressedMultiplexedSignals(
		SignalBuffer0, SignalBuffer1, SignalBuffer2, SignalBuffer3,
		Sampler, UV, PixelCoord);

	DecodeMultiplexedSignals(
		SignalBufferLayout, MultiplexedSampleId, bNormalizeSample, CompressedSample,
		 OutMultiplexedSamples,
		 OutMultiplexedFrequencies);
}

#line 821 "/Engine/Private/ScreenSpaceDenoise/SSDSignalBufferEncoding.ush"
void OutputMultiplexedSignal(
	RWTexture2D<float4>  OutputSignalBuffer0,
	RWTexture2D<float4>  OutputSignalBuffer1,
	RWTexture2D<float4>  OutputSignalBuffer2,
	RWTexture2D<float4>  OutputSignalBuffer3,
	const uint SignalBufferLayout, const uint MultiplexCount,
	const uint2 PixelPosition,
	FSSDSignalArray MultiplexedSamples,
	FSSDSignalFrequencyArray MultiplexedFrequencies)
{
	
	float4 RawSample[4];
	uint BufferCount;
	EncodeMultiplexedSignals(
		SignalBufferLayout, MultiplexCount,
		MultiplexedSamples.Array,
		MultiplexedFrequencies.Array,
		 RawSample,  BufferCount);

	
	if (BufferCount >= 1)
		OutputSignalBuffer0[PixelPosition] = RawSample[0];
	if (BufferCount >= 2)
		OutputSignalBuffer1[PixelPosition] = RawSample[1];
	if (BufferCount >= 3)
		OutputSignalBuffer2[PixelPosition] = RawSample[2];
	if (BufferCount >= 4)
		OutputSignalBuffer3[PixelPosition] = RawSample[3];
}

#line 23 "/Engine/Private/TextureSampling.ush"
static const uint2 BilinearSamplingOffsets2x2[4] =
{
	int2(0,  0),
	int2(1,  0),
	int2(0,  1),
	int2(1,  1),
};

#line 33 "/Engine/Private/TextureSampling.ush"
struct FBilinearSampleInfos
{
	
	float2 TextureInvSize;

	
	float2 TopLeftPixelCoord;

	
	float2 BilinearInterp;
};

#line 47 "/Engine/Private/TextureSampling.ush"
FBilinearSampleInfos GetBilinearSampleLevelInfosEx(float2 SampleUV, float2 TextureSize, float2 TextureInvSize, float MipLevelPow2, float InvMipLevelPow2)
{
	FBilinearSampleInfos Infos;

	float2 HistoryBufferPixelCoord = SampleUV * TextureSize * InvMipLevelPow2;

	Infos.TextureInvSize = TextureInvSize * MipLevelPow2;
	Infos.TopLeftPixelCoord = floor(HistoryBufferPixelCoord - 0.5);
	Infos.BilinearInterp = frac(HistoryBufferPixelCoord - 0.5);
	return Infos;
}

#line 65 "/Engine/Private/TextureSampling.ush"
float GetSampleWeight(FBilinearSampleInfos SampleInfos, const uint SampleId)
{
	float BilinearSampleWeights[4] = {
		(1 - SampleInfos.BilinearInterp.x) * (1 - SampleInfos.BilinearInterp.y),
		(SampleInfos.BilinearInterp.x) * (1 - SampleInfos.BilinearInterp.y),
		(1 - SampleInfos.BilinearInterp.x) * (SampleInfos.BilinearInterp.y),
		(SampleInfos.BilinearInterp.x) * (SampleInfos.BilinearInterp.y),
	};
	return BilinearSampleWeights[SampleId];
}

#line 64 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
struct FSSDKernelConfig
{
	

	
	uint SampleSet;
	
	
	uint SampleSubSetId;

	
	uint BufferLayout;

	
	uint MultiplexedSignalsPerSignalDomain;
	
	
	uint BilateralDistanceComputation;

	
	uint RingCount;
	
	
	uint NeighborToRefComputation;
	
	
	uint RefSceneMetadataLayout;
	
	
	float WorldBluringDistanceMultiplier;

	
	
	bool bUnroll;
	
	
	bool bSampleKernelCenter;

	
	bool bPreviousFrameMetadata;

	
	bool bPreviousFrameRefMetadata;

	
	bool bDescOrder;

	
	bool bNormalizeSample;

	
	
	bool bMinSamplePairInvFrequency;

	
	bool bMaxWithRefBilateralDistance;

	
	bool bComputeSampleColorSH;

	
	bool bClampUVPerMultiplexedSignal;

	
	uint BufferColorSpace[1];
	
	
	uint AccumulatorColorSpace[1];
	
	
	uint BilateralSettings[1];

	
	

	
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;

	
	float KernelSpreadFactor;

	
	float HarmonicPeriode;

	
	float4 PerSignalUVMinMax[1];

	
	
	
	
	uint BoxKernelRadius;

	
	uint SampleCount;

	
	float2 BufferUV;

	
	FSSDCompressedSceneInfos CompressedRefSceneMetadata;

	
	
	float2 RefBufferUV;

	
	bool bForceKernelCenterAccumulation;

	
	bool bForceAllAccumulation;

	
	bool bIsDynamicPixel;

	
	uint SampleTrackId;

	
	float RefBilateralDistance[1];

	
	float Randoms[1];

	
	uint2 HammersleySeed;

	
	float2 MajorAxis;

	
	float MajorPixelRadius;
	float MinorPixelRadius;





};

#line 205 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
FSSDKernelConfig CreateKernelConfig()
{
	FSSDKernelConfig KernelConfig;
	KernelConfig.SampleSet = 0;
	KernelConfig.SampleSubSetId = 0;
	KernelConfig.BufferLayout = 0xDEAD;
	KernelConfig.MultiplexedSignalsPerSignalDomain = 1;
	KernelConfig.NeighborToRefComputation = 0;
	KernelConfig.RefSceneMetadataLayout = 0;
	KernelConfig.RingCount = 0;
	KernelConfig.WorldBluringDistanceMultiplier = 1.0;
	KernelConfig.bUnroll = false;
	KernelConfig.bSampleKernelCenter = false;
	KernelConfig.bPreviousFrameMetadata = false;
	KernelConfig.bPreviousFrameRefMetadata = false;
	KernelConfig.BilateralDistanceComputation = 2;
	KernelConfig.bDescOrder = false;
	KernelConfig.bNormalizeSample = false;
	KernelConfig.bMinSamplePairInvFrequency = false;
	KernelConfig.bMaxWithRefBilateralDistance = false;
	KernelConfig.bComputeSampleColorSH = false;
	KernelConfig.bClampUVPerMultiplexedSignal = false;
	
	{
		 [unroll( 1 )]
		for (uint MultiplexId = 0; MultiplexId < 1; MultiplexId++)
		{
			KernelConfig.BufferColorSpace[MultiplexId] = 0x0;
			KernelConfig.AccumulatorColorSpace[MultiplexId] = 0x0;
			KernelConfig.BilateralSettings[MultiplexId] = 0x0000;
		}
	}
	
	
	KernelConfig.BufferSizeAndInvSize = float4(0, 0, 0, 0);
	KernelConfig.BufferBilinearUVMinMax = float4(0, 0, 0, 0);
	KernelConfig.KernelSpreadFactor = 1;
	KernelConfig.HarmonicPeriode = 1.0;
	
	{
		 [unroll( 1 )]
		for (uint MultiplexId = 0; MultiplexId < 1; MultiplexId++)
		{
			KernelConfig.PerSignalUVMinMax[MultiplexId] = 0.0;
		}
	}

	
	KernelConfig.BoxKernelRadius = 1;
	KernelConfig.SampleCount = 1;
	KernelConfig.BufferUV = 0.0;
	KernelConfig.CompressedRefSceneMetadata = CreateCompressedSceneInfos();
	KernelConfig.RefBufferUV = 0.0;
	KernelConfig.bForceKernelCenterAccumulation = false;
	KernelConfig.bForceAllAccumulation = false;
	KernelConfig.bIsDynamicPixel = false;
	KernelConfig.SampleTrackId = 0;
	KernelConfig.MajorAxis = 0.0;
	KernelConfig.MajorPixelRadius = 0.0;
	KernelConfig.MinorPixelRadius = 0.0;
	KernelConfig.HammersleySeed = 0;

	{	
		 [unroll( 1 )]
		for (uint MultiplexId = 0; MultiplexId < 1; MultiplexId++)
		{
			KernelConfig.RefBilateralDistance[MultiplexId] = 0.0;
		}
	}
	
	{	
		 [unroll( 2 )]
		for (uint RandomSignalId = 0; RandomSignalId < 1; RandomSignalId++)
		{
			KernelConfig.Randoms[RandomSignalId] = 0.0;
		}
	}
	
	






	return KernelConfig;
}

#line 294 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void SetBilateralPreset(uint BilateralPresetId, inout FSSDKernelConfig KernelConfig)
{
	if (BilateralPresetId == 0x0011)
	{
		 [unroll( 1 )]
		for (uint MultiplexId = 0; MultiplexId < 1; MultiplexId++)
		{
			
			
			
			KernelConfig.BilateralSettings[MultiplexId] =  (0x0000 + ( 5 ) & 0xF) | 0x0010;
		}
	}
	else if (BilateralPresetId == 0x0022)
	{
		
		KernelConfig.BilateralSettings[0] =  (0x0000 + ( 5 ) & 0xF) | 0x0010;
		
		
		


	}
	else if (BilateralPresetId == 0x1001)
	{
		
		
		KernelConfig.BilateralSettings[0] = (0x0020 | 0x0040);
		
		



	}
	else if (BilateralPresetId == 0x1002)
	{
		
		
		KernelConfig.BilateralSettings[0] = 0x0020;
	}
	else if (BilateralPresetId == 0x1003)
	{
		
		
		KernelConfig.BilateralSettings[0] =  (0x0000 + ( 1 ) & 0xF) | (0x0020 | 0x0040);
		
		



	}
	else if (BilateralPresetId == 0x2001)
	{
		
		KernelConfig.BilateralSettings[0] =  (0x0000 + ( 2 ) & 0xF) | 0x0010;
		
		



	}
	else if (BilateralPresetId == 0x3001)
	{
		
		KernelConfig.BilateralSettings[0] =  (0x0000 + ( 2 ) & 0xF);
	}
	else if (BilateralPresetId == 0xF000)
	{
		
		KernelConfig.BilateralSettings[0] =  (0x0000 + ( 1 ) & 0xF) | 0x0080;
	}
	else if (BilateralPresetId == 0x4001)
	{
		
		KernelConfig.BilateralSettings[0] =  (0x0000 + ( 4 ) & 0xF) | 0x0010;
		
		



	}
	else if (BilateralPresetId == 0x4002)
	{
		
		KernelConfig.BilateralSettings[0] =  (0x0000 + ( 2 ) & 0xF) | 0x0010;
		
		
		



	}
}

#line 391 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
static const float kWaveletFilterWeights5x5[] = { 3.0 / 8.0, 1.0 / 4.0, 1.0 / 16.0 };

#line 398 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
float2 ComputeRefBufferUV(FSSDKernelConfig KernelConfig)
{
	if (KernelConfig.bPreviousFrameMetadata)
	{
		
		return KernelConfig.RefBufferUV;
	}
	else if (KernelConfig.SampleSet == 11)
	{
		
		return KernelConfig.RefBufferUV;
	}
	else if (KernelConfig.SampleSet == 8)
	{
		uint SampleTrackId = KernelConfig.SampleTrackId;

		
		
		float2 SampleOffset = float2(
			SampleTrackId & 0x1 ? 0.5 : -0.5,
			SampleTrackId & 0x2 ? 0.5 : -0.5);

		return KernelConfig.BufferUV + SampleOffset * KernelConfig.BufferSizeAndInvSize.zw;
	}

	return KernelConfig.BufferUV;
}

#line 428 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
FSSDSampleSceneInfos UncompressRefSceneMetadata(FSSDKernelConfig KernelConfig)
{
	
	float2 RefBufferUV = ComputeRefBufferUV(KernelConfig);

	float2 ScreenPos;
	if (KernelConfig.bPreviousFrameMetadata) 
	{
		ScreenPos = RefBufferUV * PrevSceneBufferUVToScreenPosition.xy + PrevSceneBufferUVToScreenPosition.zw;
	}
	else
	{
		ScreenPos = DenoiserBufferUVToScreenPosition(RefBufferUV);
	}

	
	return UncompressSampleSceneInfo(
		KernelConfig.RefSceneMetadataLayout, KernelConfig.bPreviousFrameRefMetadata,
		ScreenPos,
		KernelConfig.CompressedRefSceneMetadata);
}

#line 451 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
FSSDSampleSceneInfos UncompressSampleSceneMetadata(
	FSSDKernelConfig KernelConfig,
	float2 SampleBufferUV,
	FSSDCompressedSceneInfos CompressedSampleSceneMetadata)
{
	float2 ScreenPos;
	if (KernelConfig.bPreviousFrameMetadata)
	{
		ScreenPos = SampleBufferUV * PrevSceneBufferUVToScreenPosition.xy + PrevSceneBufferUVToScreenPosition.zw;
	}
	else
	{
		ScreenPos = DenoiserBufferUVToScreenPosition(SampleBufferUV);
	}

	return UncompressSampleSceneInfo(
		0, KernelConfig.bPreviousFrameMetadata,
		ScreenPos,
		CompressedSampleSceneMetadata);
}

#line 472 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
float3 ComputeVectorFromNeighborToRef(
	FSSDKernelConfig KernelConfig,
	FSSDSampleSceneInfos RefSceneMetadata,
	FSSDSampleSceneInfos NeighborSceneMetadata)
{
	float RefWorldDepth = GetWorldDepth(RefSceneMetadata);
	float NeighborWorldDepth = GetWorldDepth(NeighborSceneMetadata);

	if (KernelConfig.NeighborToRefComputation == 1)
	{
		
		float2 RefScreenPos = RefSceneMetadata.ScreenPosition;
		float3 RefClipPosition = float3(RefScreenPos * (View.ViewToClip[3][3] < 1.0f ? RefWorldDepth : 1.0f), RefWorldDepth);

		float2 NeighborScreenPos = NeighborSceneMetadata.ScreenPosition;
		float3 NeighborClipPosition = float3(NeighborScreenPos * (View.ViewToClip[3][3] < 1.0f ? NeighborWorldDepth : 1.0f), NeighborWorldDepth);
		
		


			float3 NeighborToRefVector = mul(float4(RefClipPosition - NeighborClipPosition, 0), View.ScreenToTranslatedWorld).xyz;
		

		return NeighborToRefVector;
	}
	else 
	{
		float3 NeighborToRefWorldVector = GetTranslatedWorldPosition(RefSceneMetadata) - GetTranslatedWorldPosition(NeighborSceneMetadata);
		
		
		



		return NeighborToRefWorldVector;
	}
}

#line 513 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
FSSDSignalSample TransformSignalSampleForAccumulation(
	FSSDKernelConfig KernelConfig,
	uint MultiplexId,
	FSSDSampleSceneInfos SampleSceneMetadata,
	FSSDSignalSample Sample,
	uint2 SamplePixelCoord)
{
	
	
	Sample = TransformSignal(
		Sample, 
		 KernelConfig.BufferColorSpace[MultiplexId], 
		 KernelConfig.AccumulatorColorSpace[MultiplexId]);
	
	
	






	return Sample;
}

#line 539 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
uint ComputeSignalBatchIdFromSignalMultiplexId(FSSDKernelConfig KernelConfig, const uint SignalMultiplexId)
{
	return SignalMultiplexId / KernelConfig.MultiplexedSignalsPerSignalDomain;
}

#line 545 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
bool IsOutsideViewport(FSSDKernelConfig KernelConfig, float2 SampleBufferUV)
{
	return any( or_internal( SampleBufferUV < KernelConfig.BufferBilinearUVMinMax.xy , SampleBufferUV > KernelConfig.BufferBilinearUVMinMax.zw ));
}

#line 551 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void SampleMultiplexedSignals(
	FSSDKernelConfig KernelConfig,
	Texture2D SignalBuffer0,
	Texture2D SignalBuffer1,
	Texture2D SignalBuffer2,
	Texture2D SignalBuffer3,
	float2 SampleBufferUV,
	out FSSDCompressedSceneInfos OutCompressedSampleSceneMetadata,
	out FSSDCompressedMultiplexedSample OutCompressedMultiplexedSamples)
{
	uint2 PixelCoord = BufferUVToBufferPixelCoord(SampleBufferUV);

	OutCompressedSampleSceneMetadata = SampleCompressedSceneMetadata(
		KernelConfig.bPreviousFrameMetadata, SampleBufferUV, PixelCoord);

	
	OutCompressedMultiplexedSamples = SampleCompressedMultiplexedSignals(
		SignalBuffer0,
		SignalBuffer1,
		SignalBuffer2,
		SignalBuffer3,
		 D3DStaticPointClampedSampler,
		SampleBufferUV,
		PixelCoord);
}

#line 578 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void UncompressMultiplexedSignals(
	FSSDKernelConfig KernelConfig,
	float2 SampleBufferUV,
	FSSDCompressedMultiplexedSample CompressedMultiplexedSamples,
	out FSSDSignalArray MultiplexedSamples,
	out FSSDSignalFrequencyArray MultiplexedFrequencies)
{
	
	DecodeMultiplexedSignals(
		KernelConfig.BufferLayout,
		 0,
		KernelConfig.bNormalizeSample,
		CompressedMultiplexedSamples,
		 MultiplexedSamples,
		 MultiplexedFrequencies);

	if (KernelConfig.bClampUVPerMultiplexedSignal)
	{
		 [unroll( 1 )]
		for (uint SignalMultiplexId = 0; SignalMultiplexId < 1; SignalMultiplexId++)
		{
			bool bInvalidSample = any(SampleBufferUV != clamp(
				SampleBufferUV, KernelConfig.PerSignalUVMinMax[SignalMultiplexId].xy, KernelConfig.PerSignalUVMinMax[SignalMultiplexId].zw));

			if (bInvalidSample)
			{
				MultiplexedSamples.Array[SignalMultiplexId] = CreateSignalSampleFromScalarValue(0.0);
			}
		} 
	}
}

#line 611 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void AccumulateSampledMultiplexedSignals(
	FSSDKernelConfig KernelConfig,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators,
	FSSDSampleSceneInfos RefSceneMetadata,
	float2 SampleBufferUV,
	FSSDSampleSceneInfos SampleSceneMetadata,
	FSSDSignalArray MultiplexedSamples,
	FSSDSignalFrequencyArray MultiplexedFrequencies,
	float KernelSampleWeight,
	const bool bForceSample,
	bool bIsOutsideFrustum)
{
	
	float RefPixelWorldBluringRadius = ComputeWorldBluringRadiusCausedByPixelSize(RefSceneMetadata);

	


		
	
	float3 NeighborToRefVector = ComputeVectorFromNeighborToRef(
		KernelConfig,
		RefSceneMetadata,
		SampleSceneMetadata);

	
#line 667 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"


	 [unroll( 1 )]
	for (uint SignalMultiplexId = 0; SignalMultiplexId < 1; SignalMultiplexId++)
	{
		
		const uint BatchedSignalId = ComputeSignalBatchIdFromSignalMultiplexId(KernelConfig, SignalMultiplexId);
		
		
		FSSDSignalDomainKnowledge DomainKnowledge = GetSignalDomainKnowledge(BatchedSignalId);

		
		uint2 NeighborPixelCoord = floor(SampleBufferUV * KernelConfig.BufferSizeAndInvSize.xy);

		
		FSSDSignalSample Sample = MultiplexedSamples.Array[SignalMultiplexId];
		Sample = TransformSignalSampleForAccumulation(KernelConfig, SignalMultiplexId, SampleSceneMetadata, Sample, NeighborPixelCoord);

		
		FSSDSignalFrequency SampleFrequency = MultiplexedFrequencies.Array[SignalMultiplexId];

		
		float SamplePixelWorldBluringRadius = ComputeWorldBluringRadiusCausedByPixelSize(SampleSceneMetadata);
		
		
		float SignalConvolutionBluringRadius = GetSignalWorldBluringRadius(SampleFrequency, SampleSceneMetadata, DomainKnowledge);
		
		
		if (KernelConfig.BilateralDistanceComputation == 4)
		{
			SignalConvolutionBluringRadius = SampleFrequency.WorldBluringRadius;
		}

		
		float FinalWorldBluringDistance = -1;
		if (KernelConfig.BilateralDistanceComputation == 0)
		{
			FinalWorldBluringDistance = AmendWorldBluringRadiusCausedByPixelSize(
				RefPixelWorldBluringRadius);
		}
		else if (KernelConfig.BilateralDistanceComputation == 1)
		{
			FinalWorldBluringDistance = AmendWorldBluringRadiusCausedByPixelSize(
				SamplePixelWorldBluringRadius);
		}
		else if (KernelConfig.BilateralDistanceComputation == 2)
		{
			FinalWorldBluringDistance = AmendWorldBluringRadiusCausedByPixelSize(
				min(SamplePixelWorldBluringRadius, RefPixelWorldBluringRadius));
		}
		else if (
			KernelConfig.BilateralDistanceComputation == 3 ||
			KernelConfig.BilateralDistanceComputation == 4)
		{
			FinalWorldBluringDistance = SignalConvolutionBluringRadius;
		}
		else if (KernelConfig.BilateralDistanceComputation == 5)
		{
			FinalWorldBluringDistance = AmendWorldBluringRadiusCausedByPixelSize(
				RefPixelWorldBluringRadius) * KernelConfig.HarmonicPeriode;
		}

		FinalWorldBluringDistance *= KernelConfig.WorldBluringDistanceMultiplier;
		
		if (KernelConfig.bMaxWithRefBilateralDistance)
		{
			FinalWorldBluringDistance = min(FinalWorldBluringDistance, KernelConfig.RefBilateralDistance[SignalMultiplexId]);
		}
	
		
		float BilateralWeight = ComputeBilateralWeight(
			KernelConfig.BilateralSettings[SignalMultiplexId],
			FinalWorldBluringDistance,
			DomainKnowledge,
			RefSceneMetadata,
			SampleSceneMetadata,
			NeighborToRefVector);
		
		FSSDSampleAccumulationInfos SampleInfos;
		SampleInfos.Sample = Sample;
		SampleInfos.Frequency = SampleFrequency;
		SampleInfos.FinalWeight = KernelSampleWeight * BilateralWeight;
		SampleInfos.InvFrequency = SignalConvolutionBluringRadius;

		if (bForceSample || KernelConfig.bForceAllAccumulation)
		{
			SampleInfos.FinalWeight = 1;
		}

		
		[flatten]
		if (SampleInfos.Sample.SampleCount != 0 && !bIsOutsideFrustum)
		{
			
			{
				AccumulateSample(
					 UncompressedAccumulators.Array[SignalMultiplexId],
					SampleInfos);
			}
			






		}
	} 
	
	


}

#line 785 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void SampleAndAccumulateMultiplexedSignals(
	FSSDKernelConfig KernelConfig,
	Texture2D SignalBuffer0,
	Texture2D SignalBuffer1,
	Texture2D SignalBuffer2,
	Texture2D SignalBuffer3,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators,
	float2 SampleBufferUV,
	float KernelSampleWeight,
	const bool bForceSample)
{
	
	bool bIsOutsideFrustum = IsOutsideViewport(KernelConfig, SampleBufferUV);

	FSSDCompressedSceneInfos CompressedSampleSceneMetadata;
	FSSDCompressedMultiplexedSample CompressedMultiplexedSamples;

	
	 
	{
		SampleMultiplexedSignals(
			KernelConfig,
			SignalBuffer0,
			SignalBuffer1,
			SignalBuffer2,
			SignalBuffer3,
			SampleBufferUV,
			 CompressedSampleSceneMetadata,
			 CompressedMultiplexedSamples);
	}
	
	
	{
		FSSDSignalArray MultiplexedSamples;
		FSSDSignalFrequencyArray MultiplexedFrequencies;
		UncompressMultiplexedSignals(
			KernelConfig, SampleBufferUV, CompressedMultiplexedSamples,
			 MultiplexedSamples,
			 MultiplexedFrequencies);
	
		FSSDSampleSceneInfos RefSceneMetadata = UncompressRefSceneMetadata(KernelConfig);
	
		FSSDSampleSceneInfos SampleSceneMetadata = UncompressSampleSceneMetadata(
			KernelConfig, SampleBufferUV, CompressedSampleSceneMetadata);

		AccumulateSampledMultiplexedSignals(
			KernelConfig,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			RefSceneMetadata,
			SampleBufferUV,
			SampleSceneMetadata,
			MultiplexedSamples,
			MultiplexedFrequencies,
			KernelSampleWeight,
			bForceSample,
			bIsOutsideFrustum);
	}
}

#line 846 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void SampleAndAccumulateMultiplexedSignalsPair(
	FSSDKernelConfig KernelConfig,
	Texture2D SignalBuffer0,
	Texture2D SignalBuffer1,
	Texture2D SignalBuffer2,
	Texture2D SignalBuffer3,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators,
	float2 SampleBufferUV[2],
	float KernelSampleWeight)
{
	FSSDCompressedSceneInfos CompressedSampleSceneMetadata[2];
	FSSDCompressedMultiplexedSample CompressedMultiplexedSamples[2];
	bool bIsOutsideFrustum[2];
	
	
	 
	{
		 [unroll( 2 )]
		for (uint PairFetchId = 0; PairFetchId < 2; PairFetchId++)
		{
			
			
			bIsOutsideFrustum[PairFetchId] = IsOutsideViewport(KernelConfig, SampleBufferUV[PairFetchId]);

			SampleMultiplexedSignals(
				KernelConfig,
				SignalBuffer0,
				SignalBuffer1,
				SignalBuffer2,
				SignalBuffer3,
				SampleBufferUV[PairFetchId],
				 CompressedSampleSceneMetadata[PairFetchId],
				 CompressedMultiplexedSamples[PairFetchId]);
		}
	}
	
	
	{
		
		FSSDSignalArray MultiplexedSamples[2];
		FSSDSignalFrequencyArray MultiplexedFrequencies[2];
		 [unroll( 2 )]
		for (uint PairUncompressId = 0; PairUncompressId < 2; PairUncompressId++)
		{
			UncompressMultiplexedSignals(
				KernelConfig,
				SampleBufferUV[PairUncompressId],
				CompressedMultiplexedSamples[PairUncompressId],
				 MultiplexedSamples[PairUncompressId],
				 MultiplexedFrequencies[PairUncompressId]);
		}

		
		if (KernelConfig.bMinSamplePairInvFrequency)
		{
			 [unroll( 1 )]
			for (uint SignalMultiplexId = 0; SignalMultiplexId < 1; SignalMultiplexId++)
			{
				float MinInvFrequency = min(
					MultiplexedFrequencies[0].Array[SignalMultiplexId].WorldBluringRadius,
					MultiplexedFrequencies[1].Array[SignalMultiplexId].WorldBluringRadius);

				[flatten]
				if (MinInvFrequency > 0)
				{
					MultiplexedFrequencies[0].Array[SignalMultiplexId].WorldBluringRadius = MinInvFrequency;
					MultiplexedFrequencies[1].Array[SignalMultiplexId].WorldBluringRadius = MinInvFrequency;
				}
			}
		}
	
		FSSDSampleSceneInfos RefSceneMetadata = UncompressRefSceneMetadata(KernelConfig);
	
		 [unroll( 2 )]
		for (uint PairAccumulateId = 0; PairAccumulateId < 2; PairAccumulateId++)
		{
			FSSDSampleSceneInfos SampleSceneMetadata = UncompressSampleSceneMetadata(
				KernelConfig, SampleBufferUV[PairAccumulateId], CompressedSampleSceneMetadata[PairAccumulateId]);

			AccumulateSampledMultiplexedSignals(
				KernelConfig,
				 UncompressedAccumulators,
				 CompressedAccumulators,
				RefSceneMetadata,
				SampleBufferUV[PairAccumulateId],
				SampleSceneMetadata,
				MultiplexedSamples[PairAccumulateId],
				MultiplexedFrequencies[PairAccumulateId],
				KernelSampleWeight,
				 false,
				bIsOutsideFrustum[PairAccumulateId]);
		}
	}
}

#line 942 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void StartAccumulatingCluster(
	FSSDKernelConfig KernelConfig,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators,
	FSSDSampleClusterInfo ClusterInfo)
{
	FSSDSampleSceneInfos RefSceneMetadata = UncompressRefSceneMetadata(KernelConfig);

	



	 [unroll( 1 )]
	for (uint SignalMultiplexId = 0; SignalMultiplexId < 1; SignalMultiplexId++)
	{
		
		{
			StartAccumulatingCluster(
				RefSceneMetadata,
				 UncompressedAccumulators.Array[SignalMultiplexId],
				ClusterInfo);
		}
		







	}
	
	


}

#line 979 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void DijestAccumulatedClusterSamples(
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators,
	uint RingId, uint SampleCount)
{
	


		
	 [unroll( 1 )]
	for (uint SignalMultiplexId = 0; SignalMultiplexId < 1; SignalMultiplexId++)
	{
		
		{
			DijestAccumulatedClusterSamples(
				 UncompressedAccumulators.Array[SignalMultiplexId],
				RingId, SampleCount);
		}
		






	}
	
	


}

#line 1011 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void SampleAndAccumulateCenterSampleAsItsOwnCluster(
	FSSDKernelConfig KernelConfig,
	Texture2D SignalBuffer0,
	Texture2D SignalBuffer1,
	Texture2D SignalBuffer2,
	Texture2D SignalBuffer3,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators)
{
	const uint RingId = 0;

	FSSDSampleClusterInfo ClusterInfo;
	ClusterInfo.OutterBoundaryRadius = (RingId + 1) * KernelConfig.KernelSpreadFactor;

	StartAccumulatingCluster(
		KernelConfig, 
		 UncompressedAccumulators,
		 CompressedAccumulators,
		ClusterInfo);

	SampleAndAccumulateMultiplexedSignals(
		KernelConfig,
		SignalBuffer0,
		SignalBuffer1,
		SignalBuffer2,
		SignalBuffer3,
		 UncompressedAccumulators,
		 CompressedAccumulators,
		KernelConfig.BufferUV,
		 1.0,
		 KernelConfig.bForceKernelCenterAccumulation);

	DijestAccumulatedClusterSamples(
		 UncompressedAccumulators,
		 CompressedAccumulators,
		RingId,  1);
}

#line 1054 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void AccumulateBilinear2x2Kernel(
	FSSDKernelConfig KernelConfig,
	Texture2D SignalBuffer0,
	Texture2D SignalBuffer1,
	Texture2D SignalBuffer2,
	Texture2D SignalBuffer3,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators)
{
	const float MipLevelPow2 = 1;

	FBilinearSampleInfos BilinearInfos = GetBilinearSampleLevelInfosEx(
		KernelConfig.BufferUV,
		KernelConfig.BufferSizeAndInvSize.xy,
		KernelConfig.BufferSizeAndInvSize.zw,
		MipLevelPow2, rcp(MipLevelPow2));
	
	bool bUseStocasticBilinear = false;
	if (KernelConfig.SampleSet == 13)
	{
		bUseStocasticBilinear = true;
	}
	else if (KernelConfig.SampleSet == 17)
	{
		bUseStocasticBilinear = !KernelConfig.bIsDynamicPixel;
	}

	float2 SampleBufferUVArray[4];
	float BilinearWeightArray[4];

	[flatten]
	if (bUseStocasticBilinear)
	{
		float2 SampleOffset;
		float WeigthAccumulation = 0.0;

		 [unroll( 4 )]
		for (uint i = 0; i < 4; i++)
		{
			[flatten]
			if (KernelConfig.Randoms[0] > WeigthAccumulation)
				SampleOffset = BilinearSamplingOffsets2x2[i];

			WeigthAccumulation += GetSampleWeight(BilinearInfos, i);

			BilinearWeightArray[i] = 0.0;
			SampleBufferUVArray[i] = 0.0;
		}

		
		
		SampleBufferUVArray[0] = (BilinearInfos.TopLeftPixelCoord + (SampleOffset + 0.5)) * MipLevelPow2 * KernelConfig.BufferSizeAndInvSize.zw;
		BilinearWeightArray[0] = 1.0;
	}
	else
	{
		 [unroll( 4 )]
		for (uint i = 0; i < 4; i++)
		{
			float2 SampleOffset = BilinearSamplingOffsets2x2[i];
		
			
			
			SampleBufferUVArray[i] = (BilinearInfos.TopLeftPixelCoord + (SampleOffset + 0.5)) * MipLevelPow2 * KernelConfig.BufferSizeAndInvSize.zw;
		
			BilinearWeightArray[i] = GetSampleWeight(BilinearInfos, i);
		}
	}

	{
		SampleAndAccumulateMultiplexedSignals(
			KernelConfig,
			SignalBuffer0,
			SignalBuffer1,
			SignalBuffer2,
			SignalBuffer3,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			SampleBufferUVArray[0],
			BilinearWeightArray[0],
			 false);
	}

	[branch]
	if (!bUseStocasticBilinear)
	{
		 [unroll( 3 )]
		for (uint i = 1; i < 4; i++)
		{
			SampleAndAccumulateMultiplexedSignals(
				KernelConfig,
				SignalBuffer0,
				SignalBuffer1,
				SignalBuffer2,
				SignalBuffer3,
				 UncompressedAccumulators,
				 CompressedAccumulators,
				SampleBufferUVArray[i],
				BilinearWeightArray[i],
				 false);
		}
	}
}

#line 1158 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void AccumulateSquareKernel(
	FSSDKernelConfig KernelConfig,
	Texture2D SignalBuffer0,
	Texture2D SignalBuffer1,
	Texture2D SignalBuffer2,
	Texture2D SignalBuffer3,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators)
{
	int KernelRadius = 1;
	if (KernelConfig.SampleSet == 4)
	{
		KernelRadius = 2;
	}
	else if (KernelConfig.SampleSet == 7)
	{
		KernelRadius = KernelConfig.BoxKernelRadius;
	}
	
	if (KernelConfig.bUnroll)
	{
		[unroll] for (int x = -KernelRadius; x <= KernelRadius; x++)
		{
			[unroll] for (int y = -KernelRadius; y <= KernelRadius; y++)
			{
				const bool bIsKernelCenterSample = x == 0 && y == 0;

				if (bIsKernelCenterSample && !KernelConfig.bSampleKernelCenter) continue;

				float2 SampleOffset = float2(x, y);
				if (KernelConfig.SampleSet == 3)
				{
					SampleOffset = mul(float2x2(float2(2, -1), float2(1, 2)), SampleOffset);
				}
			
				float2 SampleBufferUV = KernelConfig.BufferUV + (SampleOffset * KernelConfig.KernelSpreadFactor) * KernelConfig.BufferSizeAndInvSize.zw;
		
				float KernelWeight = 1;
				if (KernelConfig.SampleSet == 4)
				{
					KernelWeight = 
						kWaveletFilterWeights5x5[abs(x)] *
						kWaveletFilterWeights5x5[abs(y)] *
						rcp(kWaveletFilterWeights5x5[0] * kWaveletFilterWeights5x5[0]);
				}

				SampleAndAccumulateMultiplexedSignals(
					KernelConfig,
					SignalBuffer0,
					SignalBuffer1,
					SignalBuffer2,
					SignalBuffer3,
					 UncompressedAccumulators,
					 CompressedAccumulators,
					SampleBufferUV,
					KernelWeight,
					 bIsKernelCenterSample && KernelConfig.bForceKernelCenterAccumulation);
			}
		}
	}
	else
	{
		
		[loop] for (int x = -KernelRadius; x <= KernelRadius; x++)
		{
			[loop] for (int y = -KernelRadius; y <= KernelRadius; y++)
			{
				const bool bIsKernelCenterSample = x == 0 && y == 0;

				if (bIsKernelCenterSample && !KernelConfig.bSampleKernelCenter) continue;

				float2 SampleOffset = float2(x, y);
				if (KernelConfig.SampleSet == 3)
				{
					SampleOffset = mul(float2x2(float2(2, -1), float2(1, 2)), SampleOffset);
				}
			
				float2 SampleBufferUV = KernelConfig.BufferUV + (SampleOffset * KernelConfig.KernelSpreadFactor) * KernelConfig.BufferSizeAndInvSize.zw;
		
				float KernelWeight = 1;
				if (KernelConfig.SampleSet == 4)
				{
					KernelWeight = 
						kWaveletFilterWeights5x5[abs(x)] *
						kWaveletFilterWeights5x5[abs(y)] *
						rcp(kWaveletFilterWeights5x5[0] * kWaveletFilterWeights5x5[0]);
				}

				SampleAndAccumulateMultiplexedSignals(
					KernelConfig,
					SignalBuffer0,
					SignalBuffer1,
					SignalBuffer2,
					SignalBuffer3,
					 UncompressedAccumulators,
					 CompressedAccumulators,
					SampleBufferUV,
					KernelWeight,
					 bIsKernelCenterSample && KernelConfig.bForceKernelCenterAccumulation);
			}
		}
	}
}

#line 1262 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void BroadcastAccumulateSquare3x3KernelCenter(
 	FSSDKernelConfig KernelConfig,
 	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
 	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators,
 	FSSDSampleSceneInfos RefSceneMetadata,
 	float2 SampleBufferUV,
 	FSSDSampleSceneInfos SampleSceneMetadata,
 	FSSDSignalArray SampleMultiplexedSamples,
	FSSDSignalFrequencyArray SampleMultiplexedFrequencies)

{
	const FWaveBroadcastSettings BroadcastSettingsX = InitWaveSwapWithinLaneGroup( 2);
	const FWaveBroadcastSettings BroadcastSettingsY = InitWaveSwapWithinLaneGroup( 16);
			
	
	SampleBufferUV = WaveBroadcast(BroadcastSettingsX, SampleBufferUV);
	SampleSceneMetadata = WaveBroadcastSceneMetadata(BroadcastSettingsX, SampleSceneMetadata);
	SampleMultiplexedSamples = WaveBroadcastSignalArray(BroadcastSettingsX, SampleMultiplexedSamples);
	SampleMultiplexedFrequencies = WaveBroadcastSignalFrequenciesArray(BroadcastSettingsX, SampleMultiplexedFrequencies);

	if (KernelConfig.SampleSet == 2 || KernelConfig.SampleSet == 5)
	{
		AccumulateSampledMultiplexedSignals(
			KernelConfig,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			RefSceneMetadata,
			SampleBufferUV,
			SampleSceneMetadata,
			SampleMultiplexedSamples,
			SampleMultiplexedFrequencies,
			 1.0,
			 false,
			 false);
	}
		
	
	SampleBufferUV = WaveBroadcast(BroadcastSettingsY, SampleBufferUV);
	SampleSceneMetadata = WaveBroadcastSceneMetadata(BroadcastSettingsY, SampleSceneMetadata);
	SampleMultiplexedSamples = WaveBroadcastSignalArray(BroadcastSettingsY, SampleMultiplexedSamples);
	SampleMultiplexedFrequencies = WaveBroadcastSignalFrequenciesArray(BroadcastSettingsY, SampleMultiplexedFrequencies);

	if (KernelConfig.SampleSet == 2 || KernelConfig.SampleSet == 6)
	{
		AccumulateSampledMultiplexedSignals(
			KernelConfig,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			RefSceneMetadata,
			SampleBufferUV,
			SampleSceneMetadata,
			SampleMultiplexedSamples,
			SampleMultiplexedFrequencies,
			 1.0,
			 false,
			 false);
	}
	
	
	SampleBufferUV = WaveBroadcast(BroadcastSettingsX, SampleBufferUV);
	SampleSceneMetadata = WaveBroadcastSceneMetadata(BroadcastSettingsX, SampleSceneMetadata);
	SampleMultiplexedSamples = WaveBroadcastSignalArray(BroadcastSettingsX, SampleMultiplexedSamples);
	SampleMultiplexedFrequencies = WaveBroadcastSignalFrequenciesArray(BroadcastSettingsX, SampleMultiplexedFrequencies);
	
	if (KernelConfig.SampleSet == 2 || KernelConfig.SampleSet == 5)
	{
		AccumulateSampledMultiplexedSignals(
			KernelConfig,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			RefSceneMetadata,
			SampleBufferUV,
			SampleSceneMetadata,
			SampleMultiplexedSamples,
			SampleMultiplexedFrequencies,
			 1.0,
			 false,
			 false);
	}
}

#line 1346 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void AccumulateSquare3x3Kernel(
	FSSDKernelConfig KernelConfig,
	Texture2D SignalBuffer0,
	Texture2D SignalBuffer1,
	Texture2D SignalBuffer2,
	Texture2D SignalBuffer3,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators)

{
	if (KernelConfig.bSampleKernelCenter)
	{
		float2 SampleBufferUV = KernelConfig.BufferUV;
			
		
		const bool bIsOutsideFrustum = false;

		FSSDCompressedSceneInfos CompressedSampleSceneMetadata;
		FSSDCompressedMultiplexedSample CompressedMultiplexedSamples;
		
		
		 
		{
			SampleMultiplexedSignals(
				KernelConfig,
				SignalBuffer0,
				SignalBuffer1,
				SignalBuffer2,
				SignalBuffer3,
				SampleBufferUV,
				 CompressedSampleSceneMetadata,
				 CompressedMultiplexedSamples);
		}

		FSSDSampleSceneInfos RefSceneMetadata = UncompressRefSceneMetadata(KernelConfig);

		FSSDSignalArray MultiplexedSamples;
		FSSDSignalFrequencyArray MultiplexedFrequencies;
		UncompressMultiplexedSignals(
			KernelConfig,
			SampleBufferUV,
			CompressedMultiplexedSamples,
			 MultiplexedSamples,
			 MultiplexedFrequencies);

		FSSDSampleSceneInfos SampleSceneMetadata = UncompressSampleSceneMetadata(
			KernelConfig, SampleBufferUV, CompressedSampleSceneMetadata);

		AccumulateSampledMultiplexedSignals(
			KernelConfig,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			RefSceneMetadata,
			SampleBufferUV,
			SampleSceneMetadata,
			MultiplexedSamples,
			MultiplexedFrequencies,
			 1.0,
			 true,
			bIsOutsideFrustum);
		
		BroadcastAccumulateSquare3x3KernelCenter(
			KernelConfig,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			RefSceneMetadata,
			SampleBufferUV,
			SampleSceneMetadata,
			MultiplexedSamples,
			MultiplexedFrequencies);
	}

	
	uint2 OutputPixelPostion = BufferUVToBufferPixelCoord(KernelConfig.RefBufferUV);
	bool bFlipX = (OutputPixelPostion.x & 0x1) != 0;
	bool bFlipY = (OutputPixelPostion.y & 0x1) != 0;

	if (KernelConfig.SampleSet == 2 || KernelConfig.SampleSet == 6)
	{
		float2 SampleOffset = float2(bFlipX ? 1.0 : -1.0, bFlipY ? 1.0 : -1.0);

		float2 SampleBufferUV = KernelConfig.BufferUV + SampleOffset * KernelConfig.BufferSizeAndInvSize.zw;

		SampleAndAccumulateMultiplexedSignals(
			KernelConfig,
			SignalBuffer0,
			SignalBuffer1,
			SignalBuffer2,
			SignalBuffer3,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			SampleBufferUV,
			 1.0,
			 false);
	}

	static const float2 SampleOffsetArray[4] = {
		float2(-1.0,  0.0),
		float2( 0.0, -1.0),
		float2(-1.0, 1.0),
		float2( 1.0, -1.0),
	};
		
	[unroll]
	for (
		uint BatchId = (KernelConfig.SampleSet == 6 ? 1 : 0);
		BatchId < (KernelConfig.SampleSet == 5 ? 1 : 2);
		BatchId++)
	 
	{
		
		float2 SampleOffset0 =  select_internal( bool2(bFlipX, bFlipY) , -SampleOffsetArray[BatchId * 2 + 0] , SampleOffsetArray[BatchId * 2 + 0] );
		float2 SampleOffset1 =  select_internal( bool2(bFlipX, bFlipY) , -SampleOffsetArray[BatchId * 2 + 1] , SampleOffsetArray[BatchId * 2 + 1] );
	
		float2 SampleBufferUV[2];
		SampleBufferUV[0] = KernelConfig.BufferUV + SampleOffset0 * KernelConfig.BufferSizeAndInvSize.zw;
		SampleBufferUV[1] = KernelConfig.BufferUV + SampleOffset1 * KernelConfig.BufferSizeAndInvSize.zw;

		SampleAndAccumulateMultiplexedSignalsPair(
			KernelConfig,
			SignalBuffer0,
			SignalBuffer1,
			SignalBuffer2,
			SignalBuffer3,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			SampleBufferUV,
			 1.0);
	}
}

#line 2659 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void AccumulateRefSampleAsKernelCenter(
	FSSDKernelConfig KernelConfig,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators,
	float2 RefBufferUV,
	FSSDSampleSceneInfos RefSceneMetadata,
	FSSDSignalArray RefMultiplexedSamples,
	FSSDSignalFrequencyArray RefMultiplexedFrequencies)
{
	if (!KernelConfig.bSampleKernelCenter)
	{
		AccumulateSampledMultiplexedSignals(
			KernelConfig,
			 UncompressedAccumulators,
			 CompressedAccumulators,
			RefSceneMetadata,
			RefBufferUV,
			RefSceneMetadata,
			RefMultiplexedSamples,
			RefMultiplexedFrequencies,
			 1.0,
			 true,
			 false);
		
		if (KernelConfig.SampleSet == 0xDEADDEAD)
		{
		}

		else if (KernelConfig.SampleSet == 2 ||
			KernelConfig.SampleSet == 5 ||
			KernelConfig.SampleSet == 6)
		{
			BroadcastAccumulateSquare3x3KernelCenter(
				KernelConfig,
				 UncompressedAccumulators,
				 CompressedAccumulators,
				RefSceneMetadata,
				RefBufferUV,
				RefSceneMetadata,
				RefMultiplexedSamples,
				RefMultiplexedFrequencies);
		}

	}
}

#line 2705 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"
void AccumulateKernel(
	FSSDKernelConfig KernelConfig,
	Texture2D SignalBuffer0,
	Texture2D SignalBuffer1,
	Texture2D SignalBuffer2,
	Texture2D SignalBuffer3,
	inout FSSDSignalAccumulatorArray UncompressedAccumulators,
	inout FSSDCompressedSignalAccumulatorArray CompressedAccumulators)
{
	if (KernelConfig.SampleSet == 0xDEADDEAD)
	{
	}

	else if (KernelConfig.SampleSet == 0)
	{
		if (KernelConfig.bSampleKernelCenter)
		{
			SampleAndAccumulateCenterSampleAsItsOwnCluster(
				KernelConfig,
				SignalBuffer0,
				SignalBuffer1,
				SignalBuffer2,
				SignalBuffer3,
				 UncompressedAccumulators,
				 CompressedAccumulators);
		}
	}
	else if (
		KernelConfig.SampleSet == 1 ||
		KernelConfig.SampleSet == 13 ||
		KernelConfig.SampleSet == 17)
	{
		AccumulateBilinear2x2Kernel(
			KernelConfig,
			SignalBuffer0,
			SignalBuffer1,
			SignalBuffer2,
			SignalBuffer3,
			 UncompressedAccumulators,
			 CompressedAccumulators);
	}
	else if (
		KernelConfig.SampleSet == 2 ||
		KernelConfig.SampleSet == 5 ||
		KernelConfig.SampleSet == 6)
	{
		AccumulateSquare3x3Kernel(
			KernelConfig,
			SignalBuffer0,
			SignalBuffer1,
			SignalBuffer2,
			SignalBuffer3,
			 UncompressedAccumulators,
			 CompressedAccumulators);
	}
	else if (
		KernelConfig.SampleSet == 3 ||
		KernelConfig.SampleSet == 4 ||
		KernelConfig.SampleSet == 7)
	{
		AccumulateSquareKernel(
			KernelConfig,
			SignalBuffer0,
			SignalBuffer1,
			SignalBuffer2,
			SignalBuffer3,
			 UncompressedAccumulators,
			 CompressedAccumulators);
	}

#line 2787 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"

#line 2800 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"

#line 2813 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"

#line 2826 "/Engine/Private/ScreenSpaceDenoise/SSDSpatialKernel.ush"

}

#line 387 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
Texture2D SignalInput_Textures_0;

#line 390 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
Texture2D SignalInput_Textures_1;

#line 439 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
Texture2D PrevHistory_Textures_0;

#line 440 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
RWTexture2D<float4> 	SignalHistoryOutput_UAVs_0;

#line 443 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
Texture2D PrevHistory_Textures_1;

#line 444 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
RWTexture2D<float4> 	SignalHistoryOutput_UAVs_1;

#line 469 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
FSSDSignalSample TransformInputBufferForPreRejection(FSSDSignalSample Sample)
{
	return TransformSignal(
		Sample,
		 0x0,
		 0x0);
}

#line 477 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
FSSDSignalSample TransformSignalForPostRejection(FSSDSignalSample Sample)
{
	return TransformSignal(
		Sample,
		 0x0,
		 0x0);
}

#line 486 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
void TemporallyAccumulate(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	
	float2 SceneBufferUV = DispatchThreadId * ThreadIdToBufferUV.xy + ThreadIdToBufferUV.zw;
	if (true)
	{
		SceneBufferUV = clamp(SceneBufferUV, DenoiserBufferBilinearUVMinMax.xy, DenoiserBufferBilinearUVMinMax.zw);
	}

	
	FSSDCompressedSceneInfos CompressedRefSceneMetadata = SampleCompressedSceneMetadata(
		 false,
		SceneBufferUV, BufferUVToBufferPixelCoord(SceneBufferUV));

	float DeviceZ;
	uint ShadingModelID;
	{
		FSSDSampleSceneInfos RefInfo = UncompressSampleSceneInfo(
			0,  false,
			DenoiserBufferUVToScreenPosition(SceneBufferUV),
			CompressedRefSceneMetadata);

		DeviceZ = RefInfo.DeviceZ;
		ShadingModelID = RefInfo.ShadingModelID;
	}

	
	float3 HistoryScreenPosition = float3(DenoiserBufferUVToScreenPosition(SceneBufferUV), DeviceZ);
	bool bIsDynamicPixel = false;
	if (1)
	{

		float4 ThisClip = float4(HistoryScreenPosition, 1);

		float4 PrevClip = mul(ThisClip, View.ClipToPrevClip);
		float3 PrevScreen = PrevClip.xyz * rcp(PrevClip.w);
		float3 Velocity = HistoryScreenPosition - PrevScreen;

		if (1)
		{
			float4 EncodedVelocity = GBufferVelocityTexture.SampleLevel( D3DStaticPointClampedSampler, SceneBufferUV, 0);
			bIsDynamicPixel = EncodedVelocity.x > 0.0;

			if (bIsDynamicPixel)
			{
				Velocity = DecodeVelocityFromTexture(EncodedVelocity);
			}
		}

		HistoryScreenPosition -= Velocity;
	}


	FSSDSignalArray CurrentFrameSamples;
	FSSDSignalFrequencyArray CurrentFrameFrequencies;
	SampleMultiplexedSignals(
		SignalInput_Textures_0,
		SignalInput_Textures_1,
		SignalInput_Textures_0,
		SignalInput_Textures_0,
		 D3DStaticPointClampedSampler,
		0xD301,
		 0,
		 0 != 0,
		SceneBufferUV,
		 CurrentFrameSamples,
		 CurrentFrameFrequencies);

	
	FSSDSignalArray HistorySamples = CreateSignalArrayFromScalarValue(0.0);
	{
		float2 HistoryBufferUV = HistoryScreenPosition.xy * ScreenPosToHistoryBufferUV.xy + ScreenPosToHistoryBufferUV.zw;
		float2 ClampedHistoryBufferUV = clamp(HistoryBufferUV, HistoryBufferUVMinMax.xy, HistoryBufferUVMinMax.zw);
		bool bIsPreviousFrameOffscreen = any(HistoryBufferUV != ClampedHistoryBufferUV);

		
		[branch]
		if (!bIsPreviousFrameOffscreen)
		{
			FSSDKernelConfig KernelConfig = CreateKernelConfig();

			





			
			
			KernelConfig.SampleSet = 13;
			
			KernelConfig.bSampleKernelCenter = true;
			KernelConfig.BufferLayout = 0xD301;
			KernelConfig.MultiplexedSignalsPerSignalDomain = 1;
			KernelConfig.bUnroll = true;
			KernelConfig.bPreviousFrameMetadata = true;
			KernelConfig.BilateralDistanceComputation = 2;
			KernelConfig.bClampUVPerMultiplexedSignal = 0 != 0;

			
			KernelConfig.WorldBluringDistanceMultiplier = max(3.0, 3.0);
			
			SetBilateralPreset(0x2001,  KernelConfig);

			
			KernelConfig.BufferSizeAndInvSize = HistoryBufferSizeAndInvSize;
			KernelConfig.BufferBilinearUVMinMax = HistoryBufferUVMinMax;
			
			









			
			
			KernelConfig.BufferUV = HistoryBufferUV + BufferUVBilinearCorrection;
			KernelConfig.bIsDynamicPixel = bIsDynamicPixel;

			
#line 637 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"

			{
				KernelConfig.CompressedRefSceneMetadata = CompressedRefSceneMetadata;
				KernelConfig.RefBufferUV = SceneBufferUV;
				KernelConfig.RefSceneMetadataLayout = 0;
			}
			


			
			 
			{
				KernelConfig.Randoms[0] = InterleavedGradientNoise(SceneBufferUV * BufferUVToOutputPixelPosition, View.StateFrameIndexMod8);
			}
			
			FSSDSignalAccumulatorArray SignalAccumulators = CreateSignalAccumulatorArray();
			FSSDCompressedSignalAccumulatorArray UnusedCompressedAccumulators = CreateUninitialisedCompressedAccumulatorArray();

			AccumulateKernel(
				KernelConfig,
				PrevHistory_Textures_0,
				PrevHistory_Textures_1,
				PrevHistory_Textures_0,
				PrevHistory_Textures_0,
				 SignalAccumulators,
				 UnusedCompressedAccumulators);
		
			
			{
				 [unroll( 1 )]
				for (uint BatchedSignalId = 0; BatchedSignalId < 1; BatchedSignalId++)
				{
					HistorySamples.Array[BatchedSignalId] = SignalAccumulators.Array[BatchedSignalId].Moment1;
					[branch]
					if (  bCameraCut [(uint) BatchedSignalId >>2u][(uint) BatchedSignalId &3u])
					{
						HistorySamples.Array[BatchedSignalId] = CreateSignalSampleFromScalarValue(0.0);
					}
				}
			}

			{
				 [unroll( 1 )]
				for (uint BatchedSignalId = 0; BatchedSignalId < 1; BatchedSignalId++)
				{
					FSSDSignalSample CurrentFrameSample = CurrentFrameSamples.Array[BatchedSignalId];
					FSSDSignalSample HistorySample = HistorySamples.Array[BatchedSignalId];

					
					
						HistorySamples.Array[BatchedSignalId].SceneColor.rgb *= HistoryPreExposureCorrection;
					

					






				} 
			}
		} 
	}
	
	




	
	const bool bPostRejectionBlending = true;

	
	
	{
		FSSDKernelConfig KernelConfig = CreateKernelConfig();
		
		






		
		{
			KernelConfig.bSampleKernelCenter = 0 != 0;
		
			
			
			KernelConfig.BilateralDistanceComputation = 0;
			KernelConfig.NeighborToRefComputation = 1;

			
			
			if (6 == 0)
				KernelConfig.BilateralDistanceComputation = 4;
			KernelConfig.WorldBluringDistanceMultiplier = 3.0;
			
			







			{
				KernelConfig.SampleSet = 5;
				KernelConfig.bUnroll = true;
			}
			







			if (0)
			{
				
				KernelConfig.MultiplexedSignalsPerSignalDomain = 2;
				
				KernelConfig.BufferLayout = 0xD301;
				KernelConfig.bNormalizeSample = false;
			
				for (uint MultiplexId = 0; MultiplexId < 1; MultiplexId++)
				{
					KernelConfig.BufferColorSpace[MultiplexId] = 0x0;
					KernelConfig.AccumulatorColorSpace[MultiplexId] = 0x0;
				}

				
				KernelConfig.bForceKernelCenterAccumulation = true;
			}
			else
			{
				KernelConfig.MultiplexedSignalsPerSignalDomain = 1;
				KernelConfig.BufferLayout = 0xD301;
				KernelConfig.bNormalizeSample = true;
			
				for (uint MultiplexId = 0; MultiplexId < 1; MultiplexId++)
				{
					KernelConfig.AccumulatorColorSpace[MultiplexId] = 0x0;
				}
			
				if (1 == 1)
				{
					
					KernelConfig.bForceAllAccumulation = CurrentFrameSamples.Array[0].SampleCount == 0;
				}
			}
			
			SetBilateralPreset(0x2001,  KernelConfig);
		}

		
		{
			KernelConfig.BufferSizeAndInvSize = DenoiserBufferSizeAndInvSize;
			KernelConfig.BufferBilinearUVMinMax = DenoiserBufferBilinearUVMinMax;
		}

		
		{
			KernelConfig.BufferUV = SceneBufferUV;
			{
				KernelConfig.CompressedRefSceneMetadata = CompressedRefSceneMetadata;
				KernelConfig.RefBufferUV = SceneBufferUV;
				KernelConfig.RefSceneMetadataLayout = 0;
			}
		}

		
		FSSDSignalAccumulatorArray SignalAccumulators = CreateSignalAccumulatorArray();
		{
			FSSDSampleSceneInfos RefSceneMetadata = UncompressRefSceneMetadata(KernelConfig);
			
			FSSDCompressedSignalAccumulatorArray UnusedCompressedAccumulators = CreateUninitialisedCompressedAccumulatorArray();

			FSSDSignalArray CenterSample = CurrentFrameSamples;
			if (KernelConfig.bNormalizeSample)
			{
				CenterSample = NormalizeToOneSampleArray(CurrentFrameSamples);
			}

			AccumulateRefSampleAsKernelCenter(
				KernelConfig,
				 SignalAccumulators,
				 UnusedCompressedAccumulators,
				KernelConfig.RefBufferUV,
				RefSceneMetadata,
				CenterSample,
				CurrentFrameFrequencies);
		}

		{
			FSSDCompressedSignalAccumulatorArray UnusedCompressedAccumulators = CreateUninitialisedCompressedAccumulatorArray();

			









				AccumulateKernel(
					KernelConfig,
					SignalInput_Textures_0,
					SignalInput_Textures_1,
					SignalInput_Textures_0,
					SignalInput_Textures_0,
					 SignalAccumulators,
					 UnusedCompressedAccumulators);
			
		}

		
		 [unroll( 1 )]
		for (uint BatchedSignalId = 0; BatchedSignalId < 1; BatchedSignalId++)
		{
			FSSDSignalSample NeighborMoment1 = CreateSignalSampleFromScalarValue(0.0);
			FSSDSignalSample NeighborMoment2 = CreateSignalSampleFromScalarValue(0.0);
			
			{
				float NormalizeFactor = SafeRcp(SignalAccumulators.Array[BatchedSignalId].Moment1.SampleCount);
				NeighborMoment1 = MulSignal(SignalAccumulators.Array[BatchedSignalId].Moment1, NormalizeFactor);
				
				
					NeighborMoment2 = MulSignal(SignalAccumulators.Array[BatchedSignalId].Moment2, NormalizeFactor);
				
			}
			
#line 885 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"

		
			





				
			FSSDSignalSample CurrentFrameSample = CurrentFrameSamples.Array[BatchedSignalId];
			FSSDSignalSample HistorySample = HistorySamples.Array[BatchedSignalId];

			
			
			{
				


					const float StdDevMultiplier = 1.25;
				

				
				FSSDSignalSample StdDev = SqrtSignal(AbsSignal(SubtractSignal(NeighborMoment2, PowerSignal(NeighborMoment1, 2))));
				FSSDSignalSample NeighborMin = AddSignal(NeighborMoment1, MulSignal(StdDev, -StdDevMultiplier));
				FSSDSignalSample NeighborMax = AddSignal(NeighborMoment1, MulSignal(StdDev,  StdDevMultiplier));

				if (0)
				{
					FSSDSignalSample QuantizationErrorMin = MulSignal(NeighborMoment1, 1 - SafeRcp(HistorySample.SampleCount));
					FSSDSignalSample QuantizationErrorMax = MulSignal(NeighborMoment1, 1 + SafeRcp(HistorySample.SampleCount));

					NeighborMin = MinSignal(NeighborMin, QuantizationErrorMin);
					NeighborMax = MaxSignal(NeighborMax, QuantizationErrorMax);
				}

				
				FSSDSignalSample NormalizedHistorySample = NormalizeToOneSample(HistorySample);
				FSSDSignalSample TransformedHistorySample = TransformInputBufferForPreRejection(NormalizedHistorySample);

				
				FSSDSignalSample ClampedTransformedHistorySample = ClampSignal(TransformedHistorySample, NeighborMin, NeighborMax);

				
				FSSDSignalSample ClampedHistorySample = TransformSignalForPostRejection(ClampedTransformedHistorySample);

				
				{
					FSSDSignalSample RejectedDiff = AbsSignal(SubtractSignal(ClampedTransformedHistorySample, TransformedHistorySample));

					
					float RejectionFactor = 0.0;
					
#line 952 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"

					{
						
						
						
						
						
						RejectionFactor = abs(ClampedTransformedHistorySample.MissCount - TransformedHistorySample.MissCount);
					}
					


			
					
					float FinalHistoryWeight = HistorySample.SampleCount * saturate(1 - RejectionFactor);

					
					if (!bPostRejectionBlending)
					{
						FinalHistoryWeight = max(FinalHistoryWeight, CurrentFrameSample.SampleCount);
					}

					
					FinalHistoryWeight = max(FinalHistoryWeight, NeighborMoment1.SampleCount * 0.1);








					
					HistorySample = MulSignal(ClampedHistorySample, FinalHistoryWeight);
					HistorySample.SampleCount = FinalHistoryWeight;
				}
			}
			
#line 1035 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"


			
			if (1)
			{
				CurrentFrameFrequencies.Array[BatchedSignalId] = MinSignalFrequency(
					CurrentFrameFrequencies.Array[BatchedSignalId],
					SignalAccumulators.Array[BatchedSignalId].MinFrequency);
			}
			
			HistorySamples.Array[BatchedSignalId] = HistorySample;
			CurrentFrameSamples.Array[BatchedSignalId] = CurrentFrameSample;
		} 
	}
	
	
	{
		[unroll]
		for (uint BatchedSignalId = 0; BatchedSignalId < 1; BatchedSignalId++)
		{
			FSSDSignalSample CurrentFrameSample = CurrentFrameSamples.Array[BatchedSignalId];
			FSSDSignalSample HistorySample = HistorySamples.Array[BatchedSignalId];
			FSSDSignalFrequency CurrentFrequency = CurrentFrameFrequencies.Array[BatchedSignalId];

			float TargetedSampleCount;
			{
				float2 ScreenPosition = DenoiserBufferUVToScreenPosition(SceneBufferUV);
	
				FSSDSampleSceneInfos RefSceneMetadata = UncompressSampleSceneInfo(
					0,  false,
					ScreenPosition, CompressedRefSceneMetadata);

				
				float PixelWorldBluringRadius = ComputeWorldBluringRadiusCausedByPixelSize(RefSceneMetadata);
				float WorldBluringRadius = WorldBluringRadiusToBilateralWorldDistance(PixelWorldBluringRadius);
	
				
#line 1099 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"

				{
					TargetedSampleCount = 128;
				}
				
			}

			float PreviousFrameWeight = min(HistorySample.SampleCount, TargetedSampleCount - CurrentFrameSample.SampleCount);
			float PreviousFrameMultiplier = HistorySample.SampleCount > 0 ? PreviousFrameWeight / HistorySample.SampleCount : 0;

			
			
			HistorySample = TransformSignal(
				HistorySample,
				 0x0,
				 0x0);
			CurrentFrameSample = TransformSignal(
				CurrentFrameSample,
				 0x0,
				 0x0);

			
			HistorySample = AddSignal(MulSignal(HistorySample, PreviousFrameMultiplier), CurrentFrameSample);
		
			
			HistorySample = TransformSignal(
				HistorySample,
				 0x0,
				 0x0);

			
			HistorySamples.Array[BatchedSignalId] = HistorySample;
		}
	}

	
	
	
	
	uint MultiplexCount = 1;
	FSSDSignalArray OutputSamples = CreateSignalArrayFromScalarValue(0.0);
	FSSDSignalFrequencyArray OutputFrequencies = CreateInvalidSignalFrequencyArray();
	{
		MultiplexCount = 1;
		
		[unroll]
		for (uint BatchedSignalId = 0; BatchedSignalId < MultiplexCount; BatchedSignalId++)
		{
			OutputSamples.Array[BatchedSignalId] = HistorySamples.Array[BatchedSignalId];
			OutputFrequencies.Array[BatchedSignalId] = CurrentFrameFrequencies.Array[BatchedSignalId];
		}
	}
	
	
	uint2 OutputPixelPostion = BufferUVToBufferPixelCoord(SceneBufferUV);
		
	[branch]
	if (all(OutputPixelPostion < ViewportMax))
	{
		OutputMultiplexedSignal(
			SignalHistoryOutput_UAVs_0,
			SignalHistoryOutput_UAVs_1,
			SignalHistoryOutput_UAVs_0,
			SignalHistoryOutput_UAVs_0,
			0xD301,
			MultiplexCount,
			OutputPixelPostion,
			OutputSamples,
			OutputFrequencies);
	}
}

#line 1174 "/Engine/Private/ScreenSpaceDenoise/SSDTemporalAccumulation.usf"
[numthreads(8, 8, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	TemporallyAccumulate(DispatchThreadId, GroupId, GroupThreadId, GroupThreadIndex);
}



#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 376963194
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 450888449
MobileSceneTextures, 147131313
SceneTexturesStruct, 158338568
Scene, 273683233
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_GlobalDistanceFieldPageAtlasTextureSampler, View, 8, 25
View_GlobalDistanceFieldCoverageAtlasTextureSampler, View, 8, 26
View_GlobalDistanceFieldMipTextureSampler, View, 8, 27
View_AtmosphereTransmittanceTexture, View, 5, 28
View_AtmosphereTransmittanceTextureSampler, View, 8, 29
View_AtmosphereIrradianceTexture, View, 5, 30
View_AtmosphereIrradianceTextureSampler, View, 8, 31
View_AtmosphereInscatterTexture, View, 5, 32
View_AtmosphereInscatterTextureSampler, View, 8, 33
View_PerlinNoiseGradientTexture, View, 5, 34
View_PerlinNoiseGradientTextureSampler, View, 8, 35
View_PerlinNoise3DTexture, View, 5, 36
View_PerlinNoise3DTextureSampler, View, 8, 37
View_SobolSamplingTexture, View, 5, 38
View_SharedPointWrappedSampler, View, 8, 39
View_SharedPointClampedSampler, View, 8, 40
View_SharedBilinearWrappedSampler, View, 8, 41
View_SharedBilinearClampedSampler, View, 8, 42
View_SharedBilinearAnisoClampedSampler, View, 8, 43
View_SharedTrilinearWrappedSampler, View, 8, 44
View_SharedTrilinearClampedSampler, View, 8, 45
View_PreIntegratedBRDF, View, 5, 46
View_PreIntegratedBRDFSampler, View, 8, 47
View_SkyIrradianceEnvironmentMap, View, 6, 48
View_TransmittanceLutTexture, View, 5, 49
View_TransmittanceLutTextureSampler, View, 8, 50
View_SkyViewLutTexture, View, 5, 51
View_SkyViewLutTextureSampler, View, 8, 52
View_DistantSkyLightLutTexture, View, 5, 53
View_DistantSkyLightLutTextureSampler, View, 8, 54
View_CameraAerialPerspectiveVolume, View, 5, 55
View_CameraAerialPerspectiveVolumeSampler, View, 8, 56
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 57
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 58
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 59
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 60
View_HairScatteringLUTTexture, View, 5, 61
View_HairScatteringLUTSampler, View, 8, 62
View_GGXLTCMatTexture, View, 5, 63
View_GGXLTCMatSampler, View, 8, 64
View_GGXLTCAmpTexture, View, 5, 65
View_GGXLTCAmpSampler, View, 8, 66
View_SheenLTCTexture, View, 5, 67
View_SheenLTCSampler, View, 8, 68
View_ShadingEnergyGGXSpecTexture, View, 5, 69
View_ShadingEnergyGGXGlassTexture, View, 5, 70
View_ShadingEnergyClothSpecTexture, View, 5, 71
View_ShadingEnergyDiffuseTexture, View, 5, 72
View_ShadingEnergySampler, View, 8, 73
View_GlintTexture, View, 5, 74
View_GlintSampler, View, 8, 75
View_SimpleVolumeTexture, View, 5, 76
View_SimpleVolumeTextureSampler, View, 8, 77
View_SimpleVolumeEnvTexture, View, 5, 78
View_SimpleVolumeEnvTextureSampler, View, 8, 79
View_SSProfilesTexture, View, 5, 80
View_SSProfilesSampler, View, 8, 81
View_SSProfilesTransmissionSampler, View, 8, 82
View_SSProfilesPreIntegratedTexture, View, 5, 83
View_SSProfilesPreIntegratedSampler, View, 8, 84
View_SpecularProfileTexture, View, 5, 85
View_SpecularProfileSampler, View, 8, 86
View_WaterIndirection, View, 6, 87
View_WaterData, View, 6, 88
View_RectLightAtlasTexture, View, 5, 89
View_RectLightAtlasSampler, View, 8, 90
View_IESAtlasTexture, View, 5, 91
View_IESAtlasSampler, View, 8, 92
View_LandscapeWeightmapSampler, View, 8, 93
View_LandscapeIndirection, View, 6, 94
View_LandscapePerComponentData, View, 6, 95
View_VTFeedbackBuffer, View, 7, 96
View_PhysicsFieldClipmapBuffer, View, 6, 97
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_ScenePartialDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_ScenePartialDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 6
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 8
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 9
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 10
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 14
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 15
MobileSceneTextures_LocalLightTextureA, MobileSceneTextures, 9, 16
MobileSceneTextures_LocalLightTextureB, MobileSceneTextures, 9, 17
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 18
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 19
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 20
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 21
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 22
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_ScenePartialDepthTexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 11
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 12
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 13
Scene_GPUScene_GPUSceneInstanceSceneData, Scene, 16, 0
Scene_GPUScene_GPUSceneInstancePayloadData, Scene, 16, 1
Scene_GPUScene_GPUScenePrimitiveSceneData, Scene, 16, 2
Scene_GPUScene_GPUSceneLightmapData, Scene, 16, 3
Scene_GPUScene_GPUSceneLightData, Scene, 16, 4
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM6 -entry=MainCS -shaderPlatformName=PCD3D_SM6 -cs C:/Users/baleksander1/Workspace/AGA309-Assessment-2/Unreal/A3/Saved/ShaderDebugInfo/PCD3D_SM6/Global/FSSDTemporalAccumulationCS/6/SSDTemporalAccumulation.usf -cflags=9127858208 -nocrashreports
#endif /*DIRECT COMPILE*/
