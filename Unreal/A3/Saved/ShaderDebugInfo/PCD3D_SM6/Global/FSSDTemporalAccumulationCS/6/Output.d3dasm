;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: cd54799890ce9b7338df9bf1e7c7c80c
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       int4 bCameraCut[1];                           ; Offset:    0
;       float HistoryPreExposureCorrection;           ; Offset:   16
;       float4 ScreenPosToHistoryBufferUV;            ; Offset:   32
;       float4 HistoryBufferSizeAndInvSize;           ; Offset:   48
;       float4 HistoryBufferUVMinMax;                 ; Offset:   64
;       float4 HistoryBufferScissorUVMinMax[1];       ; Offset:   80
;       float4 PrevSceneBufferUVToScreenPosition;     ; Offset:  144
;       float4 DenoiserBufferSizeAndInvSize;          ; Offset:  160
;       float4 DenoiserBufferBilinearUVMinMax;        ; Offset:  176
;       float4 SceneBufferUVToScreenPosition;         ; Offset:  192
;       float WorldDepthToPixelWorldRadius;           ; Offset:  208
;       uint2 ViewportMin;                            ; Offset:  224
;       uint2 ViewportMax;                            ; Offset:  232
;       float4 ThreadIdToBufferUV;                    ; Offset:  240
;       float2 BufferUVToOutputPixelPosition;         ; Offset:  256
;       row_major float4x4 ScreenToView;              ; Offset:  272
;       float2 BufferUVBilinearCorrection;            ; Offset:  336
;       uint FrameIndex;                              ; Offset:  496
;       float4 LightPositionAndRadius[1];             ; Offset:  512
;       float4 LightDirectionAndLength[1];            ; Offset:  576
;       float4 HitDistanceToWorldBluringRadius[1];    ; Offset:  640
;       uint4 LightType[1];                           ; Offset:  656
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   672
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; SceneDepthTexture                 texture     f32          2d      T0             t0     1
; GBufferATexture                   texture     f32          2d      T1             t1     1
; GBufferBTexture                   texture     f32          2d      T2             t2     1
; GBufferVelocityTexture            texture     f32          2d      T3             t3     1
; PrevDepthBuffer                   texture     f32          2d      T4             t4     1
; PrevGBufferA                      texture     f32          2d      T5             t5     1
; SignalInput_Textures_0            texture     f32          2d      T6             t6     1
; SignalInput_Textures_1            texture     f32          2d      T7             t7     1
; PrevHistory_Textures_0            texture     f32          2d      T8             t8     1
; PrevHistory_Textures_1            texture     f32          2d      T9             t9     1
; SignalHistoryOutput_UAVs_0            UAV     f32          2d      U0             u0     1
; SignalHistoryOutput_UAVs_1            UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [1 x <4 x i32>], float, <4 x float>, <4 x float>, <4 x float>, [1 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, <4 x float>, float, <2 x i32>, <2 x i32>, <4 x float>, <2 x float>, [4 x <4 x float>], <2 x float>, i32, [1 x <4 x float>], [1 x <4 x float>], [1 x <4 x float>], [1 x <4 x i32>] }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%struct.SamplerState = type { i32 }

define void @MainCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %17 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 13, i32 672 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %18 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %19 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %20 = uitofp i32 %18 to float
  %21 = uitofp i32 %19 to float
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 0
  %24 = extractvalue %dx.types.CBufRet.f32 %22, 1
  %25 = fmul fast float %23, %20
  %26 = fmul fast float %24, %21
  %27 = extractvalue %dx.types.CBufRet.f32 %22, 2
  %28 = extractvalue %dx.types.CBufRet.f32 %22, 3
  %29 = fadd fast float %25, %27
  %30 = fadd fast float %26, %28
  %31 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.f32 %31, 2
  %33 = extractvalue %dx.types.CBufRet.f32 %31, 3
  %34 = extractvalue %dx.types.CBufRet.f32 %31, 0
  %35 = extractvalue %dx.types.CBufRet.f32 %31, 1
  %36 = call float @dx.op.binary.f32(i32 35, float %29, float %34)  ; FMax(a,b)
  %37 = call float @dx.op.binary.f32(i32 35, float %30, float %35)  ; FMax(a,b)
  %38 = call float @dx.op.binary.f32(i32 36, float %36, float %32)  ; FMin(a,b)
  %39 = call float @dx.op.binary.f32(i32 36, float %37, float %33)  ; FMin(a,b)
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %42 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %40, %dx.types.Handle %41, float %38, float %39, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %43 = extractvalue %dx.types.ResRet.f32 %42, 0
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %46 = fmul fast float %45, %43
  %47 = extractvalue %dx.types.CBufRet.f32 %44, 1
  %48 = fadd fast float %46, %47
  %49 = extractvalue %dx.types.CBufRet.f32 %44, 2
  %50 = fmul fast float %49, %43
  %51 = extractvalue %dx.types.CBufRet.f32 %44, 3
  %52 = fsub fast float %50, %51
  %53 = fdiv fast float 1.000000e+00, %52
  %54 = fadd fast float %48, %53
  %55 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %56 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %55, %dx.types.Handle %41, float %38, float %39, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %57 = extractvalue %dx.types.ResRet.f32 %56, 0
  %58 = extractvalue %dx.types.ResRet.f32 %56, 1
  %59 = extractvalue %dx.types.ResRet.f32 %56, 2
  %60 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %61 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %41, float %38, float %39, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %62 = extractvalue %dx.types.ResRet.f32 %61, 2
  %63 = fmul fast float %57, 2.000000e+00
  %64 = fmul fast float %58, 2.000000e+00
  %65 = fmul fast float %59, 2.000000e+00
  %66 = fadd fast float %63, -1.000000e+00
  %67 = fadd fast float %64, -1.000000e+00
  %68 = fadd fast float %65, -1.000000e+00
  %69 = call float @dx.op.dot3.f32(i32 55, float %66, float %67, float %68, float %66, float %67, float %68)  ; Dot3(ax,ay,az,bx,by,bz)
  %70 = call float @dx.op.unary.f32(i32 25, float %69)  ; Rsqrt(value)
  %71 = fmul fast float %70, %66
  %72 = fmul fast float %70, %67
  %73 = fmul fast float %70, %68
  %74 = bitcast float %54 to i32
  %75 = bitcast float %71 to i32
  %76 = bitcast float %72 to i32
  %77 = bitcast float %73 to i32
  %78 = bitcast float %62 to i32
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 3
  %81 = bitcast float %80 to i32
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %89, label %83, !dx.controlflow.hints !29

; <label>:83                                      ; preds = %0
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %86 = fmul fast float %85, %54
  %87 = extractvalue %dx.types.CBufRet.f32 %79, 2
  %88 = fadd fast float %86, %87
  br label %93

; <label>:89                                      ; preds = %0
  %90 = fadd fast float %51, %54
  %91 = fmul fast float %90, %49
  %92 = fdiv fast float 1.000000e+00, %91
  br label %93

; <label>:93                                      ; preds = %89, %83
  %94 = phi float [ %88, %83 ], [ %92, %89 ]
  %95 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.f32 %95, 0
  %97 = extractvalue %dx.types.CBufRet.f32 %95, 1
  %98 = fmul fast float %96, %38
  %99 = fmul fast float %97, %39
  %100 = extractvalue %dx.types.CBufRet.f32 %95, 2
  %101 = extractvalue %dx.types.CBufRet.f32 %95, 3
  %102 = fadd fast float %98, %100
  %103 = fadd fast float %99, %101
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 113)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %107 = extractvalue %dx.types.CBufRet.f32 %104, 3
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 114)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 0
  %110 = extractvalue %dx.types.CBufRet.f32 %108, 1
  %111 = extractvalue %dx.types.CBufRet.f32 %108, 3
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 115)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 3
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 116)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 3
  %120 = fmul fast float %102, %105
  %121 = call float @dx.op.tertiary.f32(i32 46, float %103, float %109, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.tertiary.f32(i32 46, float %94, float %113, float %121)  ; FMad(a,b,c)
  %123 = fadd fast float %122, %117
  %124 = fmul fast float %102, %106
  %125 = call float @dx.op.tertiary.f32(i32 46, float %103, float %110, float %124)  ; FMad(a,b,c)
  %126 = call float @dx.op.tertiary.f32(i32 46, float %94, float %114, float %125)  ; FMad(a,b,c)
  %127 = fadd fast float %126, %118
  %128 = fmul fast float %102, %107
  %129 = call float @dx.op.tertiary.f32(i32 46, float %103, float %111, float %128)  ; FMad(a,b,c)
  %130 = call float @dx.op.tertiary.f32(i32 46, float %94, float %115, float %129)  ; FMad(a,b,c)
  %131 = fadd fast float %130, %119
  %132 = fdiv fast float 1.000000e+00, %131
  %133 = fmul fast float %132, %123
  %134 = fmul fast float %132, %127
  %135 = fsub fast float %102, %133
  %136 = fsub fast float %103, %134
  %137 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %138 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %137, %dx.types.Handle %41, float %38, float %39, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %139 = extractvalue %dx.types.ResRet.f32 %138, 0
  %140 = fcmp fast ogt float %139, 0.000000e+00
  br i1 %140, label %141, label %155

; <label>:141                                     ; preds = %93
  %142 = extractvalue %dx.types.ResRet.f32 %138, 1
  %143 = fmul fast float %139, 0x4010083560000000
  %144 = fmul fast float %142, 0x4010083560000000
  %145 = fadd fast float %143, 0xC000082560000000
  %146 = fadd fast float %144, 0xC000082560000000
  %147 = call float @dx.op.unary.f32(i32 6, float %145)  ; FAbs(value)
  %148 = call float @dx.op.unary.f32(i32 6, float %146)  ; FAbs(value)
  %149 = fmul fast float %139, 0x4000083560000000
  %150 = fadd fast float %149, 0xBFF0082560000000
  %151 = fmul fast float %150, %147
  %152 = fmul fast float %142, 0x4000083560000000
  %153 = fadd fast float %152, 0xBFF0082560000000
  %154 = fmul fast float %153, %148
  br label %155

; <label>:155                                     ; preds = %141, %93
  %156 = phi float [ %151, %141 ], [ %135, %93 ]
  %157 = phi float [ %154, %141 ], [ %136, %93 ]
  %158 = fsub fast float %102, %156
  %159 = fsub fast float %103, %157
  %160 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %161 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %160, %dx.types.Handle %41, float %38, float %39, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %162 = extractvalue %dx.types.ResRet.f32 %161, 0
  %163 = extractvalue %dx.types.ResRet.f32 %161, 1
  %164 = extractvalue %dx.types.ResRet.f32 %161, 2
  %165 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %166 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %165, %dx.types.Handle %41, float %38, float %39, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %167 = extractvalue %dx.types.ResRet.f32 %166, 0
  %168 = extractvalue %dx.types.ResRet.f32 %166, 1
  %169 = fmul fast float %168, 6.400000e+01
  %170 = fmul fast float %169, %167
  %171 = fmul fast float %169, %162
  %172 = fmul fast float %169, %163
  %173 = fmul fast float %169, %164
  %174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %175 = extractvalue %dx.types.CBufRet.f32 %174, 0
  %176 = extractvalue %dx.types.CBufRet.f32 %174, 1
  %177 = fmul fast float %175, %158
  %178 = fmul fast float %176, %159
  %179 = extractvalue %dx.types.CBufRet.f32 %174, 2
  %180 = extractvalue %dx.types.CBufRet.f32 %174, 3
  %181 = fadd fast float %177, %179
  %182 = fadd fast float %178, %180
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 2
  %185 = extractvalue %dx.types.CBufRet.f32 %183, 3
  %186 = extractvalue %dx.types.CBufRet.f32 %183, 0
  %187 = extractvalue %dx.types.CBufRet.f32 %183, 1
  %188 = call float @dx.op.binary.f32(i32 35, float %181, float %186)  ; FMax(a,b)
  %189 = call float @dx.op.binary.f32(i32 35, float %182, float %187)  ; FMax(a,b)
  %190 = call float @dx.op.binary.f32(i32 36, float %188, float %184)  ; FMin(a,b)
  %191 = call float @dx.op.binary.f32(i32 36, float %189, float %185)  ; FMin(a,b)
  %192 = fcmp fast une float %181, %190
  %193 = fcmp fast une float %182, %191
  %194 = or i1 %192, %193
  br i1 %194, label %427, label %195, !dx.controlflow.hints !30

; <label>:195                                     ; preds = %155
  %196 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %197 = extractvalue %dx.types.CBufRet.f32 %196, 0
  %198 = extractvalue %dx.types.CBufRet.f32 %196, 1
  %199 = extractvalue %dx.types.CBufRet.f32 %196, 2
  %200 = extractvalue %dx.types.CBufRet.f32 %196, 3
  %201 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %202 = extractvalue %dx.types.CBufRet.f32 %201, 0
  %203 = extractvalue %dx.types.CBufRet.f32 %201, 1
  %204 = fadd fast float %202, %181
  %205 = fadd fast float %203, %182
  %206 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %16, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.i32 %206, 1
  %208 = uitofp i32 %207 to float
  %209 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %210 = extractvalue %dx.types.CBufRet.f32 %209, 0
  %211 = extractvalue %dx.types.CBufRet.f32 %209, 1
  %212 = fmul fast float %210, %38
  %213 = fmul fast float %211, %39
  %214 = fmul fast float %208, 0x4040551EC0000000
  %215 = fmul fast float %208, 0x4027A147A0000000
  %216 = fadd fast float %212, %214
  %217 = fadd fast float %213, %215
  %218 = call float @dx.op.dot2.f32(i32 54, float %216, float %217, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %219 = call float @dx.op.unary.f32(i32 22, float %218)  ; Frc(value)
  %220 = fmul fast float %219, 0x404A7DD040000000
  %221 = call float @dx.op.unary.f32(i32 22, float %220)  ; Frc(value)
  %222 = fmul fast float %204, %197
  %223 = fmul fast float %205, %198
  %224 = fadd fast float %222, -5.000000e-01
  %225 = fadd fast float %223, -5.000000e-01
  %226 = call float @dx.op.unary.f32(i32 27, float %224)  ; Round_ni(value)
  %227 = call float @dx.op.unary.f32(i32 27, float %225)  ; Round_ni(value)
  %228 = call float @dx.op.unary.f32(i32 22, float %224)  ; Frc(value)
  %229 = call float @dx.op.unary.f32(i32 22, float %225)  ; Frc(value)
  %230 = fsub fast float 1.000000e+00, %228
  %231 = fsub fast float 1.000000e+00, %229
  %232 = fmul fast float %231, %230
  %233 = fcmp fast ogt float %221, %232
  %234 = fcmp fast ogt float %221, %231
  %235 = fmul fast float %230, %229
  %236 = fadd fast float %231, %235
  %237 = fcmp fast ogt float %221, %236
  %238 = or i1 %234, %237
  %239 = select i1 %233, float 1.500000e+00, float 5.000000e-01
  %240 = select i1 %234, float 5.000000e-01, float %239
  %241 = select i1 %237, float 1.500000e+00, float %240
  %242 = select i1 %238, float 1.500000e+00, float 5.000000e-01
  %243 = fadd fast float %241, %226
  %244 = fadd fast float %242, %227
  %245 = fmul fast float %243, %199
  %246 = fmul fast float %244, %200
  %247 = fcmp fast ogt float %245, %184
  %248 = fcmp fast ogt float %246, %185
  %249 = fcmp fast olt float %245, %186
  %250 = fcmp fast olt float %246, %187
  %251 = or i1 %249, %247
  %252 = or i1 %250, %248
  %253 = or i1 %251, %252
  %254 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %255 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %254, %dx.types.Handle %41, float %245, float %246, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %256 = extractvalue %dx.types.ResRet.f32 %255, 0
  %257 = fmul fast float %45, %256
  %258 = fadd fast float %257, %47
  %259 = fmul fast float %49, %256
  %260 = fsub fast float %259, %51
  %261 = fdiv fast float 1.000000e+00, %260
  %262 = fadd fast float %258, %261
  %263 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %264 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %263, %dx.types.Handle %41, float %245, float %246, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %265 = extractvalue %dx.types.ResRet.f32 %264, 0
  %266 = extractvalue %dx.types.ResRet.f32 %264, 1
  %267 = extractvalue %dx.types.ResRet.f32 %264, 2
  %268 = fmul fast float %265, 2.000000e+00
  %269 = fmul fast float %266, 2.000000e+00
  %270 = fmul fast float %267, 2.000000e+00
  %271 = fadd fast float %268, -1.000000e+00
  %272 = fadd fast float %269, -1.000000e+00
  %273 = fadd fast float %270, -1.000000e+00
  %274 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %275 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %274, %dx.types.Handle %41, float %245, float %246, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %276 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %277 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %276, %dx.types.Handle %41, float %245, float %246, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %278 = extractvalue %dx.types.ResRet.f32 %277, 1
  %279 = fmul fast float %278, 6.400000e+01
  %280 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %281 = extractvalue %dx.types.CBufRet.f32 %280, 0
  %282 = extractvalue %dx.types.CBufRet.f32 %280, 1
  %283 = fmul fast float %281, %38
  %284 = fmul fast float %282, %39
  %285 = extractvalue %dx.types.CBufRet.f32 %280, 2
  %286 = extractvalue %dx.types.CBufRet.f32 %280, 3
  %287 = fadd fast float %283, %285
  %288 = fadd fast float %284, %286
  %289 = fcmp fast olt float %80, 1.000000e+00
  %290 = select i1 %289, float %54, float 1.000000e+00
  %291 = fmul fast float %290, %287
  %292 = fmul fast float %290, %288
  %293 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %294 = extractvalue %dx.types.CBufRet.f32 %293, 0
  %295 = extractvalue %dx.types.CBufRet.f32 %293, 1
  %296 = extractvalue %dx.types.CBufRet.f32 %293, 2
  %297 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %298 = extractvalue %dx.types.CBufRet.f32 %297, 0
  %299 = extractvalue %dx.types.CBufRet.f32 %297, 1
  %300 = extractvalue %dx.types.CBufRet.f32 %297, 2
  %301 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %302 = extractvalue %dx.types.CBufRet.f32 %301, 0
  %303 = extractvalue %dx.types.CBufRet.f32 %301, 1
  %304 = extractvalue %dx.types.CBufRet.f32 %301, 2
  %305 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %306 = extractvalue %dx.types.CBufRet.f32 %305, 0
  %307 = extractvalue %dx.types.CBufRet.f32 %305, 1
  %308 = extractvalue %dx.types.CBufRet.f32 %305, 2
  %309 = fmul fast float %291, %294
  %310 = call float @dx.op.tertiary.f32(i32 46, float %292, float %298, float %309)  ; FMad(a,b,c)
  %311 = call float @dx.op.tertiary.f32(i32 46, float %54, float %302, float %310)  ; FMad(a,b,c)
  %312 = fmul fast float %291, %295
  %313 = call float @dx.op.tertiary.f32(i32 46, float %292, float %299, float %312)  ; FMad(a,b,c)
  %314 = call float @dx.op.tertiary.f32(i32 46, float %54, float %303, float %313)  ; FMad(a,b,c)
  %315 = fmul fast float %291, %296
  %316 = call float @dx.op.tertiary.f32(i32 46, float %292, float %300, float %315)  ; FMad(a,b,c)
  %317 = call float @dx.op.tertiary.f32(i32 46, float %54, float %304, float %316)  ; FMad(a,b,c)
  %318 = fmul fast float %281, %245
  %319 = fmul fast float %282, %246
  %320 = fadd fast float %318, %285
  %321 = fadd fast float %319, %286
  %322 = select i1 %289, float %262, float 1.000000e+00
  %323 = fmul fast float %322, %320
  %324 = fmul fast float %322, %321
  %325 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %326 = extractvalue %dx.types.CBufRet.f32 %325, 0
  %327 = extractvalue %dx.types.CBufRet.f32 %325, 1
  %328 = extractvalue %dx.types.CBufRet.f32 %325, 2
  %329 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 104)  ; CBufferLoadLegacy(handle,regIndex)
  %330 = extractvalue %dx.types.CBufRet.f32 %329, 0
  %331 = extractvalue %dx.types.CBufRet.f32 %329, 1
  %332 = extractvalue %dx.types.CBufRet.f32 %329, 2
  %333 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 109)  ; CBufferLoadLegacy(handle,regIndex)
  %334 = extractvalue %dx.types.CBufRet.f32 %333, 0
  %335 = extractvalue %dx.types.CBufRet.f32 %333, 1
  %336 = extractvalue %dx.types.CBufRet.f32 %333, 2
  %337 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 110)  ; CBufferLoadLegacy(handle,regIndex)
  %338 = extractvalue %dx.types.CBufRet.f32 %337, 0
  %339 = extractvalue %dx.types.CBufRet.f32 %337, 1
  %340 = extractvalue %dx.types.CBufRet.f32 %337, 2
  %341 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 111)  ; CBufferLoadLegacy(handle,regIndex)
  %342 = extractvalue %dx.types.CBufRet.f32 %341, 0
  %343 = extractvalue %dx.types.CBufRet.f32 %341, 1
  %344 = extractvalue %dx.types.CBufRet.f32 %341, 2
  %345 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 112)  ; CBufferLoadLegacy(handle,regIndex)
  %346 = extractvalue %dx.types.CBufRet.f32 %345, 0
  %347 = extractvalue %dx.types.CBufRet.f32 %345, 1
  %348 = extractvalue %dx.types.CBufRet.f32 %345, 2
  %349 = fmul fast float %334, %323
  %350 = call float @dx.op.tertiary.f32(i32 46, float %324, float %338, float %349)  ; FMad(a,b,c)
  %351 = call float @dx.op.tertiary.f32(i32 46, float %262, float %342, float %350)  ; FMad(a,b,c)
  %352 = fmul fast float %335, %323
  %353 = call float @dx.op.tertiary.f32(i32 46, float %324, float %339, float %352)  ; FMad(a,b,c)
  %354 = call float @dx.op.tertiary.f32(i32 46, float %262, float %343, float %353)  ; FMad(a,b,c)
  %355 = fmul fast float %336, %323
  %356 = call float @dx.op.tertiary.f32(i32 46, float %324, float %340, float %355)  ; FMad(a,b,c)
  %357 = call float @dx.op.tertiary.f32(i32 46, float %262, float %344, float %356)  ; FMad(a,b,c)
  %358 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %359 = extractvalue %dx.types.CBufRet.f32 %358, 0
  %360 = fmul fast float %359, %54
  %361 = fadd fast float %311, %306
  %362 = fsub fast float %361, %326
  %363 = fadd fast float %362, %330
  %364 = fsub fast float %363, %346
  %365 = fsub fast float %364, %351
  %366 = fadd fast float %314, %307
  %367 = fsub fast float %366, %327
  %368 = fadd fast float %367, %331
  %369 = fsub fast float %368, %347
  %370 = fsub fast float %369, %354
  %371 = fadd fast float %317, %308
  %372 = fsub fast float %371, %328
  %373 = fadd fast float %372, %332
  %374 = fsub fast float %373, %348
  %375 = fsub fast float %374, %357
  %376 = fmul fast float %359, %262
  %377 = call float @dx.op.binary.f32(i32 36, float %376, float %360)  ; FMin(a,b)
  %378 = fdiv fast float 0x3FBE2B7E00000000, %377
  %379 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %365, float %370, float %375)  ; Dot3(ax,ay,az,bx,by,bz)
  %380 = call float @dx.op.unary.f32(i32 6, float %379)  ; FAbs(value)
  %381 = fmul fast float %380, %378
  %382 = fsub fast float 1.000000e+00, %381
  %383 = call float @dx.op.unary.f32(i32 7, float %382)  ; Saturate(value)
  %384 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %271, float %272, float %273)  ; Dot3(ax,ay,az,bx,by,bz)
  %385 = call float @dx.op.binary.f32(i32 35, float %384, float 0.000000e+00)  ; FMax(a,b)
  %386 = call float @dx.op.unary.f32(i32 23, float %385)  ; Log(value)
  %387 = fmul fast float %386, 4.000000e+00
  %388 = call float @dx.op.unary.f32(i32 21, float %387)  ; Exp(value)
  %389 = fmul fast float %388, %383
  %390 = fcmp oeq float %279, 0.000000e+00
  %391 = or i1 %253, %390
  br i1 %391, label %406, label %392

; <label>:392                                     ; preds = %195
  %393 = extractvalue %dx.types.ResRet.f32 %275, 2
  %394 = fmul fast float %279, %393
  %395 = extractvalue %dx.types.ResRet.f32 %275, 1
  %396 = fmul fast float %279, %395
  %397 = extractvalue %dx.types.ResRet.f32 %275, 0
  %398 = fmul fast float %279, %397
  %399 = extractvalue %dx.types.ResRet.f32 %277, 0
  %400 = fmul fast float %279, %399
  %401 = fmul fast float %398, %389
  %402 = fmul fast float %396, %389
  %403 = fmul fast float %394, %389
  %404 = fmul fast float %389, %279
  %405 = fmul fast float %400, %389
  br label %406

; <label>:406                                     ; preds = %392, %195
  %407 = phi float [ 0.000000e+00, %195 ], [ %401, %392 ]
  %408 = phi float [ 0.000000e+00, %195 ], [ %402, %392 ]
  %409 = phi float [ 0.000000e+00, %195 ], [ %403, %392 ]
  %410 = phi float [ 0.000000e+00, %195 ], [ %404, %392 ]
  %411 = phi float [ 0.000000e+00, %195 ], [ %405, %392 ]
  %412 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %17, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %413 = extractvalue %dx.types.CBufRet.i32 %412, 0
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %416, label %415, !dx.controlflow.hints !31

; <label>:415                                     ; preds = %406
  br label %416

; <label>:416                                     ; preds = %415, %406
  %417 = phi float [ %407, %406 ], [ 0.000000e+00, %415 ]
  %418 = phi float [ %408, %406 ], [ 0.000000e+00, %415 ]
  %419 = phi float [ %409, %406 ], [ 0.000000e+00, %415 ]
  %420 = phi float [ %410, %406 ], [ 0.000000e+00, %415 ]
  %421 = phi float [ %411, %406 ], [ 0.000000e+00, %415 ]
  %422 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %423 = extractvalue %dx.types.CBufRet.f32 %422, 0
  %424 = fmul fast float %423, %417
  %425 = fmul fast float %423, %418
  %426 = fmul fast float %423, %419
  br label %427

; <label>:427                                     ; preds = %416, %155
  %428 = phi float [ %424, %416 ], [ 0.000000e+00, %155 ]
  %429 = phi float [ %425, %416 ], [ 0.000000e+00, %155 ]
  %430 = phi float [ %426, %416 ], [ 0.000000e+00, %155 ]
  %431 = phi float [ %420, %416 ], [ 0.000000e+00, %155 ]
  %432 = phi float [ %421, %416 ], [ 0.000000e+00, %155 ]
  %433 = fcmp fast oeq float %169, 0.000000e+00
  %434 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %435 = extractvalue %dx.types.CBufRet.f32 %434, 2
  %436 = extractvalue %dx.types.CBufRet.f32 %434, 3
  %437 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %438 = extractvalue %dx.types.CBufRet.f32 %437, 0
  %439 = extractvalue %dx.types.CBufRet.f32 %437, 1
  %440 = extractvalue %dx.types.CBufRet.f32 %437, 2
  %441 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %442 = extractvalue %dx.types.CBufRet.f32 %441, 0
  %443 = extractvalue %dx.types.CBufRet.f32 %441, 1
  %444 = extractvalue %dx.types.CBufRet.f32 %441, 2
  %445 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %446 = extractvalue %dx.types.CBufRet.f32 %445, 0
  %447 = extractvalue %dx.types.CBufRet.f32 %445, 1
  %448 = extractvalue %dx.types.CBufRet.f32 %445, 2
  %449 = fmul fast float %438, %71
  %450 = call float @dx.op.tertiary.f32(i32 46, float %72, float %442, float %449)  ; FMad(a,b,c)
  %451 = call float @dx.op.tertiary.f32(i32 46, float %73, float %446, float %450)  ; FMad(a,b,c)
  %452 = fmul fast float %439, %71
  %453 = call float @dx.op.tertiary.f32(i32 46, float %72, float %443, float %452)  ; FMad(a,b,c)
  %454 = call float @dx.op.tertiary.f32(i32 46, float %73, float %447, float %453)  ; FMad(a,b,c)
  %455 = fmul fast float %440, %71
  %456 = call float @dx.op.tertiary.f32(i32 46, float %72, float %444, float %455)  ; FMad(a,b,c)
  %457 = call float @dx.op.tertiary.f32(i32 46, float %73, float %448, float %456)  ; FMad(a,b,c)
  %458 = fcmp fast olt float %80, 1.000000e+00
  %459 = select i1 %458, float %54, float 1.000000e+00
  %460 = fmul fast float %459, %102
  %461 = fmul fast float %459, %103
  %462 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %463 = extractvalue %dx.types.CBufRet.f32 %462, 0
  %464 = extractvalue %dx.types.CBufRet.f32 %462, 1
  %465 = extractvalue %dx.types.CBufRet.f32 %462, 2
  %466 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %467 = extractvalue %dx.types.CBufRet.f32 %466, 0
  %468 = extractvalue %dx.types.CBufRet.f32 %466, 1
  %469 = extractvalue %dx.types.CBufRet.f32 %466, 2
  %470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %471 = extractvalue %dx.types.CBufRet.f32 %470, 0
  %472 = extractvalue %dx.types.CBufRet.f32 %470, 1
  %473 = extractvalue %dx.types.CBufRet.f32 %470, 2
  %474 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %475 = extractvalue %dx.types.CBufRet.f32 %474, 0
  %476 = extractvalue %dx.types.CBufRet.f32 %474, 1
  %477 = extractvalue %dx.types.CBufRet.f32 %474, 2
  %478 = fmul fast float %460, %463
  %479 = call float @dx.op.tertiary.f32(i32 46, float %461, float %467, float %478)  ; FMad(a,b,c)
  %480 = call float @dx.op.tertiary.f32(i32 46, float %54, float %471, float %479)  ; FMad(a,b,c)
  %481 = fadd fast float %480, %475
  %482 = fmul fast float %460, %464
  %483 = call float @dx.op.tertiary.f32(i32 46, float %461, float %468, float %482)  ; FMad(a,b,c)
  %484 = call float @dx.op.tertiary.f32(i32 46, float %54, float %472, float %483)  ; FMad(a,b,c)
  %485 = fadd fast float %484, %476
  %486 = fmul fast float %460, %465
  %487 = call float @dx.op.tertiary.f32(i32 46, float %461, float %469, float %486)  ; FMad(a,b,c)
  %488 = call float @dx.op.tertiary.f32(i32 46, float %54, float %473, float %487)  ; FMad(a,b,c)
  %489 = fadd fast float %488, %477
  %490 = fcmp fast ogt float %169, 0.000000e+00
  %491 = fdiv fast float 1.562500e-02, %168
  %492 = select i1 %490, float %491, float 0.000000e+00
  %493 = fmul fast float %492, %171
  %494 = fmul fast float %492, %172
  %495 = fmul fast float %492, %173
  %496 = fmul fast float %492, %170
  br i1 %490, label %497, label %502

; <label>:497                                     ; preds = %427
  %498 = fmul fast float %493, %493
  %499 = fmul fast float %494, %494
  %500 = fmul fast float %495, %495
  %501 = fmul fast float %496, %496
  br label %502

; <label>:502                                     ; preds = %497, %427
  %503 = phi float [ 0.000000e+00, %427 ], [ %498, %497 ]
  %504 = phi float [ 0.000000e+00, %427 ], [ %499, %497 ]
  %505 = phi float [ 0.000000e+00, %427 ], [ %500, %497 ]
  %506 = phi float [ 0.000000e+00, %427 ], [ %493, %497 ]
  %507 = phi float [ 0.000000e+00, %427 ], [ %494, %497 ]
  %508 = phi float [ 0.000000e+00, %427 ], [ %495, %497 ]
  %509 = phi float [ 0.000000e+00, %427 ], [ 1.000000e+00, %497 ]
  %510 = phi float [ 0.000000e+00, %427 ], [ %496, %497 ]
  %511 = phi float [ 0.000000e+00, %427 ], [ %501, %497 ]
  %512 = bitcast float %38 to i32
  %513 = call i32 @dx.op.waveGetLaneIndex(i32 111)  ; WaveGetLaneIndex()
  %514 = and i32 %513, 31
  %515 = xor i32 %514, 1
  %516 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %512, i32 %515)  ; WaveReadLaneAt(value,lane)
  %517 = bitcast float %39 to i32
  %518 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %517, i32 %515)  ; WaveReadLaneAt(value,lane)
  %519 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %74, i32 %515)  ; WaveReadLaneAt(value,lane)
  %520 = bitcast i32 %519 to float
  %521 = bitcast float %102 to i32
  %522 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %521, i32 %515)  ; WaveReadLaneAt(value,lane)
  %523 = bitcast i32 %522 to float
  %524 = bitcast float %103 to i32
  %525 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %524, i32 %515)  ; WaveReadLaneAt(value,lane)
  %526 = bitcast i32 %525 to float
  %527 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %78, i32 %515)  ; WaveReadLaneAt(value,lane)
  %528 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %75, i32 %515)  ; WaveReadLaneAt(value,lane)
  %529 = bitcast i32 %528 to float
  %530 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %76, i32 %515)  ; WaveReadLaneAt(value,lane)
  %531 = bitcast i32 %530 to float
  %532 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %77, i32 %515)  ; WaveReadLaneAt(value,lane)
  %533 = bitcast i32 %532 to float
  %534 = bitcast float %451 to i32
  %535 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %534, i32 %515)  ; WaveReadLaneAt(value,lane)
  %536 = bitcast float %454 to i32
  %537 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %536, i32 %515)  ; WaveReadLaneAt(value,lane)
  %538 = bitcast float %457 to i32
  %539 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %538, i32 %515)  ; WaveReadLaneAt(value,lane)
  %540 = bitcast float %481 to i32
  %541 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %540, i32 %515)  ; WaveReadLaneAt(value,lane)
  %542 = bitcast float %485 to i32
  %543 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %542, i32 %515)  ; WaveReadLaneAt(value,lane)
  %544 = bitcast float %489 to i32
  %545 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %544, i32 %515)  ; WaveReadLaneAt(value,lane)
  %546 = bitcast float %493 to i32
  %547 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %546, i32 %515)  ; WaveReadLaneAt(value,lane)
  %548 = bitcast float %494 to i32
  %549 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %548, i32 %515)  ; WaveReadLaneAt(value,lane)
  %550 = bitcast float %495 to i32
  %551 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %550, i32 %515)  ; WaveReadLaneAt(value,lane)
  %552 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 0, i32 %515)  ; WaveReadLaneAt(value,lane)
  %553 = select i1 %490, i32 1065353216, i32 0
  %554 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %553, i32 %515)  ; WaveReadLaneAt(value,lane)
  %555 = bitcast float %496 to i32
  %556 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %555, i32 %515)  ; WaveReadLaneAt(value,lane)
  %557 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 0, i32 %515)  ; WaveReadLaneAt(value,lane)
  %558 = bitcast i32 %554 to float
  %559 = bitcast i32 %547 to float
  %560 = bitcast i32 %549 to float
  %561 = bitcast i32 %551 to float
  %562 = bitcast i32 %556 to float
  %563 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 -1073741824, i32 %515)  ; WaveReadLaneAt(value,lane)
  %564 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 -1082130432, i32 %515)  ; WaveReadLaneAt(value,lane)
  %565 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 -1082130432, i32 %515)  ; WaveReadLaneAt(value,lane)
  %566 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %567 = extractvalue %dx.types.CBufRet.f32 %566, 0
  %568 = fmul fast float %567, %54
  %569 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %570 = extractvalue %dx.types.CBufRet.f32 %569, 3
  %571 = fcmp fast olt float %570, 1.000000e+00
  %572 = select i1 %571, float %54, float 1.000000e+00
  %573 = fmul fast float %572, %102
  %574 = fmul fast float %572, %103
  %575 = select i1 %571, float %520, float 1.000000e+00
  %576 = fmul fast float %575, %523
  %577 = fmul fast float %575, %526
  %578 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %579 = extractvalue %dx.types.CBufRet.f32 %578, 0
  %580 = extractvalue %dx.types.CBufRet.f32 %578, 1
  %581 = extractvalue %dx.types.CBufRet.f32 %578, 2
  %582 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %583 = extractvalue %dx.types.CBufRet.f32 %582, 0
  %584 = extractvalue %dx.types.CBufRet.f32 %582, 1
  %585 = extractvalue %dx.types.CBufRet.f32 %582, 2
  %586 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %587 = extractvalue %dx.types.CBufRet.f32 %586, 0
  %588 = extractvalue %dx.types.CBufRet.f32 %586, 1
  %589 = extractvalue %dx.types.CBufRet.f32 %586, 2
  %590 = fsub fast float %573, %576
  %591 = fsub fast float %574, %577
  %592 = fsub fast float %54, %520
  %593 = fmul fast float %590, %579
  %594 = call float @dx.op.tertiary.f32(i32 46, float %591, float %583, float %593)  ; FMad(a,b,c)
  %595 = call float @dx.op.tertiary.f32(i32 46, float %592, float %587, float %594)  ; FMad(a,b,c)
  %596 = fmul fast float %590, %580
  %597 = call float @dx.op.tertiary.f32(i32 46, float %591, float %584, float %596)  ; FMad(a,b,c)
  %598 = call float @dx.op.tertiary.f32(i32 46, float %592, float %588, float %597)  ; FMad(a,b,c)
  %599 = fmul fast float %590, %581
  %600 = call float @dx.op.tertiary.f32(i32 46, float %591, float %585, float %599)  ; FMad(a,b,c)
  %601 = call float @dx.op.tertiary.f32(i32 46, float %592, float %589, float %600)  ; FMad(a,b,c)
  %602 = fdiv fast float 0x3FBE2B7E00000000, %568
  %603 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %595, float %598, float %601)  ; Dot3(ax,ay,az,bx,by,bz)
  %604 = call float @dx.op.unary.f32(i32 6, float %603)  ; FAbs(value)
  %605 = fmul fast float %604, %602
  %606 = fsub fast float 1.000000e+00, %605
  %607 = call float @dx.op.unary.f32(i32 7, float %606)  ; Saturate(value)
  %608 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %529, float %531, float %533)  ; Dot3(ax,ay,az,bx,by,bz)
  %609 = call float @dx.op.binary.f32(i32 35, float %608, float 0.000000e+00)  ; FMax(a,b)
  %610 = call float @dx.op.unary.f32(i32 23, float %609)  ; Log(value)
  %611 = fmul fast float %610, 4.000000e+00
  %612 = call float @dx.op.unary.f32(i32 21, float %611)  ; Exp(value)
  %613 = fmul fast float %612, %607
  %614 = select i1 %433, float 1.000000e+00, float %613
  %615 = fcmp fast une float %558, 0.000000e+00
  br i1 %615, label %616, label %639

; <label>:616                                     ; preds = %502
  %617 = fmul fast float %614, %559
  %618 = fmul fast float %614, %560
  %619 = fmul fast float %614, %561
  %620 = fmul fast float %614, %558
  %621 = fmul fast float %614, %562
  %622 = fadd fast float %617, %506
  %623 = fadd fast float %618, %507
  %624 = fadd fast float %619, %508
  %625 = fadd fast float %620, %509
  %626 = fadd fast float %621, %510
  %627 = fmul fast float %559, %559
  %628 = fmul fast float %560, %560
  %629 = fmul fast float %561, %561
  %630 = fmul fast float %562, %562
  %631 = fmul fast float %627, %614
  %632 = fmul fast float %628, %614
  %633 = fmul fast float %629, %614
  %634 = fmul fast float %630, %614
  %635 = fadd fast float %631, %503
  %636 = fadd fast float %632, %504
  %637 = fadd fast float %633, %505
  %638 = fadd fast float %634, %511
  br label %639

; <label>:639                                     ; preds = %616, %502
  %640 = phi float [ %503, %502 ], [ %635, %616 ]
  %641 = phi float [ %504, %502 ], [ %636, %616 ]
  %642 = phi float [ %505, %502 ], [ %637, %616 ]
  %643 = phi float [ %506, %502 ], [ %622, %616 ]
  %644 = phi float [ %507, %502 ], [ %623, %616 ]
  %645 = phi float [ %508, %502 ], [ %624, %616 ]
  %646 = phi float [ %509, %502 ], [ %625, %616 ]
  %647 = phi float [ %510, %502 ], [ %626, %616 ]
  %648 = phi float [ %511, %502 ], [ %638, %616 ]
  %649 = xor i32 %514, 8
  %650 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %516, i32 %649)  ; WaveReadLaneAt(value,lane)
  %651 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %518, i32 %649)  ; WaveReadLaneAt(value,lane)
  %652 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %519, i32 %649)  ; WaveReadLaneAt(value,lane)
  %653 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %522, i32 %649)  ; WaveReadLaneAt(value,lane)
  %654 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %525, i32 %649)  ; WaveReadLaneAt(value,lane)
  %655 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %527, i32 %649)  ; WaveReadLaneAt(value,lane)
  %656 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %528, i32 %649)  ; WaveReadLaneAt(value,lane)
  %657 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %530, i32 %649)  ; WaveReadLaneAt(value,lane)
  %658 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %532, i32 %649)  ; WaveReadLaneAt(value,lane)
  %659 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %535, i32 %649)  ; WaveReadLaneAt(value,lane)
  %660 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %537, i32 %649)  ; WaveReadLaneAt(value,lane)
  %661 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %539, i32 %649)  ; WaveReadLaneAt(value,lane)
  %662 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %541, i32 %649)  ; WaveReadLaneAt(value,lane)
  %663 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %543, i32 %649)  ; WaveReadLaneAt(value,lane)
  %664 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %545, i32 %649)  ; WaveReadLaneAt(value,lane)
  %665 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %547, i32 %649)  ; WaveReadLaneAt(value,lane)
  %666 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %549, i32 %649)  ; WaveReadLaneAt(value,lane)
  %667 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %551, i32 %649)  ; WaveReadLaneAt(value,lane)
  %668 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %552, i32 %649)  ; WaveReadLaneAt(value,lane)
  %669 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %554, i32 %649)  ; WaveReadLaneAt(value,lane)
  %670 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %556, i32 %649)  ; WaveReadLaneAt(value,lane)
  %671 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %557, i32 %649)  ; WaveReadLaneAt(value,lane)
  %672 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %563, i32 %649)  ; WaveReadLaneAt(value,lane)
  %673 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %564, i32 %649)  ; WaveReadLaneAt(value,lane)
  %674 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %565, i32 %649)  ; WaveReadLaneAt(value,lane)
  %675 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %650, i32 %515)  ; WaveReadLaneAt(value,lane)
  %676 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %651, i32 %515)  ; WaveReadLaneAt(value,lane)
  %677 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %652, i32 %515)  ; WaveReadLaneAt(value,lane)
  %678 = bitcast i32 %677 to float
  %679 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %653, i32 %515)  ; WaveReadLaneAt(value,lane)
  %680 = bitcast i32 %679 to float
  %681 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %654, i32 %515)  ; WaveReadLaneAt(value,lane)
  %682 = bitcast i32 %681 to float
  %683 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %655, i32 %515)  ; WaveReadLaneAt(value,lane)
  %684 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %656, i32 %515)  ; WaveReadLaneAt(value,lane)
  %685 = bitcast i32 %684 to float
  %686 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %657, i32 %515)  ; WaveReadLaneAt(value,lane)
  %687 = bitcast i32 %686 to float
  %688 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %658, i32 %515)  ; WaveReadLaneAt(value,lane)
  %689 = bitcast i32 %688 to float
  %690 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %659, i32 %515)  ; WaveReadLaneAt(value,lane)
  %691 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %660, i32 %515)  ; WaveReadLaneAt(value,lane)
  %692 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %661, i32 %515)  ; WaveReadLaneAt(value,lane)
  %693 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %662, i32 %515)  ; WaveReadLaneAt(value,lane)
  %694 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %663, i32 %515)  ; WaveReadLaneAt(value,lane)
  %695 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %664, i32 %515)  ; WaveReadLaneAt(value,lane)
  %696 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %665, i32 %515)  ; WaveReadLaneAt(value,lane)
  %697 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %666, i32 %515)  ; WaveReadLaneAt(value,lane)
  %698 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %667, i32 %515)  ; WaveReadLaneAt(value,lane)
  %699 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %668, i32 %515)  ; WaveReadLaneAt(value,lane)
  %700 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %669, i32 %515)  ; WaveReadLaneAt(value,lane)
  %701 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %670, i32 %515)  ; WaveReadLaneAt(value,lane)
  %702 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %671, i32 %515)  ; WaveReadLaneAt(value,lane)
  %703 = bitcast i32 %700 to float
  %704 = bitcast i32 %696 to float
  %705 = bitcast i32 %697 to float
  %706 = bitcast i32 %698 to float
  %707 = bitcast i32 %701 to float
  %708 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %672, i32 %515)  ; WaveReadLaneAt(value,lane)
  %709 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %673, i32 %515)  ; WaveReadLaneAt(value,lane)
  %710 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %674, i32 %515)  ; WaveReadLaneAt(value,lane)
  %711 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %712 = extractvalue %dx.types.CBufRet.f32 %711, 0
  %713 = fmul fast float %712, %54
  %714 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %715 = extractvalue %dx.types.CBufRet.f32 %714, 3
  %716 = fcmp fast olt float %715, 1.000000e+00
  %717 = select i1 %716, float %54, float 1.000000e+00
  %718 = fmul fast float %717, %102
  %719 = fmul fast float %717, %103
  %720 = select i1 %716, float %678, float 1.000000e+00
  %721 = fmul fast float %720, %680
  %722 = fmul fast float %720, %682
  %723 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %724 = extractvalue %dx.types.CBufRet.f32 %723, 0
  %725 = extractvalue %dx.types.CBufRet.f32 %723, 1
  %726 = extractvalue %dx.types.CBufRet.f32 %723, 2
  %727 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %728 = extractvalue %dx.types.CBufRet.f32 %727, 0
  %729 = extractvalue %dx.types.CBufRet.f32 %727, 1
  %730 = extractvalue %dx.types.CBufRet.f32 %727, 2
  %731 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %732 = extractvalue %dx.types.CBufRet.f32 %731, 0
  %733 = extractvalue %dx.types.CBufRet.f32 %731, 1
  %734 = extractvalue %dx.types.CBufRet.f32 %731, 2
  %735 = fsub fast float %718, %721
  %736 = fsub fast float %719, %722
  %737 = fsub fast float %54, %678
  %738 = fmul fast float %735, %724
  %739 = call float @dx.op.tertiary.f32(i32 46, float %736, float %728, float %738)  ; FMad(a,b,c)
  %740 = call float @dx.op.tertiary.f32(i32 46, float %737, float %732, float %739)  ; FMad(a,b,c)
  %741 = fmul fast float %735, %725
  %742 = call float @dx.op.tertiary.f32(i32 46, float %736, float %729, float %741)  ; FMad(a,b,c)
  %743 = call float @dx.op.tertiary.f32(i32 46, float %737, float %733, float %742)  ; FMad(a,b,c)
  %744 = fmul fast float %735, %726
  %745 = call float @dx.op.tertiary.f32(i32 46, float %736, float %730, float %744)  ; FMad(a,b,c)
  %746 = call float @dx.op.tertiary.f32(i32 46, float %737, float %734, float %745)  ; FMad(a,b,c)
  %747 = fdiv fast float 0x3FBE2B7E00000000, %713
  %748 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %740, float %743, float %746)  ; Dot3(ax,ay,az,bx,by,bz)
  %749 = call float @dx.op.unary.f32(i32 6, float %748)  ; FAbs(value)
  %750 = fmul fast float %749, %747
  %751 = fsub fast float 1.000000e+00, %750
  %752 = call float @dx.op.unary.f32(i32 7, float %751)  ; Saturate(value)
  %753 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %685, float %687, float %689)  ; Dot3(ax,ay,az,bx,by,bz)
  %754 = call float @dx.op.binary.f32(i32 35, float %753, float 0.000000e+00)  ; FMax(a,b)
  %755 = call float @dx.op.unary.f32(i32 23, float %754)  ; Log(value)
  %756 = fmul fast float %755, 4.000000e+00
  %757 = call float @dx.op.unary.f32(i32 21, float %756)  ; Exp(value)
  %758 = fmul fast float %757, %752
  %759 = select i1 %433, float 1.000000e+00, float %758
  %760 = fcmp fast une float %703, 0.000000e+00
  br i1 %760, label %761, label %784

; <label>:761                                     ; preds = %639
  %762 = fmul fast float %759, %704
  %763 = fmul fast float %759, %705
  %764 = fmul fast float %759, %706
  %765 = fmul fast float %759, %703
  %766 = fmul fast float %759, %707
  %767 = fadd fast float %762, %643
  %768 = fadd fast float %763, %644
  %769 = fadd fast float %764, %645
  %770 = fadd fast float %765, %646
  %771 = fadd fast float %766, %647
  %772 = fmul fast float %704, %704
  %773 = fmul fast float %705, %705
  %774 = fmul fast float %706, %706
  %775 = fmul fast float %707, %707
  %776 = fmul fast float %772, %759
  %777 = fmul fast float %773, %759
  %778 = fmul fast float %774, %759
  %779 = fmul fast float %775, %759
  %780 = fadd fast float %776, %640
  %781 = fadd fast float %777, %641
  %782 = fadd fast float %778, %642
  %783 = fadd fast float %779, %648
  br label %784

; <label>:784                                     ; preds = %761, %639
  %785 = phi float [ %640, %639 ], [ %780, %761 ]
  %786 = phi float [ %641, %639 ], [ %781, %761 ]
  %787 = phi float [ %642, %639 ], [ %782, %761 ]
  %788 = phi float [ %643, %639 ], [ %767, %761 ]
  %789 = phi float [ %644, %639 ], [ %768, %761 ]
  %790 = phi float [ %645, %639 ], [ %769, %761 ]
  %791 = phi float [ %646, %639 ], [ %770, %761 ]
  %792 = phi float [ %647, %639 ], [ %771, %761 ]
  %793 = phi float [ %648, %639 ], [ %783, %761 ]
  %794 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %795 = extractvalue %dx.types.CBufRet.f32 %794, 0
  %796 = extractvalue %dx.types.CBufRet.f32 %794, 1
  %797 = fmul fast float %795, %38
  %798 = fmul fast float %796, %39
  %799 = fptoui float %797 to i32
  %800 = fptoui float %798 to i32
  %801 = and i32 %799, 1
  %802 = icmp ne i32 %801, 0
  %803 = and i32 %800, 1
  %804 = icmp ne i32 %803, 0
  %805 = select i1 %802, float 1.000000e+00, float -1.000000e+00
  %806 = select i1 %804, float -0.000000e+00, float 0.000000e+00
  %807 = select i1 %802, float -0.000000e+00, float 0.000000e+00
  %808 = select i1 %804, float 1.000000e+00, float -1.000000e+00
  %809 = fmul fast float %805, %435
  %810 = fmul fast float %806, %436
  %811 = fadd fast float %809, %38
  %812 = fadd fast float %810, %39
  %813 = fmul fast float %807, %435
  %814 = fmul fast float %808, %436
  %815 = fadd fast float %813, %38
  %816 = fadd fast float %814, %39
  %817 = fcmp fast ogt float %811, %32
  %818 = fcmp fast ogt float %812, %33
  %819 = fcmp fast olt float %811, %34
  %820 = fcmp fast olt float %812, %35
  %821 = or i1 %819, %817
  %822 = or i1 %820, %818
  %823 = or i1 %821, %822
  %824 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %825 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %826 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %824, %dx.types.Handle %825, float %811, float %812, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %827 = extractvalue %dx.types.ResRet.f32 %826, 0
  %828 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %829 = extractvalue %dx.types.CBufRet.f32 %828, 0
  %830 = fmul fast float %829, %827
  %831 = extractvalue %dx.types.CBufRet.f32 %828, 1
  %832 = fadd fast float %830, %831
  %833 = extractvalue %dx.types.CBufRet.f32 %828, 2
  %834 = fmul fast float %833, %827
  %835 = extractvalue %dx.types.CBufRet.f32 %828, 3
  %836 = fsub fast float %834, %835
  %837 = fdiv fast float 1.000000e+00, %836
  %838 = fadd fast float %832, %837
  %839 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %840 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %839, %dx.types.Handle %825, float %811, float %812, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %841 = extractvalue %dx.types.ResRet.f32 %840, 0
  %842 = extractvalue %dx.types.ResRet.f32 %840, 1
  %843 = extractvalue %dx.types.ResRet.f32 %840, 2
  %844 = fmul fast float %841, 2.000000e+00
  %845 = fmul fast float %842, 2.000000e+00
  %846 = fmul fast float %843, 2.000000e+00
  %847 = fadd fast float %844, -1.000000e+00
  %848 = fadd fast float %845, -1.000000e+00
  %849 = fadd fast float %846, -1.000000e+00
  %850 = call float @dx.op.dot3.f32(i32 55, float %847, float %848, float %849, float %847, float %848, float %849)  ; Dot3(ax,ay,az,bx,by,bz)
  %851 = call float @dx.op.unary.f32(i32 25, float %850)  ; Rsqrt(value)
  %852 = fmul fast float %847, %851
  %853 = fmul fast float %848, %851
  %854 = fmul fast float %849, %851
  %855 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %856 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %855, %dx.types.Handle %825, float %811, float %812, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %857 = extractvalue %dx.types.ResRet.f32 %856, 0
  %858 = extractvalue %dx.types.ResRet.f32 %856, 1
  %859 = extractvalue %dx.types.ResRet.f32 %856, 2
  %860 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %861 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %860, %dx.types.Handle %825, float %811, float %812, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %862 = extractvalue %dx.types.ResRet.f32 %861, 0
  %863 = extractvalue %dx.types.ResRet.f32 %861, 1
  %864 = fcmp fast ogt float %815, %32
  %865 = fcmp fast ogt float %816, %33
  %866 = fcmp fast olt float %815, %34
  %867 = fcmp fast olt float %816, %35
  %868 = or i1 %866, %864
  %869 = or i1 %867, %865
  %870 = or i1 %868, %869
  %871 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %824, %dx.types.Handle %825, float %815, float %816, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %872 = extractvalue %dx.types.ResRet.f32 %871, 0
  %873 = fmul fast float %829, %872
  %874 = fadd fast float %873, %831
  %875 = fmul fast float %833, %872
  %876 = fsub fast float %875, %835
  %877 = fdiv fast float 1.000000e+00, %876
  %878 = fadd fast float %874, %877
  %879 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %839, %dx.types.Handle %825, float %815, float %816, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %880 = extractvalue %dx.types.ResRet.f32 %879, 0
  %881 = extractvalue %dx.types.ResRet.f32 %879, 1
  %882 = extractvalue %dx.types.ResRet.f32 %879, 2
  %883 = fmul fast float %880, 2.000000e+00
  %884 = fmul fast float %881, 2.000000e+00
  %885 = fmul fast float %882, 2.000000e+00
  %886 = fadd fast float %883, -1.000000e+00
  %887 = fadd fast float %884, -1.000000e+00
  %888 = fadd fast float %885, -1.000000e+00
  %889 = call float @dx.op.dot3.f32(i32 55, float %886, float %887, float %888, float %886, float %887, float %888)  ; Dot3(ax,ay,az,bx,by,bz)
  %890 = call float @dx.op.unary.f32(i32 25, float %889)  ; Rsqrt(value)
  %891 = fmul fast float %886, %890
  %892 = fmul fast float %887, %890
  %893 = fmul fast float %888, %890
  %894 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %855, %dx.types.Handle %825, float %815, float %816, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %895 = extractvalue %dx.types.ResRet.f32 %894, 0
  %896 = extractvalue %dx.types.ResRet.f32 %894, 1
  %897 = extractvalue %dx.types.ResRet.f32 %894, 2
  %898 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %860, %dx.types.Handle %825, float %815, float %816, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %899 = extractvalue %dx.types.ResRet.f32 %898, 0
  %900 = extractvalue %dx.types.ResRet.f32 %898, 1
  %901 = fcmp fast ogt float %863, 0.000000e+00
  %902 = select i1 %901, float 1.000000e+00, float 0.000000e+00
  %903 = fmul fast float %902, %862
  %904 = fmul fast float %902, %857
  %905 = fmul fast float %902, %858
  %906 = fmul fast float %902, %859
  %907 = fcmp fast ogt float %900, 0.000000e+00
  %908 = select i1 %907, float 1.000000e+00, float 0.000000e+00
  %909 = fmul fast float %908, %899
  %910 = fmul fast float %908, %895
  %911 = fmul fast float %908, %896
  %912 = fmul fast float %908, %897
  %913 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %914 = extractvalue %dx.types.CBufRet.f32 %913, 0
  %915 = extractvalue %dx.types.CBufRet.f32 %913, 1
  %916 = fmul fast float %914, %38
  %917 = fmul fast float %915, %39
  %918 = extractvalue %dx.types.CBufRet.f32 %913, 2
  %919 = extractvalue %dx.types.CBufRet.f32 %913, 3
  %920 = fadd fast float %916, %918
  %921 = fadd fast float %917, %919
  %922 = fmul fast float %914, %811
  %923 = fmul fast float %915, %812
  %924 = fadd fast float %922, %918
  %925 = fadd fast float %923, %919
  %926 = fmul fast float %717, %920
  %927 = fmul fast float %717, %921
  %928 = select i1 %716, float %838, float 1.000000e+00
  %929 = fmul fast float %928, %924
  %930 = fmul fast float %928, %925
  %931 = fsub fast float %926, %929
  %932 = fsub fast float %927, %930
  %933 = fsub fast float %54, %838
  %934 = fmul fast float %931, %724
  %935 = call float @dx.op.tertiary.f32(i32 46, float %932, float %728, float %934)  ; FMad(a,b,c)
  %936 = call float @dx.op.tertiary.f32(i32 46, float %933, float %732, float %935)  ; FMad(a,b,c)
  %937 = fmul fast float %931, %725
  %938 = call float @dx.op.tertiary.f32(i32 46, float %932, float %729, float %937)  ; FMad(a,b,c)
  %939 = call float @dx.op.tertiary.f32(i32 46, float %933, float %733, float %938)  ; FMad(a,b,c)
  %940 = fmul fast float %931, %726
  %941 = call float @dx.op.tertiary.f32(i32 46, float %932, float %730, float %940)  ; FMad(a,b,c)
  %942 = call float @dx.op.tertiary.f32(i32 46, float %933, float %734, float %941)  ; FMad(a,b,c)
  %943 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %936, float %939, float %942)  ; Dot3(ax,ay,az,bx,by,bz)
  %944 = call float @dx.op.unary.f32(i32 6, float %943)  ; FAbs(value)
  %945 = fmul fast float %944, %747
  %946 = fsub fast float 1.000000e+00, %945
  %947 = call float @dx.op.unary.f32(i32 7, float %946)  ; Saturate(value)
  %948 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %852, float %853, float %854)  ; Dot3(ax,ay,az,bx,by,bz)
  %949 = call float @dx.op.binary.f32(i32 35, float %948, float 0.000000e+00)  ; FMax(a,b)
  %950 = call float @dx.op.unary.f32(i32 23, float %949)  ; Log(value)
  %951 = fmul fast float %950, 4.000000e+00
  %952 = call float @dx.op.unary.f32(i32 21, float %951)  ; Exp(value)
  %953 = fmul fast float %952, %947
  %954 = select i1 %433, float 1.000000e+00, float %953
  %955 = fcmp oeq float %902, 0.000000e+00
  %956 = or i1 %823, %955
  br i1 %956, label %980, label %957

; <label>:957                                     ; preds = %784
  %958 = fmul fast float %954, %904
  %959 = fmul fast float %954, %905
  %960 = fmul fast float %954, %906
  %961 = fmul fast float %954, %902
  %962 = fmul fast float %954, %903
  %963 = fadd fast float %958, %788
  %964 = fadd fast float %959, %789
  %965 = fadd fast float %960, %790
  %966 = fadd fast float %961, %791
  %967 = fadd fast float %962, %792
  %968 = fmul fast float %904, %904
  %969 = fmul fast float %905, %905
  %970 = fmul fast float %906, %906
  %971 = fmul fast float %903, %903
  %972 = fmul fast float %968, %954
  %973 = fmul fast float %969, %954
  %974 = fmul fast float %970, %954
  %975 = fmul fast float %971, %954
  %976 = fadd fast float %972, %785
  %977 = fadd fast float %973, %786
  %978 = fadd fast float %974, %787
  %979 = fadd fast float %975, %793
  br label %980

; <label>:980                                     ; preds = %957, %784
  %981 = phi float [ %785, %784 ], [ %976, %957 ]
  %982 = phi float [ %786, %784 ], [ %977, %957 ]
  %983 = phi float [ %787, %784 ], [ %978, %957 ]
  %984 = phi float [ %788, %784 ], [ %963, %957 ]
  %985 = phi float [ %789, %784 ], [ %964, %957 ]
  %986 = phi float [ %790, %784 ], [ %965, %957 ]
  %987 = phi float [ %791, %784 ], [ %966, %957 ]
  %988 = phi float [ %792, %784 ], [ %967, %957 ]
  %989 = phi float [ %793, %784 ], [ %979, %957 ]
  %990 = fmul fast float %914, %815
  %991 = fmul fast float %915, %816
  %992 = fadd fast float %990, %918
  %993 = fadd fast float %991, %919
  %994 = select i1 %716, float %878, float 1.000000e+00
  %995 = fmul fast float %994, %992
  %996 = fmul fast float %994, %993
  %997 = fsub fast float %926, %995
  %998 = fsub fast float %927, %996
  %999 = fsub fast float %54, %878
  %1000 = fmul fast float %997, %724
  %1001 = call float @dx.op.tertiary.f32(i32 46, float %998, float %728, float %1000)  ; FMad(a,b,c)
  %1002 = call float @dx.op.tertiary.f32(i32 46, float %999, float %732, float %1001)  ; FMad(a,b,c)
  %1003 = fmul fast float %997, %725
  %1004 = call float @dx.op.tertiary.f32(i32 46, float %998, float %729, float %1003)  ; FMad(a,b,c)
  %1005 = call float @dx.op.tertiary.f32(i32 46, float %999, float %733, float %1004)  ; FMad(a,b,c)
  %1006 = fmul fast float %997, %726
  %1007 = call float @dx.op.tertiary.f32(i32 46, float %998, float %730, float %1006)  ; FMad(a,b,c)
  %1008 = call float @dx.op.tertiary.f32(i32 46, float %999, float %734, float %1007)  ; FMad(a,b,c)
  %1009 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %1002, float %1005, float %1008)  ; Dot3(ax,ay,az,bx,by,bz)
  %1010 = call float @dx.op.unary.f32(i32 6, float %1009)  ; FAbs(value)
  %1011 = fmul fast float %1010, %747
  %1012 = fsub fast float 1.000000e+00, %1011
  %1013 = call float @dx.op.unary.f32(i32 7, float %1012)  ; Saturate(value)
  %1014 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %891, float %892, float %893)  ; Dot3(ax,ay,az,bx,by,bz)
  %1015 = call float @dx.op.binary.f32(i32 35, float %1014, float 0.000000e+00)  ; FMax(a,b)
  %1016 = call float @dx.op.unary.f32(i32 23, float %1015)  ; Log(value)
  %1017 = fmul fast float %1016, 4.000000e+00
  %1018 = call float @dx.op.unary.f32(i32 21, float %1017)  ; Exp(value)
  %1019 = fmul fast float %1018, %1013
  %1020 = select i1 %433, float 1.000000e+00, float %1019
  %1021 = fcmp oeq float %908, 0.000000e+00
  %1022 = or i1 %870, %1021
  br i1 %1022, label %1046, label %1023

; <label>:1023                                    ; preds = %980
  %1024 = fmul fast float %1020, %910
  %1025 = fmul fast float %1020, %911
  %1026 = fmul fast float %1020, %912
  %1027 = fmul fast float %1020, %908
  %1028 = fmul fast float %1020, %909
  %1029 = fadd fast float %1024, %984
  %1030 = fadd fast float %1025, %985
  %1031 = fadd fast float %1026, %986
  %1032 = fadd fast float %1027, %987
  %1033 = fadd fast float %1028, %988
  %1034 = fmul fast float %910, %910
  %1035 = fmul fast float %911, %911
  %1036 = fmul fast float %912, %912
  %1037 = fmul fast float %909, %909
  %1038 = fmul fast float %1034, %1020
  %1039 = fmul fast float %1035, %1020
  %1040 = fmul fast float %1036, %1020
  %1041 = fmul fast float %1037, %1020
  %1042 = fadd fast float %1038, %981
  %1043 = fadd fast float %1039, %982
  %1044 = fadd fast float %1040, %983
  %1045 = fadd fast float %1041, %989
  br label %1046

; <label>:1046                                    ; preds = %1023, %980
  %1047 = phi float [ %981, %980 ], [ %1042, %1023 ]
  %1048 = phi float [ %982, %980 ], [ %1043, %1023 ]
  %1049 = phi float [ %983, %980 ], [ %1044, %1023 ]
  %1050 = phi float [ %984, %980 ], [ %1029, %1023 ]
  %1051 = phi float [ %985, %980 ], [ %1030, %1023 ]
  %1052 = phi float [ %986, %980 ], [ %1031, %1023 ]
  %1053 = phi float [ %987, %980 ], [ %1032, %1023 ]
  %1054 = phi float [ %988, %980 ], [ %1033, %1023 ]
  %1055 = phi float [ %989, %980 ], [ %1045, %1023 ]
  %1056 = fcmp fast ogt float %1053, 0.000000e+00
  %1057 = fdiv fast float 1.000000e+00, %1053
  %1058 = select i1 %1056, float %1057, float 0.000000e+00
  %1059 = fmul fast float %1058, %1050
  %1060 = fmul fast float %1058, %1051
  %1061 = fmul fast float %1058, %1052
  %1062 = fmul fast float %1058, %1054
  %1063 = fmul fast float %1058, %1055
  %1064 = fmul fast float %1062, %1062
  %1065 = fsub fast float %1063, %1064
  %1066 = call float @dx.op.unary.f32(i32 6, float %1065)  ; FAbs(value)
  %1067 = call float @dx.op.unary.f32(i32 24, float %1066)  ; Sqrt(value)
  %1068 = fmul fast float %1067, 1.250000e+00
  %1069 = fsub fast float %1062, %1068
  %1070 = fadd fast float %1068, %1062
  %1071 = fcmp fast ogt float %431, 0.000000e+00
  %1072 = fdiv fast float 1.000000e+00, %431
  %1073 = select i1 %1071, float %1072, float 0.000000e+00
  %1074 = fmul fast float %1073, %432
  %1075 = call float @dx.op.binary.f32(i32 35, float %1074, float %1069)  ; FMax(a,b)
  %1076 = call float @dx.op.binary.f32(i32 36, float %1075, float %1070)  ; FMin(a,b)
  %1077 = fsub fast float %1076, %1074
  %1078 = call float @dx.op.unary.f32(i32 6, float %1077)  ; FAbs(value)
  %1079 = fsub fast float 1.000000e+00, %1078
  %1080 = call float @dx.op.unary.f32(i32 7, float %1079)  ; Saturate(value)
  %1081 = fmul fast float %1080, %431
  %1082 = fmul fast float %1053, 0x3FB99999A0000000
  %1083 = fmul fast float %1082, %1058
  %1084 = call float @dx.op.binary.f32(i32 35, float %1081, float %1083)  ; FMax(a,b)
  %1085 = fsub fast float 1.280000e+02, %169
  %1086 = call float @dx.op.binary.f32(i32 36, float %1084, float %1085)  ; FMin(a,b)
  %1087 = fcmp fast ogt float %1084, 0.000000e+00
  %1088 = fdiv fast float %1086, %1084
  %1089 = select i1 %1087, float %1088, float 0.000000e+00
  %1090 = fmul fast float %1089, %1084
  %1091 = fadd fast float %1090, %169
  %1092 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %17, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %1093 = extractvalue %dx.types.CBufRet.i32 %1092, 2
  %1094 = extractvalue %dx.types.CBufRet.i32 %1092, 3
  %1095 = icmp ult i32 %799, %1093
  %1096 = icmp ult i32 %800, %1094
  %1097 = and i1 %1095, %1096
  br i1 %1097, label %1098, label %1155, !dx.controlflow.hints !32

; <label>:1098                                    ; preds = %1046
  %1099 = fmul fast float %1058, %1049
  %1100 = fmul fast float %1061, %1061
  %1101 = fsub fast float %1099, %1100
  %1102 = call float @dx.op.unary.f32(i32 6, float %1101)  ; FAbs(value)
  %1103 = call float @dx.op.unary.f32(i32 24, float %1102)  ; Sqrt(value)
  %1104 = fmul fast float %1058, %1048
  %1105 = fmul fast float %1060, %1060
  %1106 = fsub fast float %1104, %1105
  %1107 = call float @dx.op.unary.f32(i32 6, float %1106)  ; FAbs(value)
  %1108 = call float @dx.op.unary.f32(i32 24, float %1107)  ; Sqrt(value)
  %1109 = fmul fast float %1058, %1047
  %1110 = fmul fast float %1059, %1059
  %1111 = fsub fast float %1109, %1110
  %1112 = call float @dx.op.unary.f32(i32 6, float %1111)  ; FAbs(value)
  %1113 = call float @dx.op.unary.f32(i32 24, float %1112)  ; Sqrt(value)
  %1114 = fmul fast float %1084, %1076
  %1115 = fmul fast float %1114, %1089
  %1116 = fadd fast float %1115, %170
  %1117 = fmul fast float %1073, %430
  %1118 = fmul fast float %1103, 1.250000e+00
  %1119 = fsub fast float %1061, %1118
  %1120 = call float @dx.op.binary.f32(i32 35, float %1117, float %1119)  ; FMax(a,b)
  %1121 = fadd fast float %1118, %1061
  %1122 = call float @dx.op.binary.f32(i32 36, float %1120, float %1121)  ; FMin(a,b)
  %1123 = fmul fast float %1090, %1122
  %1124 = fadd fast float %1123, %173
  %1125 = fmul fast float %1073, %429
  %1126 = fmul fast float %1108, 1.250000e+00
  %1127 = fsub fast float %1060, %1126
  %1128 = call float @dx.op.binary.f32(i32 35, float %1125, float %1127)  ; FMax(a,b)
  %1129 = fadd fast float %1126, %1060
  %1130 = call float @dx.op.binary.f32(i32 36, float %1128, float %1129)  ; FMin(a,b)
  %1131 = fmul fast float %1090, %1130
  %1132 = fadd fast float %1131, %172
  %1133 = fmul fast float %1073, %428
  %1134 = fmul fast float %1113, 1.250000e+00
  %1135 = fsub fast float %1059, %1134
  %1136 = call float @dx.op.binary.f32(i32 35, float %1133, float %1135)  ; FMax(a,b)
  %1137 = fadd fast float %1134, %1059
  %1138 = call float @dx.op.binary.f32(i32 36, float %1136, float %1137)  ; FMin(a,b)
  %1139 = fmul fast float %1090, %1138
  %1140 = fadd fast float %1139, %171
  %1141 = fcmp fast ogt float %1091, 0.000000e+00
  %1142 = fdiv fast float 1.000000e+00, %1091
  %1143 = select i1 %1141, float %1142, float 0.000000e+00
  %1144 = fmul fast float %1140, %1143
  %1145 = fmul fast float %1143, %1132
  %1146 = fmul fast float %1143, %1124
  %1147 = call float @dx.op.binary.f32(i32 36, float %1144, float 6.550400e+04)  ; FMin(a,b)
  %1148 = call float @dx.op.binary.f32(i32 36, float %1145, float 6.550400e+04)  ; FMin(a,b)
  %1149 = call float @dx.op.binary.f32(i32 36, float %1146, float 6.550400e+04)  ; FMin(a,b)
  %1150 = fmul fast float %1091, 1.562500e-02
  %1151 = call float @dx.op.unary.f32(i32 7, float %1150)  ; Saturate(value)
  %1152 = fmul fast float %1143, %1116
  %1153 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1153, i32 %799, i32 %800, i32 undef, float %1147, float %1148, float %1149, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %1154 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1154, i32 %799, i32 %800, i32 undef, float %1152, float %1151, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1155

; <label>:1155                                    ; preds = %1098, %1046
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind
declare i32 @dx.op.waveReadLaneAt.i32(i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.waveGetLaneIndex(i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!25}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !17, !20, !23}
!5 = !{!6, !8, !9, !10, !11, !12, !13, !14, !15, !16}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!13 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!14 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!15 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!16 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!17 = !{!18, !19}
!18 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!19 = !{i32 1, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!20 = !{!21, !22}
!21 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 672, null}
!22 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!23 = !{!24}
!24 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!25 = !{void ()* @MainCS, !"MainCS", null, !4, !26}
!26 = !{i32 0, i64 524288, i32 4, !27, i32 5, !28}
!27 = !{i32 8, i32 8, i32 1}
!28 = !{i32 0}
!29 = distinct !{!29, !"dx.controlflow.hints", i32 2}
!30 = distinct !{!30, !"dx.controlflow.hints", i32 1}
!31 = distinct !{!31, !"dx.controlflow.hints", i32 1}
!32 = distinct !{!32, !"dx.controlflow.hints", i32 1}
